{"meta":{"title":"Peony7的博客乐园","subtitle":null,"description":null,"author":"Peony7","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2017-05-04T09:05:08.000Z","updated":"2017-05-04T10:44:08.950Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-05-04T09:05:26.000Z","updated":"2017-05-04T10:44:29.999Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"linux vi 命令详解","slug":"linux-vi","date":"2017-05-11T02:33:03.000Z","updated":"2017-05-11T08:12:31.142Z","comments":true,"path":"2017/05/11/linux-vi/","link":"","permalink":"http://yoursite.com/2017/05/11/linux-vi/","excerpt":"","text":"vi编辑器是所有Unix及Linux系统下标准的编辑器，它的强大不逊色于任何最新的文本编辑器，这里只是简单地介绍一下它的用法和一小部分指 令。由于 对Unix及Linux系统的任何版本，vi编辑器是完全相同的，因此您可以在其他任何介绍vi的地方进一步了解它。vi也是Linux中最基本的文本编 辑器，学会它后，您将在Linux的世界里畅行无阻。 vi的基本概念基本上vi可以分为三种状态，分别是: 命令模式（command mode） 插入模式（Insert mode） 底行模式（last line mode） 各模式的功能区别如下： 命令行模式command mode） 控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到last line mode。 插入模式（Insert mode） 只有在Insert mode下，才可以做文字输入，按ESC键可回到命令行模式。 底行模式（last line mode） 将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。 不过一般我们在使用时把vi简化成两个模式，就是将底行模式（last line mode）也算入命令行模式command mode）。 vi的基本操作进入vi 在系统提示符号输入vi及文件名称后，就进入vi全屏幕编辑画面： 1$ vi myfile 不过有一点要特别注意，就是您进入vi之后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」才能够输入文字。初次使用vi的人都会想先用上下左右键移动光标，结果电脑一直哔哔叫，把自己气个半死，所以进入vi后，先不要乱动，转换到 「插入模式（Insert mode）」再说吧！ 切换至插入模式（Insert mode）编辑文件 在「命令行模式（command mode）」下按一下字母 i 就可以进入「插入模式（Insert mode）」，这时候你就可以开始输入文字了。 切换至命令行模式（command mode 您目前处于「插入模式（Insert mode）」，您就只能一直输入文字。回到「命令行模式（command mode）」，按一下 ESC 键就行啦。 退出vi及保存文件 在「命令行模式（command mode）」下，按一下 : 冒号键进入「底行模式（Last line mode）」，输入下面的命令： 123456# 将文章以指定的文件名filename保存: w filename # 存盘并退出vi: wq # 不存盘强制退出vi: q! 命令行模式（command mode）功能键插入模式 按i 进入插入模式后，是从光标当前位置开始输入文件； 按a进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字； 按o进入插入模式后，是插入新的一行，从行首开始输入文字。 从插入模式切换为命令行模式 按ESC键 移动光标 vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母h(左)、j(下)、k(上)、l(右)，分别控制光标左、下、上、右移一格。 key command Ctrl+B 屏幕往”后”移动一页 Ctrl+F 屏幕往”前”移动一页 Ctrl+U 屏幕往”后”移动半页 Ctrl+D 屏幕往”前”移动半页 0 移到文章的开头 g 移动到文章的最后 $ 移动到光标所在行的”行尾” ^ 移动到光标所在行的”行首” w 光标跳到下个字的开头 e 光标跳到下个字的字尾 b 光标回到上个字的开头 #l 光标移到该行的第#个位置，如：5l，56l 删除文字 key command x 每按一次，删除光标所在位置的”后面”一个字符 #x 例如，6x表示删除光标所在位置的”后面” 6 个字符 X 大写的 X ，每按一次，删除光标所在位置的”前面”一个字符 #X 例如，20X表示删除光标所在位置的”前面” 20 个字符 dd 删除光标所在行 #dd 从光标所在行开始删除#行 复制 「yw」：将光标所在之处到字尾的字符复制到缓冲区中。 「#yw」：复制#个字到缓冲区 「yy」：复制光标所在行到缓冲区。 「#yy」：例如，「6yy」表示拷贝从光标所在的该行”往下数”6行文字。 「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与”y”有关的复制命令都必须与”p”配合才能完成复制与粘贴功能。 key command 6）. 替换 「r」：替换光标所在处的字符。 「R」：替换光标所到之处的字符，直到按下「ESC」键为止。 key command 7）. 回复上一次操作 「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次”u”可以执行多次回复。 key command 更改 key command cw 更改光标所在处的字到字尾处 c#w 例如，c3w表示更改3个字 跳至指定的行 key command Ctrl+G 列出光标所在行的行号 #G 例如，15G，表示移动光标至文章的第15行行首 底行模式（last line mode）下命令简介在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。 A) 列出行号 「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。 B) 跳到文件中的某一行 「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。 C) 查找字符 「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止。 「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往前寻找到您要的关键字为止。 D) 保存文件 「w」：在冒号输入字母「w」就可以将文件保存起来。 E) 离开vi 「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。 「qw」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。 5、vi命令列表1、下表列出命令模式下的一些键的功能： h左移光标一个字符 l右移光标一个字符 k光标上移一行 j光标下移一行 ^光标移动至行首 0数字”0”，光标移至文章的开头 G光标移至文章的最后 $光标移动至行尾 Ctrl+f向前翻屏 Ctrl+b向后翻屏 Ctrl+d向前翻半屏 Ctrl+u向后翻半屏 i在光标位置前插入字符 a在光标所在位置的后一个字符开始增加 o插入新的一行，从行首开始输入 ESC从输入状态退至命令状态 x删除光标后面的字符 #x删除光标后的＃个字符 X(大写X)，删除光标前面的字符 #X删除光标前面的#个字符 dd删除光标所在的行 #dd删除从光标所在行数的#行 yw复制光标所在位置的一个字 #yw复制光标所在位置的#个字 yy复制光标所在位置的一行 #yy复制从光标所在行数的#行 p粘贴 u取消操作 cw更改光标所在位置的一个字 #cw更改光标所在位置的#个字 2、下表列出行命令模式下的一些指令w filename储存正在编辑的文件为filename wq filename储存正在编辑的文件为filename，并退出vi q!放弃所有修改，退出vi set nu显示行号 /或?查找，在/后输入要查找的内容 n与/或?一起使用，如果查找的内容不是想要找的关键字，按n或向后（与/联用）或向前（与?联用）继续查找，直到找到为止。 对于第一次用vi，有几点注意要提醒一下：1、 用vi打开文件后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」才能够输入文字。切换方法：在「命令行模式（command mode）」下按一下字母「i」就可以进入「插入模式（Insert mode）」，这时候你就可以开始输入文字了。2、编辑好后，需从插入模式切换为命令行模式才能对文件进行保存，切换方法：按「ESC」键。3、保存并退出文件：在命令模式下输入:wq即可！（别忘了wq前面的:） 参考地址http://www.cnblogs.com/mahang/archive/2011/09/01/2161672.html","categories":[],"tags":[]},{"title":"常用 Git 命令清单","slug":"git-commend","date":"2017-05-10T09:27:06.000Z","updated":"2017-05-11T05:09:00.725Z","comments":true,"path":"2017/05/10/git-commend/","link":"","permalink":"http://yoursite.com/2017/05/10/git-commend/","excerpt":"","text":"img 几个专用名词的译名如下： Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 新建代码库12345678# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 123456789# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name \"[name]\"$ git config [--global] user.email \"[email address]\" 增加/删除文件123456789101112131415161718192021# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... 分支123456789101112131415161718192021222324252627282930313233343536373839404142# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 标签1234567891011121314151617181920212223242526# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 查看信息12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat \"@&#123;0 day ago&#125;\"# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 远程同步1234567891011121314151617181920212223# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all 撤销12345678910111213141516171819202122232425262728293031# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 其他12# 生成一个可供发布的压缩包$ git archive 参考地址http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html","categories":[],"tags":[]},{"title":"使用svn客户端功能","slug":"svn-commend","date":"2017-05-05T06:23:58.000Z","updated":"2017-05-05T07:17:27.716Z","comments":true,"path":"2017/05/05/svn-commend/","link":"","permalink":"http://yoursite.com/2017/05/05/svn-commend/","excerpt":"","text":"使用svn客户端功能1.从本地导入代码到服务器(第一次初始化导入) 1$ svn import /Users/apple/Documents/eclipse_workspace/weibo svn://localhost/mycode/weibo --username=mj --password=123 -m &quot;初始化导入&quot; 我解释下指令的意思：将/Users/apple/Documents/eclipse_workspace/weibo中的所有内容，上传到服务器mycode仓库的weibo目录下，后面双引号中的”初始化导入”是注释 2.从服务器端下载代码到客户端本地 1svn checkout svn://localhost/mycode --username=mj --password=123 /Users/apple/Documents/code 我解释下指令的意思：将服务器中mycode仓库的内容下载到/Users/apple/Documents/code目录中 3.提交更改过的代码到服务器 在步骤2中已经将服务器端的代码都下载到/Users/apple/Documents/code目录中，现在修改下里面的一些代码，然后提交这些修改到服务器 12345//&lt;1&gt; 打开终端，先定位到/Users/apple/Documents/code目录$ cd/Users/apple/Documents/code//&lt;2&gt; 输入提交指令：$ svn commit -m &quot;修改了main.m文件&quot; 这个指令会将/Users/apple/Documents/code下的所有修改都同步到服务器端，假如这次我只修改了main.m文件 4.更新服务器端的代码到客户端 这个应该是最简单的指令了，在终端中定位到客户端代码目录后，比如上面的/Users/apple/Documents/code目录 1$ svn update 5.至于svn的其他用法 1$ svn help img 这里列出一大堆svn指令，后面括号中的内容的一般代表着指令的简称，比如我们可以用svn ci代替svn commit，用svn co代替svn checkout。","categories":[],"tags":[]},{"title":"SSH key (win)","slug":"create-sshkey","date":"2017-05-05T06:21:40.000Z","updated":"2017-05-05T07:17:47.079Z","comments":true,"path":"2017/05/05/create-sshkey/","link":"","permalink":"http://yoursite.com/2017/05/05/create-sshkey/","excerpt":"","text":"window系统1234567891011121314//运行git Bash客户端$ cd ~/.ssh//查看目录文件$ ls//创建一个SSH key$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;//拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容$ clip &lt; ~/.ssh/id_rsa.pub//测试一下该SSH key$ ssh -T git@github.com","categories":[],"tags":[]},{"title":"Visual Studio Code 常用快捷键(WIN)","slug":"vscode-keymap","date":"2017-05-05T01:59:54.000Z","updated":"2017-05-11T08:20:54.392Z","comments":true,"path":"2017/05/05/vscode-keymap/","link":"","permalink":"http://yoursite.com/2017/05/05/vscode-keymap/","excerpt":"","text":"主命令框F1或 Ctrl+Shift+P: 打开命令面板。在打开的输入框内，可以输入任何命令，例如： 按一下 Backspace会进入到Ctrl+P 模式 在Ctrl+P下输入 &gt;可以进入Ctrl+Shift+P模式 在 Ctrl+P 窗口下还可以: 直接输入文件名，跳转到文件 ?列出当前可执行的动作 ! 显示 Errors或 Warnings，也可以 Ctrl+Shift+M :跳转到行数，也可以 Ctrl+G直接进入 @跳转到 symbol（搜索变量或者函数），也可以 Ctrl+Shift+O直接进入 @根据分类跳转 symbol，查找属性或函数，也可以 Ctrl+Shift+O 后输入:进入 #根据名字查找 symbol，也可以 Ctrl+T 快捷键Basic Editing Key Command Command id Ctrl+X Cut line (empty selection) editor.action.clipboardCutAction Ctrl+C Copy line (empty selection) editor.action.clipboardCopyAction Ctrl+Shift+K Delete Line editor.action.deleteLines Ctrl+Enter Insert Line Below editor.action.insertLineAfter Ctrl+Shift+Enter Insert Line Above editor.action.insertLineBefore Alt+Down Move Line Down editor.action.moveLinesDownAction Alt+Up Move Line Up editor.action.moveLinesUpAction Shift+Alt+Down Copy Line Down editor.action.copyLinesDownAction Shift+Alt+Up Copy Line Up editor.action.copyLinesUpAction Ctrl+D Add Selection To Next Find Match editor.action.addSelectionToNextFindMatch Ctrl+K Ctrl+D Move Last Selection To Next Find Match editor.action.moveSelectionToNextFindMatch Ctrl+U Undo last cursor operation cursorUndo Shift+Alt+I Insert cursor at end of each line selected editor.action.insertCursorAtEndOfEachLineSelected Ctrl+Shift+L Select all occurrences of current selection editor.action.selectHighlights Ctrl+F2 Select all occurrences of current word editor.action.changeAll Ctrl+I Select current line expandLineSelection Ctrl+Alt+Down Insert Cursor Below editor.action.insertCursorBelow Ctrl+Alt+Up Insert Cursor Above editor.action.insertCursorAbove Ctrl+Shift+\\ Jump to matching bracket editor.action.jumpToBracket Ctrl+] Indent Line editor.action.indentLines Ctrl+[ Outdent Line editor.action.outdentLines Home Go to Beginning of Line cursorHome End Go to End of Line cursorEnd Ctrl+End Go to End of File cursorBottom Ctrl+Home Go to Beginning of File cursorTop Ctrl+Down Scroll Line Down scrollLineDown Ctrl+Up Scroll Line Up scrollLineUp Alt+PageDown Scroll Page Down scrollPageDown Alt+PageUp Scroll Page Up scrollPageUp Ctrl+Shift+[ Fold (collapse) region editor.fold Ctrl+Shift+] Unfold (uncollapse) region editor.unfold Ctrl+K Ctrl+[ Fold (collapse) all subregions editor.foldRecursively Ctrl+K Ctrl+] Unfold (uncollapse) all subregions editor.unfoldRecursively Ctrl+K Ctrl+0 Fold (collapse) all regions editor.foldAll Ctrl+K Ctrl+J Unfold (uncollapse) all regions editor.unfoldAll Ctrl+K Ctrl+C Add Line Comment editor.action.addCommentLine Ctrl+K Ctrl+U Remove Line Comment editor.action.removeCommentLine Ctrl+/ Toggle Line Comment editor.action.commentLine Shift+Alt+A Toggle Block Comment editor.action.blockComment Ctrl+F Find actions.find Ctrl+H Replace editor.action.startFindReplaceAction F3 Find Next editor.action.nextMatchFindAction Shift+F3 Find Previous editor.action.previousMatchFindAction Alt+Enter Select All Occurrences of Find Match editor.action.selectAllMatches Alt+C Toggle Find Case Sensitive toggleFindCaseSensitive Alt+R Toggle Find Regex toggleFindRegex Alt+W Toggle Find Whole Word toggleFindWholeWord Ctrl+M Toggle Use of Tab Key for Setting Focus editor.action.toggleTabFocusMode unassigned Toggle Render Whitespace toggleRenderWhitespace Alt+Z Toggle Word Wrap editor.action.toggleWordWrap Rich Languages Editing Key Command Command id Ctrl+Space Trigger Suggest editor.action.triggerSuggest Ctrl+Shift+Space Trigger Parameter Hints editor.action.triggerParameterHints Shift+Alt+F Format Document editor.action.formatDocument Ctrl+K Ctrl+F Format Selection editor.action.formatSelection F12 Go to Definition editor.action.goToDeclaration Ctrl+K Ctrl+I Show Hover editor.action.showHover Alt+F12 Peek Definition editor.action.previewDeclaration Ctrl+K F12 Open Definition to the Side editor.action.openDeclarationToTheSide Ctrl+. Quick Fix editor.action.quickFix Shift+F12 Show References editor.action.referenceSearch.trigger F2 Rename Symbol editor.action.rename Ctrl+Shift+. Replace with Next Value editor.action.inPlaceReplace.down Ctrl+Shift+, Replace with Previous Value editor.action.inPlaceReplace.up Shift+Alt+Right Expand AST Select editor.action.smartSelect.grow Shift+Alt+Left Shrink AST Select editor.action.smartSelect.shrink Ctrl+K Ctrl+X Trim Trailing Whitespace editor.action.trimTrailingWhitespace Ctrl+K M Change Language Mode workbench.action.editor.changeLanguageMode Navigation Key Command Command id Ctrl+T Show All Symbols workbench.action.showAllSymbols Ctrl+G Go to Line… workbench.action.gotoLine Ctrl+P Go to File…, Quick Open workbench.action.quickOpen Ctrl+Shift+O Go to Symbol… workbench.action.gotoSymbol Ctrl+Shift+M Show Problems workbench.actions.view.problems F8 Go to Next Error or Warning editor.action.marker.next Shift+F8 Go to Previous Error or Warning editor.action.marker.prev Ctrl+Shift+P Show All Commands workbench.action.showCommands Ctrl+Shift+Tab Navigate Editor Group History workbench.action.openPreviousRecentlyUsedEditorInGroup Alt+Left Go Back workbench.action.navigateBack Alt+Right Go Forward workbench.action.navigateForward Editor/Window Management Key Command Command id Ctrl+Shift+N New Window workbench.action.newWindow Ctrl+W Close Window workbench.action.closeWindow Ctrl+F4 Close Editor workbench.action.closeActiveEditor Ctrl+K F Close Folder workbench.action.closeFolder unassigned Cycle Between Editor Groups workbench.action.navigateEditorGroups Ctrl+\\ Split Editor workbench.action.splitEditor Ctrl+1 Focus into First Editor Group workbench.action.focusFirstEditorGroup Ctrl+2 Focus into Second Editor Group workbench.action.focusSecondEditorGroup Ctrl+3 Focus into Third Editor Group workbench.action.focusThirdEditorGroup Ctrl+K Ctrl+Left Focus into Editor Group on the Left workbench.action.focusPreviousGroup Ctrl+K Ctrl+Right Focus into Editor Group on the Right workbench.action.focusNextGroup Ctrl+Shift+PageUp Move Editor Left workbench.action.moveEditorLeftInGroup Ctrl+Shift+PageDown Move Editor Right workbench.action.moveEditorRightInGroup Ctrl+K Left Move Active Editor Group Left workbench.action.moveActiveEditorGroupLeft Ctrl+K Right Move Active Editor Group Right workbench.action.moveActiveEditorGroupRight File Management Key Command Command id Ctrl+N New File workbench.action.files.newUntitledFile Ctrl+O Open File… workbench.action.files.openFile Ctrl+S Save workbench.action.files.save Ctrl+K S Save All workbench.action.files.saveAll Ctrl+Shift+S Save As… workbench.action.files.saveAs Ctrl+F4 Close workbench.action.closeActiveEditor unassigned Close Others workbench.action.closeOtherEditors Ctrl+K W Close Group workbench.action.closeEditorsInGroup unassigned Close Other Groups workbench.action.closeEditorsInOtherGroups unassigned Close Group to Left workbench.action.closeEditorsToTheLeft unassigned Close Group to Right workbench.action.closeEditorsToTheRight Ctrl+K Ctrl+W Close All workbench.action.closeAllEditors Ctrl+Shift+T Reopen Closed Editor workbench.action.reopenClosedEditor Ctrl+K Enter Keep Open workbench.action.keepEditor Ctrl+Tab Open Next workbench.action.openNextRecentlyUsedEditorInGroup Ctrl+Shift+Tab Open Previous workbench.action.openPreviousRecentlyUsedEditorInGroup Ctrl+K P Copy Path of Active File workbench.action.files.copyPathOfActiveFile Ctrl+K R Reveal Active File in Windows workbench.action.files.revealActiveFileInWindows Ctrl+K O Show Opened File in New Window workbench.action.files.showOpenedFileInNewWindow unassigned Compare Opened File With workbench.files.action.compareFileWith Display Key Command Command id F11 Toggle Full Screen workbench.action.toggleFullScreen Ctrl+K Z Toggle Zen Mode workbench.action.toggleZenMode Escape Escape Leave Zen Mode workbench.action.exitZenMode Ctrl+= Zoom in workbench.action.zoomIn Ctrl+- Zoom out workbench.action.zoomOut Ctrl+Numpad0 Reset Zoom workbench.action.zoomReset Ctrl+B Toggle Sidebar Visibility workbench.action.toggleSidebarVisibility Ctrl+Shift+E Show Explorer / Toggle Focus workbench.view.explorer Ctrl+Shift+D Show Debug workbench.view.debug Ctrl+Shift+G Show Source Control workbench.view.scm Ctrl+Shift+X Show Extensions workbench.view.extensions Ctrl+Shift+U Show Output workbench.action.output.toggleOutput Ctrl+Q Quick Open View workbench.action.quickOpenView Ctrl+Shift+F Show Search workbench.view.search Ctrl+Shift+H Replace in Files workbench.action.replaceInFiles Ctrl+Shift+J Toggle Search Details workbench.action.search.toggleQueryDetails Ctrl+Shift+C Open New Command Prompt workbench.action.terminal.openNativeConsole Ctrl+Shift+V Toggle Markdown Preview markdown.showPreview Ctrl+K V Open Preview to the Side markdown.showPreviewToSide Ctrl+` Toggle Integrated Terminal workbench.action.terminal.toggleTerminal Preferences Key Command Command id Ctrl+, Open User Settings workbench.action.openGlobalSettings unassigned Open Workspace Settings workbench.action.openWorkspaceSettings Ctrl+K Ctrl+S Open Keyboard Shortcuts workbench.action.openGlobalKeybindings unassigned Open User Snippets workbench.action.openSnippets Ctrl+K Ctrl+T Select Color Theme workbench.action.selectTheme unassigned Configure Display Language workbench.action.configureLocale Debug Key Command Command id F9 Toggle Breakpoint editor.debug.action.toggleBreakpoint F5 Start workbench.action.debug.start F5 Continue workbench.action.debug.continue Ctrl+F5 Start (without debugging) workbench.action.debug.run F6 Pause workbench.action.debug.pause F11 Step Into workbench.action.debug.stepInto Shift+F11 Step Out workbench.action.debug.stepOut F10 Step Over workbench.action.debug.stepOver Shift+F5 Stop workbench.action.debug.stop Ctrl+K Ctrl+I Show Hover editor.debug.action.showDebugHover Tasks Key Command Command id Ctrl+Shift+B Run Build Task workbench.action.tasks.build unassigned Run Test Task workbench.action.tasks.test Extensions Key Command Command id unassigned Install Extension workbench.extensions.action.installExtension unassigned Show Installed Extensions workbench.extensions.action.showInstalledExtensions unassigned Show Outdated Extensions workbench.extensions.action.listOutdatedExtensions unassigned Show Recommended Extensions workbench.extensions.action.showRecommendedExtensions unassigned Show Popular Extensions workbench.extensions.action.showPopularExtensions unassigned Update All Extensions workbench.extensions.action.updateAllExtensions 修改默认快捷键打开默认键盘快捷方式设置：File -&gt; Preferences -&gt; Keyboard Shortcuts 修改keybindings.json： 12345678910111213141516171819202122232425262728293031323334353637[ // ctrl+space 被切换输入法快捷键占用 &#123; \"key\": \"ctrl+alt+space\", \"command\": \"editor.action.triggerSuggest\", \"when\": \"editorTextFocus\" &#125;, // ctrl+d 删除一行 &#123; \"key\": \"ctrl+d\", \"command\": \"editor.action.deleteLines\", \"when\": \"editorTextFocus\" &#125;, // 与删除一行的快捷键互换 &#123; \"key\": \"ctrl+shift+k\", \"command\": \"editor.action.addSelectionToNextFindMatch\", \"when\": \"editorFocus\" &#125;, // ctrl+shift+/多行注释 &#123; \"key\":\"ctrl+shift+/\", \"command\": \"editor.action.blockComment\", \"when\": \"editorTextFocus\" &#125;, // 定制与 sublime 相同的大小写转换快捷键，需安装 TextTransform 插件 &#123; \"key\": \"ctrl+k ctrl+u\", \"command\": \"uppercase\", \"when\": \"editorTextFocus\" &#125;, &#123; \"key\": \"ctrl+k ctrl+l\", \"command\": \"lowercase\", \"when\": \"editorTextFocus\" &#125;] 前端开发必备插件 PostCSS Sorting stylelint stylefmt ESLint javascript standard format beautify Babel ES6/ES7 Debugger for Chrome Add jsdoc comments javascript(ES6) code snippets vue weex Reactjs code snippets React Native Tools Npm Intellisense Instant Markdown Markdown Shortcuts TextTransform 相关参考官方快捷键","categories":[],"tags":[{"name":"keymap","slug":"keymap","permalink":"http://yoursite.com/tags/keymap/"}]}]}