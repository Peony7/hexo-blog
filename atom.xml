<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peony7的博客乐园</title>
  
  <link href="/hexo-blog/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-11T09:57:39.024Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Peony7</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>form表单回车提交问题</title>
    <link href="http://yoursite.com/2017/09/11/html-form-submit/"/>
    <id>http://yoursite.com/2017/09/11/html-form-submit/</id>
    <published>2017-09-10T16:00:00.000Z</published>
    <updated>2017-09-11T09:57:39.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="form表单回车提交问题-JS监听回车事件"><a href="#form表单回车提交问题-JS监听回车事件" class="headerlink" title="form表单回车提交问题,JS监听回车事件"></a>form表单回车提交问题,JS监听回车事件</h2><p>我们有时候希望回车键敲在文本框（input element）里来提交表单（form），但有时候又不希望如此。比如搜索行为，希望输入完关键词之后直接按回车键立即提交表单，而有些复杂表单，可能要避免回车键误操作在未完成表单填写的时候就触发了表单提交。<br>要控制这些行为，不需要借助JS，浏览器已经帮我们做了这些处理，这里总结几条规则： </p>
<ul>
<li>如果表单里有一个type=”submit”的按钮，回车键生效。 </li>
<li>如果表单里只有一个type=”text”的input，不管按钮是什么type，回车键生效。 </li>
<li>如果按钮不是用input，而是用button，并且没有加type，IE下默认为type=button，FX默认为type=submit。 </li>
<li>其他表单元素如textarea、select不影响，radio checkbox不影响触发规则，但本身在FX下会响应回车键，在IE下不响应。 </li>
<li>type=”image”的input，效果等同于type=”submit”，不知道为什么会设计这样一种type，不推荐使用，应该用CSS添加背景图合适些。 </li>
<li>我们在处理表单的页面可以检验他是否点击了按钮来控制下面的程序。if($_POST[‘submit’]){ 如果点击了按钮 程序继续}<br>实际应用的时候，要让表单响应回车键很容易，保证表单里有个type=”submit”的按钮就行。而当只有一个文本框又不希望响应回车键怎么办 呢？我的方法有点别扭，就是再写一个无意义的文本框，隐藏起来。根据第3条规则，我们在用button的时候，尽量显式声明type以使浏览器表现一致。 </li>
</ul>
<p>通过以上可知只要把type=”submit”改成type=”button”然后js提交， 在不要有一个type=”text”的input就行了。就不会发生回车跳转。 </p>
<p>但实验发现，ie和火狐不一样，火狐的submit按钮有掩藏的（display：block）和显现的都不行，必须全改，但ie只要显现的没有submit就行了。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;   </div><div class="line">    <span class="built_in">document</span>.onkeydown=keyDownSearch; </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">keyDownSearch</span>(<span class="params">e</span>) </span>&#123;  </div><div class="line">        <span class="comment">// 兼容FF和IE和Opera  </span></div><div class="line">        <span class="keyword">var</span> theEvent = e || <span class="built_in">window</span>.event;  </div><div class="line">        <span class="keyword">var</span> code = theEvent.keyCode || theEvent.which || theEvent.charCode;  </div><div class="line">        <span class="keyword">if</span> (code == <span class="number">13</span>) &#123;   </div><div class="line">            DoSomeThing();<span class="comment">//具体处理函数  </span></div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </div><div class="line">    &#125; </div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>如果只是针对某个DIV层应用回车查询的话，可以将：<br><code>document.onkeydown=keyDownSearch;</code><br>改成：<br><code>document.getElementById(&#39;层ID&#39;).onkeydown=keyDownSearch;</code></p>
<p><a href="http://www.cnblogs.com/suizhikuo/p/4925086.html" target="_blank" rel="external">http://www.cnblogs.com/suizhikuo/p/4925086.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;form表单回车提交问题-JS监听回车事件&quot;&gt;&lt;a href=&quot;#form表单回车提交问题-JS监听回车事件&quot; class=&quot;headerlink&quot; title=&quot;form表单回车提交问题,JS监听回车事件&quot;&gt;&lt;/a&gt;form表单回车提交问题,JS监听回车事件&lt;/
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>CSS 实现隐藏滚动条同时又可以滚动</title>
    <link href="http://yoursite.com/2017/08/25/css-scrollbar/"/>
    <id>http://yoursite.com/2017/08/25/css-scrollbar/</id>
    <published>2017-08-24T16:00:00.000Z</published>
    <updated>2017-08-25T03:16:01.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-实现隐藏滚动条同时又可以滚动"><a href="#CSS-实现隐藏滚动条同时又可以滚动" class="headerlink" title="CSS 实现隐藏滚动条同时又可以滚动"></a>CSS 实现隐藏滚动条同时又可以滚动</h1><p>移动端页面为了更接近原生的体验，是否可以隐藏滚动条，同时又保证页面可以滚动？</p>
<p>使用 <code>overflow:hidden</code> 隐藏滚动条，但存在的问题是：页面或元素失去了滚动的特性。<br>由于只需要兼容移动浏览器（Chrome 和 Safari），于是想到了自定义滚动条的伪对象选择器<br><code>::-webkit-scrollbar</code>。</p>
<p>关于这个选择器的介绍可以参考：<br><a href="https://webkit.org/blog/363/styling-scrollbars/" target="_blank" rel="external">Styling Scrollbars</a><br><a href="https://css-tricks.com/custom-scrollbars-in-webkit/" target="_blank" rel="external">Custom Scrollbars in WebKit</a></p>
<p>应用如下 CSS 可以隐藏滚动条：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.element::-webkit-scrollbar &#123;display:none&#125;</div></pre></td></tr></table></figure>
<p>如果要兼容 PC 其他浏览器（IE、Firefox 等），国外一位才人 John Kurlak 也研究出了一种办法。在容器外面再嵌套一层 <code>overflow:hidden</code> 内部内容再限制尺寸和外部嵌套层一样，就变相隐藏了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> &lt;div class=&quot;outer-container&quot;&gt;</div><div class="line">     &lt;div class=&quot;inner-container&quot;&gt;</div><div class="line">        &lt;div class=&quot;content&quot;&gt;</div><div class="line">            ......</div><div class="line">        &lt;/div&gt;</div><div class="line">     &lt;/div&gt;</div><div class="line"> &lt;/div&gt;</div><div class="line">.outer-container,.content &#123;</div><div class="line">    width: 200px; height: 200px;</div><div class="line">&#125;</div><div class="line">.outer-container &#123;</div><div class="line">    position: relative;</div><div class="line">    overflow: hidden;</div><div class="line">&#125;</div><div class="line">.inner-container &#123;</div><div class="line">    position: absolute; left: 0;</div><div class="line">    overflow-x: hidden;</div><div class="line">    overflow-y: scroll;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> /* for Chrome */</div><div class="line">.inner-container::-webkit-scrollbar &#123;</div><div class="line">    display: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blogs.msdn.microsoft.com/kurlak/2013/11/03/hiding-vertical-scrollbars-with-pure-css-in-chrome-ie-6-firefox-opera-and-safari/" target="_blank" rel="external">Hiding Vertical Scrollbars with Pure CSS in Chrome, IE (6+), Firefox, Opera, and Safari</a></p>
<p><a href="https://blog.niceue.com/front-end-development/hide-scrollbar-but-still-scrollable-using-css.html" target="_blank" rel="external">https://blog.niceue.com/front-end-development/hide-scrollbar-but-still-scrollable-using-css.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS-实现隐藏滚动条同时又可以滚动&quot;&gt;&lt;a href=&quot;#CSS-实现隐藏滚动条同时又可以滚动&quot; class=&quot;headerlink&quot; title=&quot;CSS 实现隐藏滚动条同时又可以滚动&quot;&gt;&lt;/a&gt;CSS 实现隐藏滚动条同时又可以滚动&lt;/h1&gt;&lt;p&gt;移动端页面为
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="scrollbar" scheme="http://yoursite.com/tags/scrollbar/"/>
    
  </entry>
  
  <entry>
    <title>viewports</title>
    <link href="http://yoursite.com/2017/08/11/viewports/"/>
    <id>http://yoursite.com/2017/08/11/viewports/</id>
    <published>2017-08-10T16:00:00.000Z</published>
    <updated>2017-08-11T06:39:16.699Z</updated>
    
    <content type="html"><![CDATA[<p>原文: <a href="http://www.w3cplus.com/css/viewports.html" target="_blank" rel="external">http://www.w3cplus.com/css/viewports.html</a></p>
<h3 id="桌面浏览器的特性"><a href="#桌面浏览器的特性" class="headerlink" title="桌面浏览器的特性"></a>桌面浏览器的特性</h3><h4 id="screen-width-height-屏幕尺寸"><a href="#screen-width-height-屏幕尺寸" class="headerlink" title="screen.width/height(屏幕尺寸)"></a>screen.width/height(屏幕尺寸)</h4><ul>
<li>含义：用户的屏幕的完整大小。</li>
<li>度量：设备的pixels。</li>
<li>兼容性问题：IE8里，不管使用IE7模式还是IE8模式，都以CSS的pixels来度量</li>
</ul>
<h4 id="window-innerWidth-Height-浏览器尺寸"><a href="#window-innerWidth-Height-浏览器尺寸" class="headerlink" title="window.innerWidth/Height(浏览器尺寸)"></a>window.innerWidth/Height(浏览器尺寸)</h4><ul>
<li>含义：包含滚动条尺寸的浏览器完整尺寸</li>
<li>度量：CSS的pixels</li>
<li>兼容性问题：IE不支持，Opera用设备pixels来度量</li>
</ul>
<h4 id="window-pageX-YOffset-滚动位移"><a href="#window-pageX-YOffset-滚动位移" class="headerlink" title="window.pageX/YOffset(滚动位移)"></a>window.pageX/YOffset(滚动位移)</h4><ul>
<li>含义：页面的移位</li>
<li>度量：CSS的pixels</li>
<li>兼容性问题：pageXOffset 和 pageYOffset 在 IE 8 及之前版本的IE不支持, 使用”document.body.scrollLeft” and “document.body.scrollTop” 来取代</li>
</ul>
<h4 id="document-documentElement-clientWidth-Height-viewport的尺寸"><a href="#document-documentElement-clientWidth-Height-viewport的尺寸" class="headerlink" title="document. documentElement. clientWidth/Height(viewport的尺寸)"></a>document. documentElement. clientWidth/Height(viewport的尺寸)</h4><ul>
<li>含义：viewport的尺寸</li>
<li>度量：CSS的pixels</li>
<li>兼容性问题：无</li>
</ul>
<p>为<code>&lt;html&gt;</code>元素赋值25%。但document. documentElement. clientWidth/Height的值不变。它虽然貌似从<code>&lt;html&gt;</code>元素取值，但实际描述的确是viewport的尺寸。</p>
<h4 id="document-documentElement-offsetWidth-Height-lt-html-gt-的尺寸"><a href="#document-documentElement-offsetWidth-Height-lt-html-gt-的尺寸" class="headerlink" title="document. documentElement. offsetWidth/Height(&lt;html&gt;的尺寸)"></a>document. documentElement. offsetWidth/Height(<code>&lt;html&gt;</code>的尺寸)</h4><ul>
<li>含义：<code>&lt;html&gt;</code>的尺寸</li>
<li>度量：CSS的pixels</li>
<li>兼容性问题：IE用这个值标示viewport的尺寸而非<code>&lt;html&gt;</code></li>
</ul>
<p>如果你为<code>&lt;html&gt;</code>元素赋值了宽度，offsetWidth会真实的反应出来。</p>
<h4 id="pageX-Y-clientX-Y-screenX-Y-事件坐标"><a href="#pageX-Y-clientX-Y-screenX-Y-事件坐标" class="headerlink" title="pageX/Y, clientX/Y, screenX/Y(事件坐标)"></a>pageX/Y, clientX/Y, screenX/Y(事件坐标)</h4><ul>
<li>含义：见下文</li>
<li>度量：见下文</li>
<li>兼容性问题：IE不支持pageX/Y,IE使用CSSpixels来度量screanX/Y</li>
<li>详细描述:<ul>
<li>pageX/Y：从<code>&lt;html&gt;</code>原点到事件触发点的CSS的 pixels</li>
<li>clientX/Y：从viewport原点（浏览器窗口）到事件触发点的CSS的 pixels</li>
<li>screenX/Y：从用户显示器窗口原点到事件触发点的设备 的 pixels。</li>
</ul>
</li>
</ul>
<h4 id="mediaqueries-Media查询"><a href="#mediaqueries-Media查询" class="headerlink" title="mediaqueries(Media查询)"></a>mediaqueries(Media查询)</h4><ul>
<li>含义：见下文</li>
<li>度量：见下文</li>
<li>兼容性问题：IE不支持.</li>
<li>详情描述:<ul>
<li>device-width/height使用screen.width/height来做为的判定值。该值以设备的pixels来度量</li>
<li>width/height使用documentElement.clientWidth/Height即viewport的值。该值以CSS的pixels来度量</li>
</ul>
</li>
</ul>
<p>在桌面浏览器中使用width而忘记device-width</p>
<h3 id="移动设备浏览器的问题"><a href="#移动设备浏览器的问题" class="headerlink" title="移动设备浏览器的问题"></a>移动设备浏览器的问题</h3><h4 id="两种viewport"><a href="#两种viewport" class="headerlink" title="两种viewport"></a>两种viewport</h4><p>因此viewport太窄，不能很好为你的基本CSS布局服务了。最显然的解决方式是让viewport更宽。因此这个需求分为了2个方面：虚拟的visualviewport和布局的layoutviewport。</p>
<h4 id="document-documentElement-clientWidth-Height-度量layout-viewviewport"><a href="#document-documentElement-clientWidth-Height-度量layout-viewviewport" class="headerlink" title="document. documentElement. clientWidth/Height(度量layout viewviewport)"></a>document. documentElement. clientWidth/Height(度量layout viewviewport)</h4><p>的尺寸</p>
<ul>
<li>含义：layoutviewport尺寸</li>
<li>度量：CSS的pixels</li>
<li>完整支持：Opera, iPhone, Android, Symbian, Bolt, MicroB, Skyfire, Obigo</li>
<li>问题：在Iris上它标示visualvieport<ul>
<li>三星的Webkit核心浏览器，仅当在页面上写入<code>&lt;meta viewport&gt;</code>标签，才正确表示。否则就代表着</li>
<li>FireFox以设备的pixels来度量</li>
<li>IE返回1024 x 768 px，而准确的尺寸保存在document.body.clientWidth/Height</li>
<li>NetFront仅当100%缩放时候才正确</li>
<li>塞班的Webkit1(在S60v3设备)不支持这些属性</li>
</ul>
</li>
<li>不支持：黑莓</li>
</ul>
<p>很幸运浏览器由于浏览器大战而遗留给我们2个特性对来度量这两种viewport。</p>
<p>旋转只关系到高度，而不是宽度。</p>
<h4 id="window-innerWidth-Height-度量visual-viewport"><a href="#window-innerWidth-Height-度量visual-viewport" class="headerlink" title="window.innerWidth/Height(度量visual viewport)"></a>window.innerWidth/Height(度量visual viewport)</h4><ul>
<li>含义：visualviewport尺寸</li>
<li>度量：CSS的pixels</li>
<li>完整支持：iPhone, Symbian, BlackBerry</li>
<li>问题：<ul>
<li>FireFox和Opera以设备的pixels返回该数值</li>
<li>Android, Bolt, MicroB, 和 NetFront 以CSS的pixels返回该数值，且为layoutviewport的值</li>
</ul>
</li>
<li>不支持：<ul>
<li>IE，它使用document. documentElement. offsetWidh/Height来表示</li>
<li>三星的Webkit核心浏览器，仅当在页面上写入<code>&lt;meta viewport&gt;</code>标签，才正确表示。否则就代表着<code>&lt;html&gt;</code>的尺寸</li>
</ul>
</li>
<li>混乱：Iris, Skyfire, Obigo返回的值不知所云</li>
</ul>
<p>我们使用window.innerWidth/Height来度量visualviewport。显然，随着用户缩放浏览器，这值会改变，更多、更少的CSS pixels放进了屏幕。<br>很不幸这是一个待完善的部分，许多浏览器依然没有支持对visualviewport的度量。到现在为止，没有浏览器将该度量存储在其他地方，我猜测window.innerWidth/Height会成为标准，albeit是最强力的支持者。</p>
<h4 id="screen-width-and-screen-height-屏幕尺寸"><a href="#screen-width-and-screen-height-屏幕尺寸" class="headerlink" title="screen.width and screen.height(屏幕尺寸)"></a>screen.width and screen.height(屏幕尺寸)</h4><ul>
<li>含义：屏幕尺寸</li>
<li>度量：设备的pixels</li>
<li>完整支持：Opera Mini, Android, Symbian, Iris, Firefox, MicroB, IE, BlackBerry</li>
<li>问题：<ul>
<li>Opera在Windows Mobile下只给出横向尺寸(landscape size)。在S60上工作正确。</li>
<li>三星的Webkit核心浏览器，仅当在页面上写入<code>&lt;meta viewport&gt;</code>标签，才正确表示。否则就代表着<code>&lt;html&gt;</code>的尺寸</li>
<li>iPhone和Obigo仅给出竖直尺寸(portrait sizes)</li>
<li>Android, Bolt, MicroB, 和 NetFront 以CSS的pixels返回该数值，且为layoutviewport的值</li>
</ul>
</li>
<li>不支持：<ul>
<li>IE，它使用document. documentElement. offsetWidh/Height来表示 - 三星的Webkit核心浏览器，仅当在页面上写入<code>&lt;meta viewport&gt;</code>标签，才正确表示。否则就代表着<code>&lt;html&gt;</code>的尺寸</li>
</ul>
</li>
<li>混乱：Iris, Skyfire, Obigo返回的值不知所云</li>
</ul>
<p>和pc浏览器一样，screen.width/height标示了设备屏幕的尺寸，以设备的pixels度量。和pc浏览器一样，作为web开发人员你永远不需要这些信息。你不关心屏幕的物理宽度，而关心当前有多少CSS的pixels能供你使用。</p>
<h4 id="window-pageX-YOffset-滚动位移-1"><a href="#window-pageX-YOffset-滚动位移-1" class="headerlink" title="window.pageX/YOffset(滚动位移)"></a>window.pageX/YOffset(滚动位移)</h4><ul>
<li>含义：见描述</li>
<li>度量：CSS的pixels</li>
<li>完整支持：iPhone, Android, Symbian, Iris, MicroB, Skyfire, Obigo</li>
<li>问题：<ul>
<li>Opera, Bolt, Firefox, and NetFront 总是返回 0.</li>
<li>三星的Webkit核心浏览器，仅当在页面上写入标签，才正确表示。</li>
</ul>
</li>
<li>不支持： IE，它使用document. scrollLeft/Top来表示</li>
</ul>
<p>你同意需要知道当前visualviewport相对于layoutviewport的距离。这就是滚动位移，如同在桌面浏览器一样，使用window.pageX/YOffset存储。</p>
<h4 id="document-documentElement-offsetWidth-Height"><a href="#document-documentElement-offsetWidth-Height" class="headerlink" title="document. documentElement. offsetWidth / Height"></a>document. documentElement. offsetWidth / Height</h4><ul>
<li>含义：html元素的整体尺寸</li>
<li>度量：CSS的pixels</li>
<li>完整支持：Opera, iPhone, Android, Symbian, Samsung, Iris, Bolt, Firefox, MicroB, Skyfire, BlackBerry, Obigo</li>
<li>问题：<ul>
<li>NetFront只在100%缩放时返回正确的值.</li>
<li>IE，使用这个特性对来表示visualviewport的尺寸。它使用document. body. clientWidth/Height来表示</li>
</ul>
</li>
</ul>
<p>和在桌面系统一样,document.documentElement.offsetWidth/Height给出了</p>
<p>元素以CSS的pixels度量的尺寸。</p>
<h4 id="Mediaqueries-Media查询"><a href="#Mediaqueries-Media查询" class="headerlink" title="Mediaqueries(Media查询)"></a>Mediaqueries(Media查询)</h4><ul>
<li>含义：以CSS的pixels度量<code>&lt;html&gt;</code>元素或以设备 的pixels度量设备</li>
<li>完整支持：Opera, iPhone, Android, Symbian, Samsung, Iris, Bolt, Firefox, MicroB.</li>
<li>不支持：Skyfire, IE, BlackBerry, NetFront, Obigo</li>
<li>备注： 我只测试了浏览器是否从正确的特性对里提取这些值。而特性对里的值是否正确并不在这里进行详细测试。</li>
</ul>
<p>media查询如同桌面系统一样。width/height使用以CSS的pixels度量的layoutviewport，device-width/height使用以设备的pixels度量的设备屏幕（device screen）。</p>
<p>换句话说，width/height 反映document. documentElement. clientWidth/Height的值, device-width/height 反映screen.width/height. (所有浏览器遵循同样原理，即使取值是错误的)。</p>
<p>media查询在标识网站处于桌面浏览器、pad浏览器或手机浏览器方面很重要，而在区别不同pad和手机设备方面并不有用。</p>
<h4 id="Eventcoordinates-事件坐标"><a href="#Eventcoordinates-事件坐标" class="headerlink" title="Eventcoordinates(事件坐标)"></a>Eventcoordinates(事件坐标)</h4><ul>
<li>含义：见下文</li>
<li>度量：见下文</li>
<li>完整支持：Symbian, Iris</li>
<li>问题：<ul>
<li>Opera 只有pageX/Y，但滚动页面过远时这个值会出错。</li>
<li>在iPhone, Firefox, 和 BlackBerry 上clientX/Y 和pageX/Y相等</li>
<li>在 Android 和 MicroB screenX/Y和clientX/Y相等，也就是它们以CSS的pixels度量屏幕尺寸</li>
<li>在FireFox里screenX/Y值不正确</li>
<li>IE, BlackBerry, 和 Obigo 不支持 pageX/Y.</li>
<li>NetFront 所以三个值都是screenX/Y.</li>
<li>Obigo clientX/Y是screenX/Y.</li>
<li>Samsung WebKit 总是返回pageX/Y.</li>
</ul>
</li>
<li>未测试：Opera Mini,Bolt,Skyfire</li>
</ul>
<p>事件坐标在桌面浏览器上多多少少是支持的。不幸的是，移动设备上在所测试的12个主流浏览器中只有Symbian WebKit 和 Iris完全正确的支持这3个坐标特性。其余浏览器多多少少都存在问题。</p>
<p>pageX/Y,该特性依然是基于页面的CSSpixels度量的值，如图在桌面浏览器一样，它是三个特性里面最有用的。</p>
<p>clientX/Y是基于visualviewport的，以CSSpixels度量的值. 这样做比较靠谱，虽然我不是很确信这样计算的好处。</p>
<p>screenX/Y基于设备屏幕以设备的pixels度量的值。显然，它使用和clientX/Y同样的参考，而设备的pixels没什么用。所以我们不需要在意screenX/Y,同在桌面浏览器一样，每个bit都是没用的。</p>
<h4 id="Metaviewport-meta-viewport"><a href="#Metaviewport-meta-viewport" class="headerlink" title="Metaviewport(meta viewport)"></a>Metaviewport(meta viewport)</h4><ul>
<li>含义：设置layoutviewport的宽度</li>
<li>度量：CSS的pixels</li>
<li>完整支持：Opera Mobile, iPhone, Android, Iris, IE, BlackBerry, Obigo</li>
<li>不支持：Opera Mini, Symbian, Bolt, Firefox, MicroB, NetFront</li>
<li>问题：<ul>
<li>Skyfire 不能处理我的测试页面。</li>
<li>在三星的wibkit浏览器下，出现会改变一些特性对的值。</li>
<li>Opera Mobile, iPhone, Samsung, and BlackBerry 不允许用户在设置viewport后再进行缩小操作（do not allow the user to zoom out.）</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文: &lt;a href=&quot;http://www.w3cplus.com/css/viewports.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/css/viewports.html&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="viewports" scheme="http://yoursite.com/tags/viewports/"/>
    
  </entry>
  
  <entry>
    <title>Linux入门教程</title>
    <link href="http://yoursite.com/2017/07/05/linux-base/"/>
    <id>http://yoursite.com/2017/07/05/linux-base/</id>
    <published>2017-07-04T16:00:00.000Z</published>
    <updated>2017-07-12T03:38:01.149Z</updated>
    
    <content type="html"><![CDATA[<p>Linux是一个多用户多任务操作系统，不但被很多开发者用作个人操作系统，还大量运行在Web服务器上。<br>该教程将带你快速了解Linux系统，包括基本概念、Linux命令、Shell脚本、常用工具等。<br>该教程可以让你快速入门快速上手，能很快让你看到学习的效果；如果你希望深入研究Linux，成为大师，请阅读《鸟哥的Lunix私房菜》。<br>阅读该教程之前，最好对操作系统有所了解，请查看<a href="http://c.biancheng.net/cpp/u/xitong/" target="_blank" rel="external">计算机操作系统教程</a>自行学习。<br>学习过程中，会涉及到Linux命令和Shell脚本，如果不希望在本地搭建学习环境，那么可以在线免费体验：<a href="http://compileonline.com/" target="_blank" rel="external">compileonline.com</a><br>Linux有大量的命令，教程中没有一一详解，如果遇到困难，可以随时查看在线手册：<a href="http://man.linuxde.net/" target="_blank" rel="external">http://man.linuxde.net/</a><br>注意：Linux 是一个类似 Unix 的操作系统，Unix 是闭源收费的，Linux 是开源免费的，Unix 要早于 Linux，所以 Linux 的开发者也模仿了 Unix（但并没有包括Unix源码），使得Linux在外观和操作上与 Unix 非常相似。</p>
<h1 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介**"></a><strong>Linux简介<em>**</em></strong></h1><h2 id="Linux简介-1"><a href="#Linux简介-1" class="headerlink" title="Linux简介**"></a><strong>Linux简介<em>**</em></strong></h2><p>严格的来讲，Linux 不算是一个操作系统，只是一个 Linux 系统中的<strong>内核</strong>，即计算机软件与硬件通讯之间的平台；Linux的全称是GNU/Linux，这才算是一个真正意义上的Linux系统。GNU是Richard Stallman组织的一个项目，世界各地的程序员可以变形GNU程序，同时遵循GPL协议，允许任何人任意改动。但是，修改后的程序必须遵循GPL协议。<br>Linux 是一个多用户多任务的操作系统，也是一款自由软件，完全兼容POSIX标准，拥有良好的用户界面，支持多种处理器架构，移植方便。<br>为程序分配系统资源，处理计算机内部细节的软件叫做操作系统或者内核。如果你希望详细了解操作系统的概念，请查看<a href="http://c.biancheng.net/cpp/u/xitong/" target="_blank" rel="external">操作系统教程</a>。<br>用户通过Shell与Linux内核交互。Shell是一个命令行解释工具（是一个软件），它将用户输入的命令转换为内核能够理解的语言（命令）。<br>Linux下，很多工作都是通过命令完成的，学好Linux，首先要掌握常用命令。</p>
<h2 id="Linux版本"><a href="#Linux版本" class="headerlink" title="Linux版本**"></a><strong>Linux版本<em>**</em></strong></h2><p>内核版本指的是在 Linus 领导下的开发小组开发出的系统内核的版本号。Linux 的每个内核版本使用形式为 x.y.zz-www 的一组数字来表示。其中：</p>
<p>· x.y：为linux的主版本号。通常y若为奇数，表示此版本为测试版，系统会有较多bug，主要用途是提供给用户测试。<br>· zz：为次版本号。<br>· www：代表发行号（注意，它与发行版本号无关）。<br>当内核功能有一个飞跃时，主版本号升级，如 Kernel2.2、2.4、2.6等。如果内核增加了少量补丁时，常常会升级次版本号，如Kernel2.6.15、2.6.20等。</p>
<p>一些组织或厂家将 Linux 内核与GNU软件（系统软件和工具）整合起来，并提供一些安装界面和系统设定与管理工具，这样就构成了一个发型套件，例如Ubuntu、Red Hat、Centos、Fedora、SUSE、Debian、FreeBSD等。相对于内核版本，发行套件的版本号随着发布者的不同而不同，与系统内核的版本号是相对独立的。因此把Red Hat等直接说成是Linux是不确切的，它们是Linux的发行版本，更确切地说，应该叫做“以linux为核心的操作系统软件包”。</p>
<h2 id="Linux体系结构"><a href="#Linux体系结构" class="headerlink" title="Linux体系结构**"></a><strong>Linux体系结构<em>**</em></strong></h2><p>下面是Linux体系结构的示意图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="linux-base/linux1816.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure><br>在所有Linux版本中，都会涉及到以下几个重要概念：</p>
<p>· <strong>内核</strong>：内核是操作系统的核心。内核直接与硬件交互，并处理大部分较低层的任务，如内存管理、进程调度、文件管理等。</p>
<p>· <strong>Shell</strong>：Shell是一个处理用户请求的工具，它负责解释用户输入的命令，调用用户希望使用的程序。</p>
<p>· <strong>命令和工具</strong>：日常工作中，你会用到很多系统命令和工具，如cp、mv、cat和grep等。在Linux系统中，有250多个命令，每个命令都有多个选项；第三方工具也有很多，他们也扮演着重要角色。</p>
<p>· <strong>文件和目录</strong>：Linux系统中所有的数据都被存储到文件中，这些文件被分配到各个目录，构成文件系统。Linux的目录与Windows的文件夹是类似的概念。</p>
<h2 id="系统启动（开机）"><a href="#系统启动（开机）" class="headerlink" title="系统启动（开机）**"></a><strong>系统启动（开机）<em>**</em></strong></h2><p>如果你有一台装有Linux的电脑，通电后系统会自动启动，然后提示你登录系统，只有登录后才能进行其他操作。</p>
<h2 id="登录Linux"><a href="#登录Linux" class="headerlink" title="登录Linux**"></a><strong>登录Linux<em>**</em></strong></h2><p>第一次使用Linux，会看到登录的提示，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">login:</div></pre></td></tr></table></figure>
<h4 id="登录步骤："><a href="#登录步骤：" class="headerlink" title="登录步骤：**"></a><strong>登录步骤：<em>**</em></strong></h4><p>· 登录Linux必须有用户名（用户ID）和密码，如果没有，可以向管理员所要。<br>· 在登录提示处输入用户名并回车；用户名是区分大小写的，输入时要注意。<br>· 然后会提示你输入密码，密码也是区分大小写的。<br>· 如果用户名和密码正确，那么会成功登录，并看到上次登录信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">login : amrood</div><div class="line">amrood&apos;s password:</div><div class="line">Last login: Sun Jun 14 09:32:32 2009 from 62.61.164.73</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>登录后会出现命令提示符(<code>$</code>)，你可以输入任何命令。下面通过 cal 命令来查看日历：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ cal</div><div class="line">​     June 2009</div><div class="line">Su Mo Tu We Th Fr Sa</div><div class="line">​    1  2  3  4  5  6</div><div class="line">7   8  9 10 11 12 13</div><div class="line">14 15 16 17 18 19 20</div><div class="line">21 22 23 24 25 26 27</div><div class="line">28 29 30</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码**"></a><strong>修改密码<em>**</em></strong></h2><p>Linux系统通过密码来保证数据和文件的安全，防止黑客破解和攻击。你可以通过以下方法来修改密码：<br>· 输入 password 命令。<br>· 输入你现在使用的密码。<br>· 输入新密码。注意密码不要过于简单，简单的密码往往会为入侵者大开便利之门。<br>· 确认密码，再输入一遍刚才的密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ passwd</div><div class="line">Changing password for amrood</div><div class="line">(current) Linux password:******</div><div class="line">New Linux password:*******</div><div class="line">Retype new Linux password:*******</div><div class="line">passwd: all authentication tokens updated  successfully</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>注意：输入的密码是看不到的，只会看到一个占位符(*)。</p>
<h2 id="查看目录和文件"><a href="#查看目录和文件" class="headerlink" title="查看目录和文件**"></a><strong>查看目录和文件<em>**</em></strong></h2><p>在Linux中，所有的数据都被保存在文件中，所有的文件又被分配到不同的目录；目录是一种类似树的结构，称为文件系统。<br>你可以使用 ls 命令来查看当前目录下的文件和目录。下面的例子，使用了 ls 命令的 -l 选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ ls -l</div><div class="line">total 19621</div><div class="line">drwxrwxr-x  2 amrood amrood      4096 Dec 25 09:59 uml</div><div class="line">-rw-rw-r--  1 amrood amrood      5341 Dec 25 08:38 uml.jpg</div><div class="line">drwxr-xr-x  2 amrood amrood      4096 Feb 15  2006 univ</div><div class="line">drwxr-xr-x  2 root   root        4096 Dec  9  2007 urlspedia</div><div class="line">-rw-r--r--  1 root   root      276480 Dec  9  2007 urlspedia.tar</div><div class="line">drwxr-xr-x  8 root   root        4096 Nov 25  2007 usr</div><div class="line">-rwxr-xr-x  1 root   root        3192 Nov 25  2007 webthumb.php</div><div class="line">-rw-rw-r--  1 amrood amrood     20480 Nov 25  2007 webthumb.tar</div><div class="line">-rw-rw-r--  1 amrood amrood      5654 Aug  9  2007 yourfile.mid</div><div class="line">-rw-rw-r--  1 amrood amrood    166255 Aug  9  2007 yourfile.swf</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>注意：以<code>d*</code> 开头的为目录，如 uml、univ、urlspedia等；其他的都是文件。</p>
<h2 id="查看当前用户信息"><a href="#查看当前用户信息" class="headerlink" title="查看当前用户信息**"></a><strong>查看当前用户信息<em>**</em></strong></h2><p>登录系统后，如果你希望知道自己的用户名（用户ID），可以使用 whoami 命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ whoami</div><div class="line">amrood</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>如果你希望了解更多关于当前用户的信息，可以使用 who am i 命令，读者可以自己尝试一下。</p>
<h2 id="查看当前在线用户"><a href="#查看当前在线用户" class="headerlink" title="查看当前在线用户**"></a><strong>查看当前在线用户<em>**</em></strong></h2><p>如果你希望知道当前在线的用户（同时登录到系统的用户），可以使用 users、who 和 w 命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ users</div><div class="line">amrood bablu qadir</div><div class="line">$ who</div><div class="line">amrood ttyp0 Oct 8 14:10 (limbo)</div><div class="line">bablu  ttyp2 Oct 4 09:08 (calliope)</div><div class="line">qadir  ttyp4 Oct 8 12:09 (dent)</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>w 命令可以看到在线用户的更多信息，读者可以自己尝试。</p>
<h2 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录**"></a><strong>退出登录<em>**</em></strong></h2><p>完成工作后，你需要退出系统，防止他人使用你的账户。<br>使用 logout 命令即可退出登录，系统会清理有关信息并断开连接。</p>
<h2 id="关闭系统（关机）"><a href="#关闭系统（关机）" class="headerlink" title="关闭系统（关机）**"></a><strong>关闭系统（关机）<em>**</em></strong></h2><p>关系Linux系统可以使用下列命令：<br>| <strong>命令<em>**</em></strong> | <strong>说明<em>**</em></strong>                   |<br>| ———- | —————————- |<br>| halt       | 直接关闭系统                       |<br>| init 0     | 使用预先定义的脚本关闭系统，关闭前可以清理和更新有关信息 |<br>| init 6     | 重新启动系统                       |<br>| poweroff   | 通过断电来关闭系统                    |<br>| reboot     | 重新启动系统                       |<br>| shutdown   | 安全关闭系统                       |<br>注意：一般情况下只有超级用户和root用户（Linux系统中的最高特权用户）才有关闭系统的权限，但是给普通用户赋予相应权限也可以关闭系统。</p>
<h1 id="Linux文件管理"><a href="#Linux文件管理" class="headerlink" title="Linux文件管理**"></a><strong>Linux文件管理<em>**</em></strong></h1><p>Linux中的所有数据都被保存在文件中，所有的文件被分配到不同的目录。目录是一种类似于树的结构，称为文件系统。<br>当你使用Linux时，大部分时间都会和文件打交道，通过本节可以了解基本的文件操作，如创建文件、删除文件、复制文件、重命名文件以及为文件创建链接等。<br>在Linux中，有三种基本的文件类型：</p>
<h4 id="1-普通文件"><a href="#1-普通文件" class="headerlink" title="1) 普通文件**"></a><strong>1) 普通文件<em>**</em></strong></h4><p>普通文件是以字节为单位的数据流，包括文本文件、源码文件、可执行文件等。文本和二进制对Linux来说并无区别，对普通文件的解释由处理该文件的应用程序进行。</p>
<h4 id="2-目录"><a href="#2-目录" class="headerlink" title="2) 目录**"></a><strong>2) 目录<em>**</em></strong></h4><p>目录可以包含普通文件和特殊文件，目录相当于Windows和Mac OS中的文件夹。</p>
<h4 id="3-设备文件"><a href="#3-设备文件" class="headerlink" title="3) 设备文件**"></a><strong>3) 设备文件<em>**</em></strong></h4><p>有些教程中称特殊文件，是一个含义。Linux 与外部设备（例如光驱，打印机，终端，modern等）是通过一种被称为设备文件的文件来进行通信。Linux 输入输出到外部设备的方式和输入输出到一个文件的方式是相同的。Linux 和一个外部设备通讯之前，这个设备必须首先要有一个设备文件存在。<br>例如，每一个终端都有自己的设备文件来供 Linux 写数据（出现在终端屏幕上）和读取数据（用户通过键盘输入）。<br>设备文件和普通文件不一样，设备文件中并不包含任何数据。</p>
<p>设备文件有两种类型：字符设备文件和块设备文件。<br>· 字符设备文件以字母<code>&quot;c&quot;</code>开头。字符设备文件向设备传送数据时，一次传送一个字符。典型的通过字符传送数据的设备有终端、打印机、绘图仪、modern等。字符设备文件有时也被称为”raw”设备文件。<br>· 块设备文件以字母<code>&quot;b&quot;</code>开头。块设备文件向设备传送数据时，先从内存中的buffer中读或写数据，而不是直接传送数据到物理磁盘。磁盘和CD-ROMS既可以使用字符设备文件也可以使用块设备文件。</p>
<h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件**"></a><strong>查看文件<em>**</em></strong></h2><p>查看当前目录下的文件和目录可以使用 <strong>ls</strong> 命令，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ls</div><div class="line">bin        hosts  lib     res.03</div><div class="line">ch07       hw1    pub     test_results</div><div class="line">ch07.bak   hw2    res.01  users</div><div class="line">docs       hw3    res.02  work</div></pre></td></tr></table></figure></p>
<p>通过 <strong>ls</strong> 命令的 <strong>-l</strong> 选项，你可以获取更多文件信息，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ls -l</div><div class="line">total 1962188</div><div class="line">drwxrwxr-x  2 amrood amrood      4096 Dec 25 09:59 uml</div><div class="line">-rw-rw-r--  1 amrood amrood      5341 Dec 25 08:38 uml.jpg</div><div class="line">drwxr-xr-x  2 amrood amrood      4096 Feb 15  2006 univ</div><div class="line">drwxr-xr-x  2 root   root        4096 Dec  9  2007 urlspedia</div><div class="line">-rw-r--r--  1 root   root      276480 Dec  9  2007 urlspedia.tar</div><div class="line">drwxr-xr-x  8 root   root        4096 Nov 25  2007 usr</div><div class="line">drwxr-xr-x  2    200    300      4096 Nov 25  2007 webthumb-1.01</div><div class="line">-rwxr-xr-x  1 root   root        3192 Nov 25  2007 webthumb.php</div><div class="line">-rw-rw-r--  1 amrood amrood     20480 Nov 25  2007 webthumb.tar</div><div class="line">-rw-rw-r--  1 amrood amrood      5654 Aug  9  2007 yourfile.mid</div><div class="line">-rw-rw-r--  1 amrood amrood    166255 Aug  9  2007 yourfile.swf</div><div class="line">drwxr-xr-x 11 amrood amrood      4096 May 29  2007 zlib-1.2.3</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>每一列的含义如下：<br>· 第一列：文件类型。<br>· 第二列：表示文件个数。如果是文件，那么就是1；如果是目录，那么就是该目录中文件的数目。<br>· 第三列：文件的所有者，即文件的创建者。<br>· 第四列：文件所有者所在的用户组。在Linux中，每个用户都隶属于一个用户组。<br>· 第五列：文件大小（以字节计）。<br>· 第六列：文件被创建或上次被修改的时间。<br>· 第七列：文件名或目录名。<br>注意：每一个目录都有一个指向它本身的子目录<code>.</code> 和指向它上级目录的子目录<code>..</code>，所以对于一个空目录，第二列应该为 2。</p>
<p>通过 <strong>ls -l</strong> 列出的文件，每一行都是以 a、d、- 或 l 开头，这些字符表示文件类型：<br>| <strong>前缀<em>**</em></strong> | <strong>描述<em>**</em></strong>                               |<br>| ———- | —————————————- |<br>| -          | 普通文件。如文本文件、二进制可执行文件、源代码等。                |<br>| b          | 块设备文件。硬盘可以使用块设备文件。                       |<br>| c          | 字符设备文件。硬盘也可以使用字符设备文件。                    |<br>| d          | 目录文件。目录可以包含文件和其他目录。                      |<br>| l          | 符号链接（软链接）。可以链接任何普通文件，类似于 Windows 中的快捷方式。 |<br>| p          | 具名管道。管道是进程间的一种通信机制。                      |<br>| s          | 用于进程间通信的套接字。                             |<br>提示：通俗的讲软连接就是windows的快捷方式，原来文件删了，快捷方式虽然在但是不起作用了。</p>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符**"></a><strong>元字符<em>**</em></strong></h2><p>元字符是具有特殊含义的字符。<code>*</code> 和 <code>?</code> 都是元字符：<br>· <code>*</code> 可以匹配 0 个或多个任意字符；<br>· <code>?</code> 匹配一个字符。<br>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ls ch*.doc</div></pre></td></tr></table></figure></p>
<p>可以显示所有以 ch 开头，以<code>.doc</code> 结尾的文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ch01-1.doc   ch010.doc  ch02.doc    ch03-2.doc</div><div class="line">ch04-1.doc   ch040.doc  ch05.doc    ch06-2.doc</div><div class="line">ch01-2.doc ch02-1.doc c</div></pre></td></tr></table></figure></p>
<p>这里，<code>*</code> 匹配任意一个字符。如果你希望显示所有以 <code>.doc</code> 结尾的文件，可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ls *.doc。</div></pre></td></tr></table></figure></p>
<h2 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件**"></a><strong>隐藏文件<em>**</em></strong></h2><p>隐藏文件的第一个字符为英文句号或点号(<code>.</code>)，Linux程序（包括Shell）通常使用隐藏文件来保存配置信息。<br>下面是一些常见的隐藏文件：<br><code>.profile</code>：Bourne shell (sh) 初始化脚本<br><code>.kshrc</code>：Korn shell (ksh) 初始化脚本<br><code>.cshrc</code>：C shell (csh) 初始化脚本<br><code>.rhosts</code>：Remote shell (rsh) 配置文件</p>
<p>查看隐藏文件需要使用 <strong>ls</strong> 命令的 <strong>-a</strong> 选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ls -a</div><div class="line">.         .profile       docs     lib     test_results</div><div class="line">..        .rhosts        hosts    pub     users</div><div class="line">.emacs    bin            hw1      res.01  work</div><div class="line">.exrc     ch07           hw2      res.02</div><div class="line">.kshrc    ch07.bak       hw3      res.03</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>一个点号(<code>.</code>)表示当前目录，两个点号(<code>..</code>)表示上级目录<br>注意：输入密码时，星号(<code>*</code>)作为占位符，代表你输入的字符个数。</p>
<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件**"></a><strong>创建文件<em>**</em></strong></h2><p>在Linux中，可以使用 vi 编辑器创建一个文本文件，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi filename</div></pre></td></tr></table></figure></p>
<p>上面的命令会创建文件 filename 并打开，按下 <code>i</code> 键即可进入编辑模式，你可以向文件中写入内容。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">This is Linux file....I created it for the first time.....</div><div class="line">I&apos;m going to save this content in this file.</div></pre></td></tr></table></figure></p>
<p>完成编辑后，可以按 <code>esc</code> 键退出编辑模式，也可以按组合键 <code>Shift + ZZ</code> 完全退出文件。这样，就完成了文件的创建。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vi filename</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h2 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件**"></a><strong>编辑文件<em>**</em></strong></h2><p>vi 编辑器可以用来编辑文件。由于篇幅限制，这里仅作简单介绍，将在后面章节进行详细讲解。<br>如下可以打开一个名为 filename 的文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi filename</div></pre></td></tr></table></figure></p>
<p>当文件被打开后，可以按 <code>i</code> 键进入编辑模式，按照自己的方式编辑文件。如果想移动光标，必须先按 <code>esc</code> 键退出编辑模式，然后使用下面的按键在文件内移动光标：<br>· l 键向右移动<br>· h 键向左移动<br>· k 键向上移动<br>· j 键向下移动</p>
<p>使用上面的按键，可以将光标快速定位到你想编辑的地方。定位好光标后，按 <code>i</code> 键再次进入编辑模式。编辑完成后按 <code>esc</code> 键退出编辑模式或者按组合键<code>Shift+ZZ</code> 退出当前文件。</p>
<h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容**"></a><strong>查看文件内容<em>**</em></strong></h2><p>可以使用 <strong>cat</strong> 命令来查看文件内容，下面是一个简单的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat filename</div><div class="line">This is Linux file....I created it for the first time.....</div><div class="line">I&apos;m going to save this content in this file.</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>可以通过 <strong>cat</strong> 命令的 <strong>-b</strong> 选项来显示行号，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat -b filename</div><div class="line">1   This is Linux file....I created it for the first time.....</div><div class="line">2   I&apos;m going to save this content in this file.</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h2 id="统计单词数目"><a href="#统计单词数目" class="headerlink" title="统计单词数目**"></a><strong>统计单词数目<em>**</em></strong></h2><p>可以使用 <strong>wc</strong> 命令来统计当前文件的行数、单词数和字符数，下面是一个简单的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wc filename</div><div class="line">2  19 103 filename</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>每一列的含义如下：<br>· 第一列：文件的总行数<br>· 第二列：单词数目<br>· 第三列：文件的字节数，即文件的大小<br>· 第四列：文件名</p>
<p>也可以一次查看多个文件的内容，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wc filename1 filename2 filename3</div></pre></td></tr></table></figure></p>
<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件**"></a><strong>复制文件<em>**</em></strong></h2><p>可以使用 <strong>cp</strong> 命令来复制文件。<strong>cp</strong> 命令的基本语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp source_file destination_file</div></pre></td></tr></table></figure></p>
<p>下面的例子将会复制 filename 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cp filename copyfile</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>现在在当前目录中会多出一个和 filename 一模一样的 copyfile 文件。</p>
<h2 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件**"></a><strong>重命名文件<em>**</em></strong></h2><p>重命名文件可以使用 <strong>mv</strong> 命令，语法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mv old_file new_file</div></pre></td></tr></table></figure></p>
<p>下面的例子将会把 filename 文件重命名为 newfile：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mv filename newfile</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>现在在当前目录下，只有一个 newfile 文件。<br><strong>mv</strong> 命令其实是一个移动文件的命令，不但可以更改文件的路径，也可以更改文件名。</p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件**"></a><strong>删除文件<em>**</em></strong></h2><p><strong>rm</strong>命令可以删除文件，语法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm filename</div></pre></td></tr></table></figure></p>
<p>注意：删除文件是一种危险的行为，因为文件内可能包含有用信息，建议结合 <strong>-i</strong> 选项来使用 <strong>rm</strong> 命令。<br>下面的例子会彻底删除一个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rm filename</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>你也可以一次删除多个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rm filename1 filename2 filename3</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h2 id="标准的Linux流"><a href="#标准的Linux流" class="headerlink" title="标准的Linux流**"></a><strong>标准的Linux流<em>**</em></strong></h2><p>一般情况下，每个Linux程序运行时都会创建三个文件流（三个文件）：<br>· 标准输入流(stdin)：stdin的文件描述符为0，Linux程序默认从stdin读取数据。<br>· 标准输出流(stdout)：stdout 的文件描述符为1，Linux程序默认向stdout输出数据。<br>· 标准错误流(stderr)：stderr的文件描述符为2，Linux程序会向stderr流中写入错误信息。</p>
<h1 id="Linux目录"><a href="#Linux目录" class="headerlink" title="Linux目录**"></a><strong>Linux目录<em>**</em></strong></h1><p>目录也是一个文件，它的唯一功能是用来保存文件及其相关信息。所有的文件，包括普通文件、设备文件和目录文件，都会被保存到目录中。</p>
<h2 id="主目录"><a href="#主目录" class="headerlink" title="主目录**"></a><strong>主目录<em>**</em></strong></h2><p>登录后，你所在的位置就是你的主目录（或登录目录），接下来你主要是在这个目录下进行操作，如创建文件、删除文件等。<br>使用下面的命令可以随时进入主目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$cd ~</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>这里<code>~</code> 就表示主目录。如果你希望进入其他用户的主目录，可以使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$cd ~username</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>返回进入当前目录前所在的目录可以使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$cd -</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h2 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径**"></a><strong>绝对路径和相对路径<em>**</em></strong></h2><p>Linux 的目录有清晰的层次结构，<code>/</code> 代表根目录，所有的目录都位于<code>/</code>下面；文件在层次结构中的位置可以用路径来表示。<br>如果一个路径以<code>/</code> 开头，就称为绝对路径；它表示当前文件与根目录的关系。举例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/passwd</div><div class="line">/users/sjones/chem/notes</div><div class="line">/dev/rdsk/Os3</div></pre></td></tr></table></figure></p>
<p>不以 <code>/</code> 开头的路径称为相对路径，它表示文件与当前目录的关系。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chem/notes</div><div class="line">personal/res</div></pre></td></tr></table></figure></p>
<p>获取当前所在的目录可以使用 pwd 命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$pwd</div><div class="line">/user0/home/amrood</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>查看目录中的文件可以使用 <strong>ls</strong> 命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ls dirname</div></pre></td></tr></table></figure></p>
<p>下面的例子将遍历 /usr/local 目录下的文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ls /usr/local</div><div class="line">X11       bin          gimp       jikes       sbin</div><div class="line">ace       doc          include    lib         share</div><div class="line">atalk     etc          info       man         ami</div></pre></td></tr></table></figure></p>
<h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录**"></a><strong>创建目录<em>**</em></strong></h2><p>可以使用 <strong>mkdir</strong> 命令来创建目录，语法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$mkdir dirname</div></pre></td></tr></table></figure></p>
<p>dirname 可以为绝对路径，也可以为相对路径。例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$mkdir mydir</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>会在当前目录下创建 mydir 目录。又如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$mkdir /tmp/test-dir</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>会在<code>/tmp</code> 目录下创建 test-dir 目录。<strong>mkdir</strong> 成功创建目录后不会输出任何信息。<br>也可以使用 <strong>mkdir</strong> 命令同时创建多个目录，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$mkdir docs pub</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>会在当前目录下创建 docs 和 pub 两个目录。</p>
<h2 id="创建父目录"><a href="#创建父目录" class="headerlink" title="创建父目录**"></a><strong>创建父目录<em>**</em></strong></h2><p>使用 <strong>mkdir</strong> 命令创建目录时，如果上级目录不存在，就会报错。下面的例子中，mkdir 会输出错误信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$mkdir /tmp/amrood/test</div><div class="line">mkdir: Failed to make directory &quot;/tmp/amrood/test&quot;;</div><div class="line">No such file or directory</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>为 <strong>mkdir</strong> 命令增加 <strong>-p</strong> 选项，可以一级一级创建所需要的目录，即使上级目录不存在也不会报错。例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$mkdir -p /tmp/amrood/test</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>会创建所有不存在的上级目录。</p>
<h2 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录**"></a><strong>删除目录<em>**</em></strong></h2><p>可以使用 <strong>rmdir</strong> 命令来删除目录，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$rmdir dirname</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>注意：删除目录时请确保目录为空，不会包含其他文件或目录。<br>也可以使用 <strong>rmdir</strong> 命令同时删除多个目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$rmdir dirname1 dirname2 dirname3</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>如果 dirname1、dirname2、dirname3 为空，就会被删除。<strong>rmdir</strong> 成功删除目录后不会输出任何信息。</p>
<h2 id="改变所在目录"><a href="#改变所在目录" class="headerlink" title="改变所在目录**"></a><strong>改变所在目录<em>**</em></strong></h2><p>可以使用 <strong>cd</strong> 命令来改变当前所在目录，进入任何有权限的目录，语法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$cd dirname</div></pre></td></tr></table></figure></p>
<p>dirname 为路径，可以为相对路径，也可以为绝对路径。例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$cd /usr/local/bin</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>可以进入<code>/usr/local/bin</code> 目录。可以使用相对路径从这个目录进入 <code>/usr/home/amrood</code> 目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$cd ../../home/amrood</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h2 id="重命名目录"><a href="#重命名目录" class="headerlink" title="重命名目录**"></a><strong>重命名目录<em>**</em></strong></h2><p><strong>mv</strong> (move) 命令也可以用来重命名目录，语法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$mv olddir newdir</div></pre></td></tr></table></figure></p>
<p>下面的例子将会把 mydir 目录重命名为 yourdir 目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$mv mydir yourdir</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h2 id="点号"><a href="#点号" class="headerlink" title="点号(.)**"></a><strong>点号(<code>.</code>)<em>**</em></strong></h2><p>一个点号(<code>.</code>)表示当前目录，两个点号(<code>..</code>)表示上级目录（父目录）。<br><strong>ls</strong> 命令的 <strong><code>-a</code></strong> 选项可以查看所有文件，包括隐藏文件；<strong><code>-l</code></strong> 选项可以查看文件的所有信息，共有7列。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ls -la</div><div class="line">drwxrwxr-x    4    teacher   class   2048  Jul 16 17.56 .</div><div class="line">drwxr-xr-x    60   root              1536  Jul 13 14:18 ..</div><div class="line">----------    1    teacher   class   4210  May 1 08:27 .profile</div><div class="line">-rwxr-xr-x    1    teacher   class   1948  May 12 13:42 memo</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h1 id="Linux文件权限和访问模式"><a href="#Linux文件权限和访问模式" class="headerlink" title="Linux文件权限和访问模式**"></a><strong>Linux文件权限和访问模式<em>**</em></strong></h1><p>为了更加安全的存储文件，Linux为不同的文件赋予了不同的权限，每个文件都拥有下面三种权限：<br>· 所有者权限：文件所有者能够进行的操作<br>· 组权限：文件所属用户组能够进行的操作<br>· 外部权限（其他权限）：其他用户可以进行的操作。</p>
<h2 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限** ???"></a><strong>查看文件权限<em>**</em></strong> ???</h2><p>使用 <strong>ls -l</strong> 命令可以查看与文件权限相关的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ls -l /home/amrood</div><div class="line">-rwxr-xr--  1 amrood   users 1024  Nov 2 00:10  myfile</div><div class="line">drwxr-xr--- 1 amrood   users 1024  Nov 2 00:10  mydir</div></pre></td></tr></table></figure></p>
<p>第一列就包含了文件或目录的权限。<br>第一列的字符可以分为三组，每一组有三个，每个字符都代表不同的权限，分别为读取(r)、写入(w)和执行(x)：<br>· 第一组字符(2-4)表示文件所有者的权限，-rwxr-xr– 表示所有者拥有读取(r)、写入(w)和执行(x)的权限。<br>· 第二组字符(5-7)表示文件所属用户组的权限，-rwxr-xr– 表示该组拥有读取(r)和执行(x)的权限，但没有写入权限。<br>· 第三组字符(8-10)表示所有其他用户的权限，rwxr-xr– 表示其他用户只能读取(r)文件。</p>
<h2 id="文件访问模式"><a href="#文件访问模式" class="headerlink" title="文件访问模式**"></a><strong>文件访问模式<em>**</em></strong></h2><p>文件权限是Linux系统的第一道安全防线，基本的权限有读取(r)、写入(w)和执行(x)：<br>· 读取：用户能够读取文件信息，查看文件内容。<br>· 写入：用户可以编辑文件，可以向文件写入内容，也可以删除文件内容。<br>· 执行：用户可以将文件作为程序来运行。</p>
<h2 id="目录访问模式"><a href="#目录访问模式" class="headerlink" title="目录访问模式**"></a><strong>目录访问模式<em>**</em></strong></h2><p>目录的访问模式和文件类似，但是稍有不同：<br>· 读取：用户可以查看目录中的文件<br>· 写入：用户可以在当前目录中删除文件或创建文件<br>· 执行：执行权限赋予用户遍历目录的权利，例如执行 cd 和 ls 命令。</p>
<h2 id="改变权限"><a href="#改变权限" class="headerlink" title="改变权限**"></a><strong>改变权限<em>**</em></strong></h2><p>可以使用 <strong>chmod</strong> (change mode) 命令来改变文件或目录的访问权限，权限可以使用符号或数字来表示。</p>
<h4 id="使用符号表示权限"><a href="#使用符号表示权限" class="headerlink" title="使用符号表示权限**"></a><strong>使用符号表示权限<em>**</em></strong></h4><p>对于初学者来说最简单的就是使用符号来改变文件或目录的权限，你可以增加(<code>+</code>)和删除(<code>-</code>)权限，也可以指定特定权限。<br>| <strong>符号<em>**</em></strong> | <strong>说明<em>**</em></strong> |<br>| ———- | ———- |<br>| +          | 为文件或目录增加权限 |<br>| -          | 删除文件或目录的权限 |<br>| =          | 设置指定的权限    |<br>下面的例子将会修改 testfile 文件的权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ls -l testfile</div><div class="line">-rwxrwxr--  1 amrood   users 1024  Nov 2 00:10  testfile</div><div class="line">$chmod o+wx testfile</div><div class="line">$ls -l testfile</div><div class="line">-rwxrwxrwx  1 amrood   users 1024  Nov 2 00:10  testfile</div><div class="line">$chmod u-x testfile</div><div class="line">$ls -l testfile</div><div class="line">-rw-rwxrwx  1 amrood   users 1024  Nov 2 00:10  testfile</div><div class="line">$chmod g=rx testfile</div><div class="line">$ls -l testfile</div><div class="line">-rw-r-xrwx  1 amrood   users 1024  Nov 2 00:10  testfile</div></pre></td></tr></table></figure></p>
<p>也可以同时使用多个符号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$chmod o+wx,u-x,g=rx testfile</div><div class="line">$ls -l testfile</div><div class="line">-rw-r-xrwx  1 amrood   users 1024  Nov 2 00:10  testfile</div></pre></td></tr></table></figure></p>
<h4 id="使用数字表示权限"><a href="#使用数字表示权限" class="headerlink" title="使用数字表示权限**"></a><strong>使用数字表示权限<em>**</em></strong></h4><p>除了符号，也可以使用八进制数字来指定具体权限，如下表所示：<br>| <strong>数字<em>**</em></strong> | <strong>说明<em>**</em></strong>                         | <strong>权限<em>**</em></strong> |<br>| ———- | ———————————- | ———- |<br>| 0          | 没有任何权限                             | —        |<br>| 1          | 执行权限                               | –x        |<br>| 2          | 写入权限                               | -w-        |<br>| 3          | 执行权限和写入权限：1 (执行) + 2 (写入) = 3      | -wx        |<br>| 4          | 读取权限                               | r–        |<br>| 5          | 读取和执行权限：4 (读取) + 1 (执行) = 5        | r-x        |<br>| 6          | 读取和写入权限：4 (读取) + 2 (写入) = 6        | rw-        |<br>| 7          | 所有权限: 4 (读取) + 2 (写入) + 1 (执行) = 7 | rwx        |<br>下面的例子，首先使用 <strong>ls -1</strong> 命令查看 testfile 文件的权限，然后使用 <strong>chmod</strong> 命令更改权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ls -l testfile</div><div class="line">-rwxrwxr--  1 amrood   users 1024  Nov 2 00:10  testfile</div><div class="line">$ chmod 755 testfile</div><div class="line">$ls -l testfile</div><div class="line">-rwxr-xr-x  1 amrood   users 1024  Nov 2 00:10  testfile</div><div class="line">$chmod 743 testfile</div><div class="line">$ls -l testfile</div><div class="line">-rwxr---wx  1 amrood   users 1024  Nov 2 00:10  testfile</div><div class="line">$chmod 043 testfile</div><div class="line">$ls -l testfile</div><div class="line">----r---wx  1 amrood   users 1024  Nov 2 00:10  testfile</div></pre></td></tr></table></figure></p>
<h2 id="更改所有者和用户组"><a href="#更改所有者和用户组" class="headerlink" title="更改所有者和用户组**"></a><strong>更改所有者和用户组<em>**</em></strong></h2><p>在Linux中，每添加一个新用户，就会为它分配一个用户ID和群组ID，上面提到的文件权限也是基于用户和群组来分配的。<br>有两个命令可以改变文件的所有者或群组：<br>· <strong>chown</strong>：chown 命令是”change owner”的缩写，用来改变文件的所有者。<br>· <strong>chgrp</strong>：chgrp 命令是”change group”的缩写，用来改变文件所在的群组。</p>
<p><strong>chown</strong> 命令用来更改文件所有者，其语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chown user filelist</div></pre></td></tr></table></figure></p>
<p>user 可以是用户名或用户ID，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ chown amrood testfile</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>将 testfile 文件的所有者改为 amrood。<br>注意：超级用户 root 可以不受限制的更改文件的所有者和用户组，但是普通用户只能更改所有者是自己的文件或目录。</p>
<p><strong>chgrp</strong> 命令用来改变文件所属群组，其语法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chgrp group filelist</div></pre></td></tr></table></figure></p>
<p>group可以是群组名或群组ID，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ chgrp special testfile</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>将文件 testfile 的群组改为 special。</p>
<h2 id="SUID和SGID位"><a href="#SUID和SGID位" class="headerlink" title="SUID和SGID位**"></a><strong>SUID和SGID位<em>**</em></strong></h2><p>在Linux中，一些程序需要特殊权限才能完成用户指定的操作。<br>例如，用户的密码保存在<code>/etc/shadow</code> 文件中，出于安全考虑，一般用户没有读取和写入的权限。但是当我们使用<strong>passwd</strong> 命令来更改密码时，需要对<code>/etc/shadow</code> 文件有写入权限。这就意味着，passwd 程序必须要给我们一些特殊权限，才可以向 <code>/etc/shadow</code> 文件写入内容。<br>Linux 通过给程序设置SUID(Set User ID)和SGID(Set Group ID)位来赋予普通用户特殊权限。当我们运行一个带有SUID位的程序时，就会继承该程序所有者的权限；如果程序不带SUID位，则会根据程序使用者的权限来运行。<br>SGID也是一样。一般情况下程序会根据你的组权限来运行，但是给程序设置SGID后，就会根据程序所在组的组权限运行。<br>如果程序设置了SUID位，就会在表示文件所有者可执行权限的位置上出现’s’字母；同样，如果设置了SGID，就会在表示文件群组可执行权限的位置上出现’s’字母。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ls -l /usr/bin/passwd</div><div class="line">-r-sr-xr-x  1   root   bin  19031 Feb 7 13:47  /usr/bin/passwd*</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>上面第一列第四个字符不是’x’或’-‘，而是’s’，说明 <code>/usr/bin/passwd</code> 文件设置了SUID位，这时普通用户会以root用户的权限来执行passwd程序。<br>注意：小写字母’s’说明文件所有者有执行权限(x)，大写字母’S’说明程序所有者没有执行权限(x)。<br>如果在表示群组权限的位置上出现SGID位，那么也仅有三类用户可以删除该目录下的文件：目录所有者、文件所有者、超级用户 root。<br>为一个目录设置SUID和SGID位可以使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ chmod ug+s dirname</div><div class="line">$ ls -l</div><div class="line">drwsr-sr-x 2 root root  4096 Jun 19 06:45 dirname</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h1 id="Linux环境变量"><a href="#Linux环境变量" class="headerlink" title="Linux环境变量**"></a><strong>Linux环境变量<em>**</em></strong></h1><p>在Linux中，环境变量是一个很重要的概念。环境变量可以由系统、用户、Shell以及其他程序来设定。<br>变量就是一个可以被赋值的字符串，赋值范围包括数字、文本、文件名、设备以及其他类型的数据。<br>下面的例子，我们将为变量 TEST 赋值，然后使用 <strong>echo</strong> 命令输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$TEST=&quot;Linux Programming&quot;</div><div class="line">$echo $TEST</div><div class="line">Linux Programming</div></pre></td></tr></table></figure></p>
<p>注意：变量赋值时前面不能加 <code>$</code> 符号，变量输出时必须要加 <code>$</code> 前缀。退出 Shell 时，变量将消失。<br>登录系统后，Shell会有一个初始化的过程，用来设置环境变量。这个阶段，Shell会读取 <code>/etc/profile</code> 和 <code>.profile</code> 两个文件，过程如下：<br>· Shell首先检查 <code>/etc/profile</code> 文件是否存在，如果存在，就读取内容，否则就跳过，但是不会报错。<br>· 然后检查你的主目录（登录目录）中是否存在 <code>.profile</code> 文件，如果存在，就读取内容，否则就跳过，也不会报错。<br>读取完上面两个文件，Shell就会出现 <code>$</code> 命令提示符：<br><code>$</code><br>出现这个提示符，就可以输入命令并调用相应的程序了。<br>注意：上面是Bourne Shell的初始化过程，bash 和 ksh 在初始化过程中还会检查其他文件。</p>
<h2 id="profile文件"><a href="#profile文件" class="headerlink" title=".profile文件**"></a><strong><code>.profile</code>文件<em>**</em></strong></h2><p><code>/etc/profile</code>文件包含了通用的Shell初始化信息，由Linux管理员维护，一般用户无权修改。<br>但是你可以修改主目录下的 <code>.profile</code> 文件，增加一些“私人定制”初始化信息，包括：<br>· 设置默认终端类型和外观样式；<br>· 设置 Shell 命令查找路径，即PATH变量；<br>· 设置命令提示符。<br>找到主目录下的 <code>.profile</code> 文件，使用 vi 编辑器打开并查看内容。</p>
<h2 id="设置终端类型"><a href="#设置终端类型" class="headerlink" title="设置终端类型**"></a><strong>设置终端类型<em>**</em></strong></h2><p>一般情况下，我们使用的终端是由 login 或 getty 程序设置的，可能会不符合我们的习惯。<br>对于没有使用过的终端，可能会比较生疏，不习惯命令的输出样式，交互起来略显吃力。所以，一般用户会将终端设置成下面的类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$TERM=vt100</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>vt100 是 virtual terminate 100 的缩写。虚拟终端是一种假的终端，真正有自己的显示器和键盘的终端，会通过特殊电缆（如串口）连到计算机主机。vt100 是被绝大多数Linux系统所支持的一种虚拟终端规范，常用的还有ansi、xterm等。</p>
<h2 id="设置PATH变量"><a href="#设置PATH变量" class="headerlink" title="设置PATH变量**"></a><strong>设置PATH变量<em>**</em></strong></h2><p>在命令提示符下输入一个命令时，Shell 会根据 PATH 变量来查找该命令对应的程序，PATH变量指明了这些程序所在的路径。<br>一般情况下PATH变量的设置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$PATH=/bin:/usr/bin</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>多个路径使用冒号(<code>:</code>)分隔。如果用户输入的命令在PATH设置的路径下没有找到，就会报错，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$hello</div><div class="line">hello: not found</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h2 id="PS1和PS2变量"><a href="#PS1和PS2变量" class="headerlink" title="PS1和PS2变量**"></a><strong>PS1和PS2变量<em>**</em></strong></h2><p>PS1变量用来保存命令提示符，可以随意修改，如果你不习惯使用 <code>$</code> 作为提示符，也可以改成其他字符。PS1变量被修改后，提示符会立即改变。<br>例如，把命令提示符设置成<code>=&gt;</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$PS1=&apos;=&gt;&apos;</div><div class="line">=&gt;</div><div class="line">=&gt;</div><div class="line">=&gt;</div></pre></td></tr></table></figure></p>
<p>也可以将提示信息设置成当前目录，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">=&gt;PS1=&quot;[\u@\h \w]\$&quot;</div><div class="line">[root@ip-72-167-112-17 /var/www/tutorialspoint/Linux]$</div><div class="line">[root@ip-72-167-112-17 /var/www/tutorialspoint/Linux]$</div></pre></td></tr></table></figure></p>
<p>命令提示信息包含了用户名、主机名和当前目录。<br>下表中的转义字符可以被用作PS1的参数，丰富命令提示符信息。<br>| <strong>转义字符<em>**</em></strong> | <strong>描述<em>**</em></strong>                 |<br>| ———— | ————————– |<br>| <code>\t</code>           | 当前时间，格式为 <code>HH:MM:SS</code>          |<br>| <code>\d</code>           | 当前日期，格式为Weekday Month Date |<br>| <code>\n</code>           | 换行                         |<br>| <code>\W</code>           | 当前所在目录                     |<br>| <code>\w</code>           | 当前所在目录的完整路径                |<br>| <code>\u</code>           | 用户名                        |<br>| <code>\h</code>           | 主机名（IP地址）                  |<br>| <code>#</code>            | 输入的命令的个数，每输入一个新的命令就会加1     |<br>| <code>\$</code>           | 如果是超级用户 root，提示符为#，否则为$。   |<br>你可以在每次登录的时候修改提示符，也可以在 <code>.profile</code> 文件中增加 PS1 变量，这样每次登录时会自动修改提示符。<br>如果用户输入的命令不完整，Shell还会使用第二提示符来等待用户完成命令的输入。默认的第二命令提示符是 <code>&gt;</code>，保存在 PS2 变量，可以随意修改。<br>下面的例子使用默认的第二命令提示符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;this is a</div><div class="line">&gt; test&quot;</div><div class="line">this is a</div><div class="line">test</div><div class="line">$</div></pre></td></tr></table></figure></p>
<p>下面的例子通过PS2变量改变提示符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ PS2=&quot;secondary prompt-&gt;&quot;</div><div class="line">$ echo &quot;this is a</div><div class="line">secondary prompt-&gt;test&quot;</div><div class="line">this is a</div><div class="line">test</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h2 id="常用环境变量"><a href="#常用环境变量" class="headerlink" title="常用环境变量**"></a><strong>常用环境变量<em>**</em></strong></h2><p>下表列出了部分重要的环境变量，这些变量可以通过上面提到的方式修改。<br>| <strong>变量<em>**</em></strong> | <strong>描述<em>**</em></strong>                               |<br>| ———- | —————————————- |<br>| DISPLAY    | 用来设置将图形显示到何处。                            |<br>| HOME       | 当前用户的主目录。                                |<br>| IFS        | 内部域分隔符。                                  |<br>| LANG       | LANG可以让系统支持多语言。例如，将LANG设为pt_BR，则可以支持(巴西)葡萄牙语。 |<br>| PATH       | 指定Shell命令的路径。                            |<br>| PWD        | 当前所在目录，即 cd 到的目录。                        |<br>| RANDOM     | 生成一个介于 0 和 32767 之间的随机数。                 |<br>| TERM       | 设置终端类型。                                  |<br>| TZ         | 时区。可以是AST(大西洋标准时间)或GMT(格林尼治标准时间)等。       |<br>| UID        | 以数字形式表示的当前用户ID，shell启动时会被初始化。            |<br>下面的例子中使用了部分环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ echo $HOME</div><div class="line">/root</div><div class="line">]$ echo $DISPLAY</div><div class="line">$ echo $TERM</div><div class="line">xterm</div><div class="line">$ echo $PATH</div><div class="line">/usr/local/bin:/bin:/usr/bin:/home/amrood/bin:/usr/local/bin</div><div class="line">$</div></pre></td></tr></table></figure></p>
<h1 id="Linux打印文件和发送邮件"><a href="#Linux打印文件和发送邮件" class="headerlink" title="Linux打印文件和发送邮件**"></a><strong>Linux打印文件和发送邮件<em>**</em></strong></h1><p>通过前面的介绍，相信你对 Linux 的命令和特性有了一个基本的认识，本节将介绍如果打印文件以及发送邮件。</p>
<h2 id="文件打印"><a href="#文件打印" class="headerlink" title="文件打印**"></a><strong>文件打印<em>**</em></strong></h2><p>如果你希望打印文本文件，最好预先处理一下，包括调整边距、设置行高、设置标题等，这样打印出来的文件更加美观，易于阅读。当然，不处理也可以打印，但是可能会比较丑陋。<br>大部分的Linux自带了 nroff 和 troff 两个强大的文本格式化工具，不过比较老旧，使用的人很少，有兴趣的读者可以可以自行学习，本教程不再进行深入讲解。</p>
<h4 id="pr命令"><a href="#pr命令" class="headerlink" title="pr命令**"></a><strong>pr命令<em>**</em></strong></h4><p><strong>pr</strong> 命令用来将文本文件转换成适合打印的格式，它可以把较大的文件分割成多个页面进行打印，并为每个页面添加标题。<br><strong>pr</strong> 命令的语法如下：<br>pr option(s) filename(s)<br><strong>pr</strong> 命令仅仅改变文件在屏幕上的显示样式和打印输出样式，并不会更改文件本身。下表是 pr 命令的几个选项：<br>| <strong>选项<em>**</em></strong>     | <strong>说明<em>**</em></strong>                   |<br>| ————– | —————————- |<br>| -k             | 分成几列打印，默认为1。                 |<br>| -d             | 两倍行距（并不是所有版本的 pr 都有效）。       |<br>| -h “header”    | 设置每个页面的标题。                   |<br>| -t             | 不打印标题和上下边距。                  |<br>| -l PAGE_LENGTH | 每页显示多少行。默认是每个页面一共66行，文本占56行。 |<br>| -o MARGIN      | 每行缩进的空格数。                    |<br>| -w PAGE_WIDTH  | 多列输出时，设置页面宽度，默认是72个字符。       |<br>例如，food 文件包含了很多食品的名字，使用 pr 命令分成两列打印，并设置每页的标题为“Restaurants”。<br>首先查看文件内容：<br>$cat food<br>Sweet Tooth<br>Bangkok Wok<br>Mandalay<br>Afghani Cuisine<br>Isle of Java<br>Big Apple Deli<br>Sushi and Sashimi<br>Tio Pepe’s Peppers<br>……..<br>$<br>然后使用 <strong>pr</strong> 命令打印：<br>$pr -2 -h “Restaurants” food<br>Nov  7  9:58 1997  Restaurants   Page 1<br>Sweet Tooth              Isle of Java<br>Bangkok Wok              Big Apple Deli<br>Mandalay                 Sushi and Sashimi<br>Afghani Cuisine          Tio Pepe’s Peppers<br>……..<br>$</p>
<h4 id="lp和lpr命令"><a href="#lp和lpr命令" class="headerlink" title="lp和lpr命令**"></a><strong>lp和lpr命令<em>**</em></strong></h4><p><strong>lp</strong> 和 <strong>lpr</strong> 命令将文件传送到打印机进行打印。使用 pr 命令将文件格式化后就可以使用这两个命令来打印。<br>打印机一般由系统管理员来设置，下面的例子使用默认的打印机打印food文件：<br>$lp food<br>request id is laserp-525  (1 file)<br>$<br>命令成功执行会返回一个表示打印任务的ID，通过这个ID可以取消打印或者查看打印状态。<br>如果你希望打印多份文件，可以使用 lp 的 -n<strong>Num</strong> 选项，或者 lpr 命令的 -<strong>Num</strong> 选项。<strong>Num</strong> 是一个数字，可以随意设置。<br>如果系统连接了多台打印机，可以使用 lp 命令的 -d<strong>printer</strong> 选项，或者 lpr 命令的 -P<strong>printer</strong> 选项来选择打印机。<strong>printer</strong> 为打印机名称。</p>
<h4 id="lpstat-和-lpq-命令"><a href="#lpstat-和-lpq-命令" class="headerlink" title="lpstat 和 lpq 命令**"></a><strong>lpstat 和 lpq 命令<em>**</em></strong></h4><p><strong>lpstat</strong> 命令可以查看打印机的缓存队列（有多少个文件等待打印），包括任务ID、所有者、文件大小、请求时间和请求状态。<br>提示：等待打印的文件会被放到打印机的的缓存队列中。<br>例如，使用 <strong>lpstat -o</strong> 命令查看打印机中所有等待打印的文件，包括你自己的：<br>$lpstat -o<br>laserp-573  john  128865  Nov 7  11:27  on laserp<br>laserp-574  grace  82744  Nov 7  11:28<br>laserp-575  john   23347  Nov 7  11:35<br>$<br>lpstat -o 命令按照打印顺序输出队列中的文件。<br><strong>lpq</strong> 命令显示的信息与 lpstat -o 稍有差异：<br>$lpq<br>laserp is ready and printing<br>Rank   Owner      Job  Files                  Total Size<br>active john       573  report.ps              128865 bytes<br>1st    grace      574  ch03.ps ch04.ps        82744 bytes<br>2nd    john       575  standard input         23347 bytes<br>$<br>第一行为打印机的状态。如果打印机无法使用或者纸被用完，将会输出其他信息。</p>
<h4 id="cancel-和-lprm-命令"><a href="#cancel-和-lprm-命令" class="headerlink" title="cancel 和 lprm 命令**"></a><strong>cancel 和 lprm 命令<em>**</em></strong></h4><p><strong>cancel</strong> 和 <strong>lprm</strong> 分别用来终止 lp 和 lpr 的打印请求。使用这两个命令，需要指定ID（由 lp 或 lpq 返回）或打印机名称。<br>例如，通过ID取消打印请求：<br>$cancel laserp-575<br>request “laserp-575” cancelled<br>$<br>如果希望取消正在打印的文件，那么可以不指定ID，仅仅指定打印机名称即可：<br>$cancel laserp<br>request “laserp-573” cancelled<br>$<br>lprm 命令用来取消当前用户的正在等待打印的文件，使用任务号作为参数可以取消指定文件，使用横线(-)作为参数可以取消所有文件。<br>例如，取消575号打印任务：<br>$lprm 575<br>dfA575diamond dequeued<br>cfA575diamond dequeued<br>$<br>lprm 会返回被取消的文件名。</p>
<h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件**"></a><strong>发送邮件<em>**</em></strong></h2><p>可以使用<strong>mail</strong>命令发送和接收邮件，语法如下：<br>$mail [-s subject] [-c cc-addr] [-b bcc-addr] to-addr<br>每个选项的含义如下：<br>| <strong>选项<em>**</em></strong> | <strong>描述<em>**</em></strong>                  |<br>| ———- | ————————— |<br>| -s         | 邮件标题。                       |<br>| -c         | 要发送的用户，多个用户以逗号(,)分隔。        |<br>| -b         | 需要密件发送（密送）的用户，多个用户以逗号(,)分隔。 |<br>例如，向admin@yahoo.com发送邮件：<br>$mail -s “Test Message” admin@yahoo.com<br>Hello everyone,<br>this is Linux tutorial and url is <a href="http://see.xidian.edu.cn/cpp/linux/" target="_blank" rel="external">http://see.xidian.edu.cn/cpp/linux/</a>.<br>Cc:<br>第一行是输入的命令，-s表示邮件的主题，后面的admin@yahoo.com则是邮件的接收人，输入完这行命令后回车，会进入邮件正文的编写，你可以输入任何文字，比如上面的两行。输入完邮件正文，需要按CTRL+D结束输入，此时会提示你输入Cc地址，即邮件抄送地址，没有直接回车就完成了邮件的发送。<br>也可以通过重定向操作符 &lt; 来发送文件：<br>$mail -s “Report 05/06/07” admin@yahoo.com &lt; demo.txt<br>通过上面的命令，就可以把demol.txt文件的内容作为邮件的内容发送给admin@yahoo.com了。<br>接收邮件不需要任何参数：<br>$mail<br>no email</p>
<h1 id="Linux管道和过滤器"><a href="#Linux管道和过滤器" class="headerlink" title="Linux管道和过滤器**"></a><strong>Linux管道和过滤器<em>**</em></strong></h1><p>有时候，我们可以把两个命令连起来使用，一个命令的输出作为另一个命令的输入，这就叫做<strong>管道</strong>。为了建立管道，需要在两个命令之间使用竖线(|)连接。<br>管道是Linux进程之间一种重要的通信机制；除了管道，还有共享内存、消息队列、信号、套接字(socket) 等进程通信机制。<br>管道使用竖线(|)将两个命令隔开，竖线左边命令的输出就会作为竖线右边命令的输入。连续使用竖线表示第一个命令的输出会作为第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，依此类推。<br>能够接受数据，过滤（处理或筛选）后再输出的工具，称为<strong>过滤器</strong>。</p>
<h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令**"></a><strong>grep命令<em>**</em></strong></h2><p>grep 是一个强大的文本搜索工具，可以使用正则表达式，并返回匹配的行，语法为：<br>$grep pattern file(s)<br>“grep”源于 ed（Linux的一个行文本编辑器）的 g/re/p 命令，g/re/p 是“globally search for a regular expression and print all lines containing it”的缩写，意思是使用正则表达式进行全局检索，并把匹配的行打印出来。<br>正则表达式是一个包含了若干特殊字符的字符串，每个字符都有特殊含义，可以用来匹配文本，更多信息请查看<a href="http://c.biancheng.net/cpp/u/zhengze/" target="_blank" rel="external">正则表达式教程</a>。<br>grep 可以看做是一个过滤器，如果没有为 grep 指定要检索的文件，那么它会从标准输入设备（一般是键盘）读取；其他过滤器也是如此。<br>grep 命令最简单的使用就是检索包含固定字符的文本。<br>例如，在管道中使用 grep 命令，只允许包含指定字符的行输出到显示器：<br>$ls -l | grep “Aug”<br>-rw-rw-rw-   1 john  doc     11008 Aug  6 14:10 ch02<br>-rw-rw-rw-   1 john  doc      8515 Aug  6 15:30 ch07<br>-rw-rw-r–   1 john  doc      2488 Aug 15 10:51 intro<br>-rw-rw-r–   1 carol doc      1605 Aug 23 07:35 macros<br>$<br>grep 命令有很多选项：<br>| <strong>选项<em>**</em></strong> | <strong>说明<em>**</em></strong>                               |<br>| ———- | —————————————- |<br>| -v         | 反转查询，输出不匹配的行。例如，grep -v “test” demo.txt 将输出不包含”test”的行。 |<br>| -n         | 输出匹配的行以及行号。                              |<br>| -l         | 输出匹配的行所在的文件名。                            |<br>| -c         | 输出匹配的总行数。                                |<br>| -i         | 不区分大小写进行匹配。                              |<br>下面我们使用正则表达式来匹配这样的行：包含字符“carol”，然后包含任意数目（含零个）的其他字符，最后还要包含“Aug”。<br>使用 -i 选项进行不区分大小写的匹配：<br>$ls -l | grep -i “carol.*aug”<br>-rw-rw-r–   1 carol doc      1605 Aug 23 07:35 macros<br>$</p>
<h2 id="sort命令"><a href="#sort命令" class="headerlink" title="sort命令**"></a><strong>sort命令<em>**</em></strong></h2><p>sort 命令在 Linux 中非常有用，它将文件中的各行按字母或数进行排序。sort命令既可以从特定的文件，也可以从stdin获取输入。<br>例如，对 foot 文件的各行进行排序：<br>$sort food<br>Afghani Cuisine<br>Bangkok Wok<br>Big Apple Deli<br>Isle of Java<br>Mandalay<br>Sushi and Sashimi<br>Sweet Tooth<br>Tio Pepe’s Peppers<br>$<br>通过下面的选项可以控制排序规则：<br>| <strong>选项<em>**</em></strong> | <strong>描述<em>**</em></strong>                              |<br>| ———- | ————————————— |<br>| -n         | 按照数字大小排序，例如，10会排在2后面；-n 选项会忽略空格或 tab缩进。 |<br>| -r         | 降序排序。sort 默认是升序排序。                      |<br>| -f         | 不区分大小写。                                 |<br>| +x         | 对第x列（从0开始）进行排序。                         |<br>下面的例子通过管道将 ls、grep 和 sort 命令连起来使用，过滤包含“Aug”的行，并按照文件大小排序：<br>$ls -l | grep “Aug” | sort +4n<br>-rw-rw-r–  1 carol doc      1605 Aug 23 07:35 macros<br>-rw-rw-r–  1 john  doc      2488 Aug 15 10:51 intro<br>-rw-rw-rw-  1 john  doc      8515 Aug  6 15:30 ch07<br>-rw-rw-rw-  1 john  doc     11008 Aug  6 14:10 ch02<br>$<br>上面的命令，对当前目录中八月份修改的文件按照大小排序；+4n 表示对第5列按照数字大小排序。</p>
<h2 id="pg和more命令"><a href="#pg和more命令" class="headerlink" title="pg和more命令**"></a><strong>pg和more命令<em>**</em></strong></h2><p>如果文件内容过多，全部显示会很乱，可以使用 <strong>pg</strong> 和 <strong>more</strong> 命令分页显示，每次只显示一屏。<br>例如，通过管道，使用more命令显示目录中的文件：<br>$ls -l | grep “Aug” | sort +4n | more<br>-rw-rw-r–  1 carol doc      1605 Aug 23 07:35 macros<br>-rw-rw-r–  1 john  doc      2488 Aug 15 10:51 intro<br>-rw-rw-rw-  1 john  doc      8515 Aug  6 15:30 ch07<br>-rw-rw-r–  1 john  doc     14827 Aug  9 12:40 ch03<br>.<br>.<br>.<br>-rw-rw-rw-  1 john  doc     16867 Aug  6 15:56 ch05<br>–More–(74%)<br>如上，一次只显示一屏文本，显示满后，停下来，并提示已显示全部内容的百分比，按空格键(space)可以查看下一屏，按 b 键可以查看上一屏。</p>
<h1 id="Linux进程管理"><a href="#Linux进程管理" class="headerlink" title="Linux进程管理**"></a><strong>Linux进程管理<em>**</em></strong></h1><p>当我们运行程序时，Linux会为程序创建一个特殊的环境，该环境包含程序运行需要的所有资源，以保证程序能够独立运行，不受其他程序的干扰。这个特殊的环境就称为进程。<br>每个 Linux 命令都与系统中的程序对应，输入命令，Linux 就会创建一个新的进程。例如使用 ls 命令遍历目录中的文件时，就创建了一个进程。<br>简而言之，进程就是程序的实例。<br>系统通过一个五位数字跟踪程序的运行状态，这个数字称为 pid 或进程ID。每个进程都拥有唯一的 pid。<br>理论上，五位数字是有限的，当数字被用完时，下一个 pid 就会重新开始，所以 pid 最终会重复。但是，两个 pid 一样的进程不能同时存在，因为Linux会使用 pid 来跟踪程序的运行状态。</p>
<h2 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程**"></a><strong>创建进程<em>**</em></strong></h2><p>有两种方式来创建进程：前台进程和后台进程。</p>
<h4 id="前台进程"><a href="#前台进程" class="headerlink" title="前台进程**"></a><strong>前台进程<em>**</em></strong></h4><p>默认情况下，用户创建的进程都是前台进程；前台进程从键盘读取数据，并把处理结果输出到显示器。<br>我们可以看到前台进程的运行过程。例如，使用 ls 命令来遍历当前目录下的文件：<br>$ls ch*.doc<br>ch01-1.doc   ch010.doc  ch02.doc    ch03-2.doc<br>ch04-1.doc   ch040.doc  ch05.doc    ch06-2.doc<br>ch01-2.doc   ch02-1.doc<br>这个程序就运行在前台，它会直接把结果输出到显示器。如果 ls 命令需要数据（实际上不需要），那么它会等待用户从键盘输入。<br>当程序运行在前台时，由于命令提示符($)还未出现，用户不能输入其他命令；即使程序需要运行很长时间，也必须等待程序运行结束才能输入其他命令。</p>
<h4 id="后台进程"><a href="#后台进程" class="headerlink" title="后台进程**"></a><strong>后台进程<em>**</em></strong></h4><p>后台进程与键盘没有必然的关系。当然，后台进程也可能会等待键盘输入。<br>后台进程的优点是不必等待程序运行结束就可以输入其他命令。<br>创建后台进程最简单的方式就是在命令的末尾加 &amp;，例如：<br>$ls ch*.doc &amp;<br>ch01-1.doc   ch010.doc  ch02.doc    ch03-2.doc<br>ch04-1.doc   ch040.doc  ch05.doc    ch06-2.doc<br>ch01-2.doc   ch02-1.doc<br>如果 ls 命令需要输入（实际上不需要），那么它会暂停，直到用户把它调到前台并从键盘输入数据才会继续运行。</p>
<h2 id="查看正在运行的进程"><a href="#查看正在运行的进程" class="headerlink" title="查看正在运行的进程**"></a><strong>查看正在运行的进程<em>**</em></strong></h2><p>可以使用 <strong>ps</strong> 命令查看进程的运行状态，包括后台进程，例如：<br>$ps<br>PID       TTY      TIME        CMD<br>18358     ttyp3    00:00:00    sh<br>18361     ttyp3    00:01:31    abiword<br>18789     ttyp3    00:00:00    ps<br>还可以结合 <strong>-f</strong> 选项查看更多信息，f 是 full 的缩写，例如：<br>$ps -f<br>UID      PID  PPID C STIME    TTY   TIME CMD<br>amrood   6738 3662 0 10:23:03 pts/6 0:00 first_one<br>amrood   6739 3662 0 10:22:54 pts/6 0:00 second_one<br>amrood   3662 3657 0 08:10:53 pts/6 0:00 -ksh<br>amrood   6892 3662 4 10:51:50 pts/6 0:00 ps -f<br>每列的含义如下：<br>| <strong>列<em>**</em></strong> | <strong>描述<em>**</em></strong>             |<br>| ——— | ———————- |<br>| UID       | 进程所属用户的ID，即哪个用户创建了该进程。 |<br>| PID       | 进程ID。                  |<br>| PPID      | 父进程ID，创建该进程的进程称为父进程。   |<br>| C         | CPU使用率。                |<br>| STIME     | 进程被创建的时间。              |<br>| TTY       | 与进程有关的终端类型。            |<br>| TIME      | 进程所使用的CPU时间。           |<br>| CMD       | 创建该进程的命令。              |<br>ps 命令还有其他一些选项：<br>| <strong>选项<em>**</em></strong> | <strong>说明<em>**</em></strong>        |<br>| ———- | —————– |<br>| -a         | 显示所有用户的所有进程。      |<br>| -x         | 显示无终端的进程。         |<br>| -u         | 显示更多信息，类似于 -f 选项。 |<br>| -e         | 显示所有进程。           |</p>
<h2 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程**"></a><strong>终止进程<em>**</em></strong></h2><p>当进程运行在前台时，可以通过 <strong>kill</strong> 命令或 Ctrl+C 组合键来结束进程。<br>如果进程运行在后台，那么首先要通过 <strong>ps</strong> 命令来获取进程ID，然后使用 <strong>kill</strong> 命令“杀死”进程，例如：<br>$ps -f<br>UID      PID  PPID C STIME    TTY   TIME CMD<br>amrood   6738 3662 0 10:23:03 pts/6 0:00 first_one<br>amrood   6739 3662 0 10:22:54 pts/6 0:00 second_one<br>amrood   3662 3657 0 08:10:53 pts/6 0:00 -ksh<br>amrood   6892 3662 4 10:51:50 pts/6 0:00 ps -f<br>$kill 6738<br>Terminated<br>如上所示，kill 命令终结了 first_one 进程。<br>如果进程忽略 kill 命令，那么可以通过 kill -9 来结束：<br>$kill -9 6738<br>Terminated</p>
<h2 id="父进程和子进程"><a href="#父进程和子进程" class="headerlink" title="父进程和子进程**"></a><strong>父进程和子进程<em>**</em></strong></h2><p>每个 Linux 进程会包含两个进程ID：当前进程ID(pid)和父进程ID(ppid)。可以暂时认为所有的进程都有父进程。<br>由用户运行的大部分命令都将 Shell 作为父进程，使用 <strong>ps -f</strong> 命令可以查看当前进程ID和父进程ID。</p>
<h2 id="僵尸进程和孤儿进程"><a href="#僵尸进程和孤儿进程" class="headerlink" title="僵尸进程和孤儿进程**"></a><strong>僵尸进程和孤儿进程<em>**</em></strong></h2><p>正常情况下，子进程被终止时会通过 SIGCHLD 信号通知父进程，父进程可以做一些清理工作或者重新启动一个新的进程。但在某些情况下，父进程会在子进程之前被终止，那么这些子进程就没有了“父亲”，被称为<strong>孤儿进程</strong>。<br>init 进程会成为所有孤儿进程的父进程。init 的 pid 为1，是Linux系统的第一个进程，也是所有进程的父进程。<br>如果一个进程被终止了，但是使用 ps 命令仍然可以查看该进程，并且状态为 Z，那么这就是一个<strong>僵尸进程</strong>。僵尸进程虽然被终止了，但是仍然存在于进程列表中。一般僵尸进程很难杀掉，你可以先杀死他们的父进程，让他们变成孤儿进程，init 进程会自动清理僵尸进程。</p>
<h2 id="常驻进程"><a href="#常驻进程" class="headerlink" title="常驻进程**"></a><strong>常驻进程<em>**</em></strong></h2><p>常驻进程一般是系统级进程，以 root 权限运行在后台，可以处理其他进程的请求。<br>常驻进程没有终端，不能访问 /dev/tty 文件，如果使用 ps -ef 查看该进程，tty 这一列会显示问号(?)。<br>更确切地说，常驻进程通常运行在后台，等待指定事件发生，例如打印进程是一个常驻进程，它会等待用户输入打印相关的命令并进行处理。</p>
<h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令**"></a><strong>top命令<em>**</em></strong></h2><p>top 命令是一个很有用的工具，它可以动态显示正在运行的进程，还可以按照指定条件对进程进行排序，与Windows的任务管理器类似。<br>top 命令可以显示进程的很多信息，包括物理内存、虚拟内存、CPU使用率、平均负载以及繁忙的进程等。例如：<br>$top<br>这里仅给出一个示意图，读者最好亲自运行一下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="linux-base/linux25807.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure> </p>
<h2 id="任务和进程"><a href="#任务和进程" class="headerlink" title="任务和进程**"></a><strong>任务和进程<em>**</em></strong></h2><p>任务(task)是最抽象的，是一个一般性的术语，指由软件完成的一个活动。一个任务既可以是一个进程，也可以是多个进程。简而言之，它指的是一系列共同达到某一目的的操作。例如，读取数据并将数据放入内存中。这个任务可以由一个进程来实现，也可以由多个进程来实现。  每个任务都有一个数字表示的任务号。<br>进程(process)常常被定义为程序的执行。可以把一个进程看成是一个独立的程序，在内存中有其完备的数据空间和代码空间。一个进程所拥有的数据和变量只属于它自己。<br><strong>jobs</strong> 命令可以用来查看系统中正在运行的任务，包括后台运行的任务。该命令可以显示任务号及其对应的进程ID。一个任务可以对应于一个或者多个进程号。<br>jobs 命令的 -l 选项可以查看当前任务包含的进程ID：<br>$jobs -l<br>[1] + 1903 running                 ls ch*.doc &amp;<br>$<br>其中，第一列表示任务号，第二列表示任务对应的进程ID，第三列表示任务的运行状态，第四列表示启动任务的命令。</p>
<h2 id="前台任务和后台任务的切换"><a href="#前台任务和后台任务的切换" class="headerlink" title="前台任务和后台任务的切换**"></a><strong>前台任务和后台任务的切换<em>**</em></strong></h2><p><strong>fg</strong> 命令可以将后台任务调到前台，语法为：<br>$fg %jobnumber<br>jobnumber 是通过 jobs 命令获取的后台任务的的序号，注意不是pid。如果后台只有一个任务，可以不指定 jobnumber。<br><strong>bg</strong> 命令可以将后台暂停的任务，调到前台继续运行，语法为：<br>$bg %jobnumber<br>jobnumber 同样是通过 jobs 命令获取的后台任务的的序号，注意不是pid。如果前台只有一个任务，可以不指定 jobnumber。<br>如果希望将当前任务转移到后台，可以先 Ctrl+z 暂停任务，再使用 bg 命令。任务转移到后台可以空出终端，继续输入其他命令。</p>
<h1 id="Linux网络通信工具"><a href="#Linux网络通信工具" class="headerlink" title="Linux网络通信工具**"></a><strong>Linux网络通信工具<em>**</em></strong></h1><p>现在是一个互联网的时代，你不可避免的要和其他用户进行远程交流，连接到远程主机。</p>
<h2 id="ping-命令"><a href="#ping-命令" class="headerlink" title="ping 命令**"></a><strong>ping 命令<em>**</em></strong></h2><p>ping 命令会向网络上的主机发送应答请求，根据响应信息可以判断远程主机是否可用。<br>ping 命令的语法：<br>$ping hostname or ip-address<br>如果网络畅通，很快就可以看到响应信息。<br>例如，检测是否可以连接到谷歌的主机：<br>$ping google.com<br>PING google.com (74.125.67.100) 56(84) bytes of data.<br>64 bytes from 74.125.67.100: icmp_seq=1 ttl=54 time=39.4 ms<br>64 bytes from 74.125.67.100: icmp_seq=2 ttl=54 time=39.9 ms<br>64 bytes from 74.125.67.100: icmp_seq=3 ttl=54 time=39.3 ms<br>64 bytes from 74.125.67.100: icmp_seq=4 ttl=54 time=39.1 ms<br>64 bytes from 74.125.67.100: icmp_seq=5 ttl=54 time=38.8 ms<br>— google.com ping statistics —<br>22 packets transmitted, 22 received, 0% packet loss, time 21017ms<br>rtt min/avg/max/mdev = 38.867/39.334/39.900/0.396 ms<br>$<br>如果主机没有响应，可以看到类似下面的信息：<br>$ping giiiiiigle.com<br>ping: unknown host giiiiigle.com<br>$</p>
<h2 id="ftp-工具"><a href="#ftp-工具" class="headerlink" title="ftp 工具**"></a><strong>ftp 工具<em>**</em></strong></h2><p>ftp 是 File Transfer Protocol 的缩写，称为文件传输协议。通过 ftp 工具，能够将文件上传到远程服务器，也可以从远程服务器下载文件。<br>ftp 工具有自己的命令（类似Linux命令），可以：<br>· 连接并登录远程主机；<br>· 查看目录，遍历目录下的文件；<br>· 上传或下载文件，包括文本文件、二进制文件等。<br>ftp 命令的用法如下：<br>$ftp hostname or ip-address<br>接下来会提示你输入用户名和密码，验证成功后会进入主目录，然后就可以使用 ftp 工具的命令进行操作了。<br>| <strong>ftp命令<em>**</em></strong>  | <strong>说明<em>**</em></strong>                               |<br>| ————– | —————————————- |<br>| put filename   | 将本地文件上传到远程主机。                            |<br>| get filename   | 将远程文件下载到本地。                              |<br>| mput file list | 将多个本地文件上传到远程主机。                          |<br>| mget file list | 将多个远程文件下载到本地。                            |<br>| prompt off     | 关闭提示。默认情况下，使用 mput 或 mget 命令会不断提示你确认文件的上传或下载。 |<br>| prompt on      | 打开提示。                                    |<br>| dir            | 列出远程主机当前目录下的所有文件。                        |<br>| cd dirname     | 改变远程主机目录。                                |<br>| lcd dirname    | 改变本地目录。                                  |<br>| quit           | 退出登录。                                    |<br>注意，所有的上传和下载都是针对本地主机和远程主机的当前目录，如果你希望上传指定目录下的文件，首先要 cd 到该目录，然后才能上传。<br>ftp 工具使用举例：<br>$ftp amrood.com<br>Connected to amrood.com.<br>220 amrood.com FTP server (Ver 4.9 Thu Sep 2 20:35:07 CDT 2009)<br>Name (amrood.com:amrood): amrood<br>331 Password required for amrood.<br>Password:<br>230 User amrood logged in.<br>ftp&gt; dir<br>200 PORT command successful.<br>150 Opening data connection for /bin/ls.<br>total 1464<br>drwxr-sr-x   3 amrood   group       1024 Mar 11 20:04 Mail<br>drwxr-sr-x   2 amrood   group       1536 Mar  3 18:07 Misc<br>drwxr-sr-x   5 amrood   group        512 Dec  7 10:59 OldStuff<br>drwxr-sr-x   2 amrood   group       1024 Mar 11 15:24 bin<br>drwxr-sr-x   5 amrood   group       3072 Mar 13 16:10 mpl<br>-rw-r–r–   1 amrood   group     209671 Mar 15 10:57 myfile.out<br>drwxr-sr-x   3 amrood   group        512 Jan  5 13:32 public<br>drwxr-sr-x   3 amrood   group        512 Feb 10 10:17 pvm3<br>226 Transfer complete.<br>ftp&gt; cd mpl<br>250 CWD command successful.<br>ftp&gt; dir<br>200 PORT command successful.<br>150 Opening data connection for /bin/ls.<br>total 7320<br>-rw-r–r–   1 amrood   group       1630 Aug  8 1994  dboard.f<br>-rw-r—–   1 amrood   group       4340 Jul 17 1994  vttest.c<br>-rwxr-xr-x   1 amrood   group     525574 Feb 15 11:52 wave_shift<br>-rw-r–r–   1 amrood   group       1648 Aug  5 1994  wide.list<br>-rwxr-xr-x   1 amrood   group       4019 Feb 14 16:26 fix.c<br>226 Transfer complete.<br>ftp&gt; get wave_shift<br>200 PORT command successful.<br>150 Opening data connection for wave_shift (525574 bytes).<br>226 Transfer complete.<br>528454 bytes received in 1.296 seconds (398.1 Kbytes/s)<br>ftp&gt; quit<br>221 Goodbye.<br>$</p>
<h2 id="telnet工具"><a href="#telnet工具" class="headerlink" title="telnet工具**"></a><strong>telnet工具<em>**</em></strong></h2><p>Telnet 工具可以让我们连接并登录到远程计算机。<br>一旦连接到了远程计算机，就可以在上面进行各种操作了，例如：<br>C:&gt;telnet amrood.com<br>Trying…<br>Connected to amrood.com.<br>Escape character is ‘^]’.<br>login: amrood<br>amrood’s Password:</p>
<hr>
<p>*                                                   <em><br>\</em>                                                   <em><br>\</em>            WELCOME TO AMROOD.COM                  <em><br>\</em>                                                   <em><br>\</em>                                                   *</p>
<hr>
<p>Last unsuccessful login: Fri Mar  3 12:01:09 IST 2009<br>Last login: Wed Mar  8 18:33:27 IST 2009 on pts/10<br>   {  do your work }<br>$ logout<br>Connection closed.<br>C:&gt;</p>
<h2 id="finger工具"><a href="#finger工具" class="headerlink" title="finger工具**"></a><strong>finger工具<em>**</em></strong></h2><p>finger 可以让我们查看本地主机或远程主机上的用户信息。有些系统为了安全会禁用 finger 命令。<br>例如，查看本机在线用户：<br>$ finger<br>Login     Name       Tty      Idle  Login Time   Office<br>amrood               pts/0          Jun 25 08:03 (62.61.164.115)<br>查看本机指定用户的信息：<br>$ finger amrood<br>Login: amrood                           Name: (null)<br>Directory: /home/amrood                 Shell: /bin/bash<br>On since Thu Jun 25 08:03 (MST) on pts/0 from 62.61.164.115<br>No mail.<br>No Plan.<br>查看远程主机上的在线用户：<br>$ finger @avtar.com<br>Login     Name       Tty      Idle  Login Time   Office<br>amrood               pts/0          Jun 25 08:03 (62.61.164.115)<br>查看远程主机上某个用户的信息：<br>$ finger amrood@avtar.com<br>Login: amrood                           Name: (null)<br>Directory: /home/amrood                 Shell: /bin/bash<br>On since Thu Jun 25 08:03 (MST) on pts/0 from 62.61.164.115<br>No mail.<br>No Plan.</p>
<h1 id="10分钟掌握Linux-vi编辑器常见命令的使用，最简单的vi编辑器教程"><a href="#10分钟掌握Linux-vi编辑器常见命令的使用，最简单的vi编辑器教程" class="headerlink" title="10分钟掌握Linux vi编辑器常见命令的使用，最简单的vi编辑器教程**"></a><strong>10分钟掌握Linux vi编辑器常见命令的使用，最简单的vi编辑器教程<em>**</em></strong></h1><p>Linux下的文本编辑器有很多种，vi 是最常用的，也是各版本Linux的标配。注意，vi 仅仅是一个文本编辑器，可以给字符着色，可以自动补全，但是不像 Windows 下的 word 有排版功能。<br>vi 是十年磨一剑的产品，虽然命令繁多，并且大多数功能都是依靠键盘输入来完成，但是一旦你熟悉后，会发现 vi 的功能和效率是其他图形界面编辑器无法比拟的。<br>Vim 是 <strong>V</strong>i <strong>im</strong>proved 的缩写，是 vi 的改进版。在Linux中，vi 被认为是事实上的标准编辑器，因为：<br>· 所有版本的 Linux 都带有 vi 编辑器；<br>· 占用资源少；<br>· 与 ed、ex 等其他编辑器相比，vi 对用户更加友好。<br>你可以使用 vi 编辑器编辑现有的文件，也可以创建一个新文件，还能以只读模式打开文本文件。</p>
<h2 id="进入-vi-编辑器"><a href="#进入-vi-编辑器" class="headerlink" title="进入 vi 编辑器**"></a><strong>进入 vi 编辑器<em>**</em></strong></h2><p>可以通过以下方式进入 vi 编辑器：<br>| <strong>命令<em>**</em></strong>     | <strong>描述<em>**</em></strong>                      |<br>| ————– | ——————————- |<br>| vi filename    | 如果filename存在，则打开；否则会创建一个新文件再打开。 |<br>| vi -R filename | 以只读模式（只能查看不能编辑）打开现有文件。          |<br>| view filename  | 以只读模式打开现有文件。                    |<br>例如，使用 vi 编辑器创建一个新文件并打开：<br>$vi testfile<br>|<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>“testfile” [New File]<br>竖线(|)代表光标的位置；波浪号(~)代表该行没有任何内容。如果没有 ~，也看不到任何内容，那说明这一行肯定是有空白字符（空格、tab 缩进、换行符等）或不可见字符。</p>
<h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式**"></a><strong>工作模式<em>**</em></strong></h2><p>进一步了解 vi 之前先来了解一下 vi 的工作模式，vi 有三种工作模式：</p>
<h4 id="1-普通模式"><a href="#1-普通模式" class="headerlink" title="1) 普通模式**"></a><strong>1) 普通模式<em>**</em></strong></h4><p>由Shell进入vi编辑器时，首先进入普通模式。在普通模式下，从键盘输入任何字符都被当作命令来解释。普通模式下没有任何提示符，输入命令后立即执行，不需要回车，而且输入的字符不会在屏幕上显示出来。<br>普通模式下可以执行命令、保存文件、移动光标、粘贴复制等。</p>
<h4 id="2-编辑模式"><a href="#2-编辑模式" class="headerlink" title="2) 编辑模式**"></a><strong>2) 编辑模式<em>**</em></strong></h4><p>编辑模式主要用于文本的编辑。该模式下用户输入的任何字符都被作为文件的内容保存起来，并在屏幕上显示出来。</p>
<h4 id="3-命令模式"><a href="#3-命令模式" class="headerlink" title="3) 命令模式**"></a><strong>3) 命令模式<em>**</em></strong></h4><p>命令模式下，用户可以对文件进行一些高级处理。尽管普通模式下的命令可以完成很多功能，但要执行一些如字符串查找、替换、显示行号等操作还是必须要进入命令模式。<br>注意：有些教程中称有两种工作模式，是把命令模式合并到普通模式。<br>工作模式切换：<br>· 在普通模式下输入 i(插入)、c(修改)、o(另起一行) 命令时进入编辑模式；按 esc 键退回到普通模式。<br>· 在普通模式下输入冒号(:)可以进入命令模式。输入完命令按回车，命令执行完后会自动退回普通模式。<br>提示：如果不确定当前处于哪种模式，按两次 Esc 键将回到普通模式。</p>
<h2 id="退出-vi-编辑器"><a href="#退出-vi-编辑器" class="headerlink" title="退出 vi 编辑器**"></a><strong>退出 vi 编辑器<em>**</em></strong></h2><p>一般在命令模式下退出 vi 编辑器。<br>| <strong>退出命令<em>**</em></strong> | <strong>说明<em>**</em></strong>                     |<br>| ———— | —————————— |<br>| q            | 如果文件未被修改，会直接退回到Shell；否则提示保存文件。 |<br>| q!           | 强行退出，不保存修改内容。                  |<br>| wq           | w 命令保存文件，q 命令退出 vi，合起来就是保存并退出。 |<br>| ZZ           | 保存并退出，相当于 wq，但是更加方便。           |<br>退出之前，你也可以在 w 命令后面指定一个文件名，将文件另存为新文件，例如：<br>w filename2<br>将当前文件另存为 filename2。<br>注意：vi 编辑文件时，用户的操作都是基于缓冲区中的副本进行的。如果退出时没有保存到磁盘，则缓冲区中的内容就会被丢失。</p>
<h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标**"></a><strong>移动光标<em>**</em></strong></h2><p>为了不影响文件内容，必须在普通模式（按两次 Esc 键）下移动光标。使用下表中的命令每次可以移动一个字符：<br>| <strong>命令<em>**</em></strong> | <strong>描述<em>**</em></strong>     |<br>| ———- | ————– |<br>| k          | 向上移动光标（移动一行）   |<br>| j          | 向下移动光标（移动一行）   |<br>| h          | 向左移动光标（移动一个字符） |<br>| l          | 向右移动光标（移动一个字符） |<br>两点提醒：<br>· vi 是区分大小写的，输入命令时注意不要锁定大写。<br>· 可以在命令前边添加一个数字作为前缀，例如，2j 将光标向下移动两行。<br>当然，还有很多其他命令来移动光标，不过记住，一定要在普通模式（按两次 Esc 键）下。<br>| 用来移动光标的命令  |                                |<br>| ———- | —————————— |<br>| <strong>命令<em>**</em></strong> | <strong>说明<em>**</em></strong>                     |<br>| 0 或 |     | 将光标定位在一行的开头。                   |<br>| $          | 将光标定位在一行的末尾。                   |<br>| w          | 定位到下一个单词。                      |<br>| b          | 定位到上一个单词。                      |<br>| (          | 定位到一句话的开头，句子是以 ! . ? 三种符号来界定的。 |<br>| )          | 定位到一句话的结尾。                     |<br>| {          | 移动到段落开头。&amp;&amp;&amp;&amp;&amp;&amp;                 |<br>| }          | 移动到段落结束。&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;              |<br>| [[         | 回到段落的开头处。&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;            |<br>| ]]         | 向前移到下一个段落的开头处。&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;       |<br>| n|        | 移动到第 n 列（当前行）。                 |<br>| 1G         | 移动到文件第一行。                      |<br>| G          | 移动到文件最后一行。                     |<br>| nG         | 移动到文件第 n 行。                    |<br>| :n         | 移动到文件第 n 行。                    |<br>| H          | 移动到屏幕顶部。                       |<br>| nH         | 移动到距离屏幕顶部第 n 行的位置。             |<br>| M          | 移动到屏幕中间。                       |<br>| L          | 移动到屏幕底部。                       |<br>| nL         | 移动到距离屏幕底部第 n 行的位置。             |<br>| :x         | x 是一个数字，表示移动到行号为 x 的行。         |</p>
<h2 id="控制命令"><a href="#控制命令" class="headerlink" title="控制命令**"></a><strong>控制命令<em>**</em></strong></h2><p>有一些控制命令可以与 Ctrl 键组合使用，如下：<br>| <strong>命令<em>**</em></strong> | <strong>描述<em>**</em></strong> |<br>| ———- | ———- |<br>| CTRL+d     | 向前滚动半屏     |<br>| CTRL+f     | 向前滚动全屏     |<br>| CTRL+u     | 向后滚动半屏     |<br>| CTRL+b     | 向后滚动整屏     |<br>| CTRL+e     | 向上滚动一行     |<br>| CTRL+y     | 向下滚动一行     |<br>| CTRL+I     | 刷新屏幕       |</p>
<h2 id="编辑文件-1"><a href="#编辑文件-1" class="headerlink" title="编辑文件**"></a><strong>编辑文件<em>**</em></strong></h2><p>切换到编辑模式下才能编辑文件。有很多命令可以从普通模式切换到编辑模式，如下所示：<br>| <strong>命令<em>**</em></strong> | <strong>描述<em>**</em></strong>    |<br>| ———- | ————- |<br>| i          | 在当前光标位置之前插入文本 |<br>| I          | 在当前行的开头插入文本   |<br>| a          | 在当前光标位置之后插入文本 |<br>| A          | 在当前行的末尾插入文本   |<br>| o          | 在当前位置下面创建一行   |<br>| O          | 在当前位置上面创建一行   |</p>
<h2 id="删除字符"><a href="#删除字符" class="headerlink" title="删除字符**"></a><strong>删除字符<em>**</em></strong></h2><p>下面的命令，可以删除文件中的字符或行：<br>| <strong>命令<em>**</em></strong> | <strong>说明<em>**</em></strong>      |<br>| ———- | ————— |<br>| x          | 删除当前光标下的字符      |<br>| X          | 删除光标前面的字符       |<br>| dw         | 删除从当前光标到单词结尾的字符 |<br>| d^         | 删除从当前光标到行首的字符   |<br>| d$         | 删除从当前光标到行尾的字符   |<br>| D          | 删除从当前光标到行尾的字符   |<br>| dd         | 删除当前光标所在的行      |<br>可以在命令前面添加一个数字前缀，表示重复操作的次数，例如，2x  表示连续两次删除光标下的字符，2dd 表示连续两次删除光标所在的行。<br>建议各位读者多加练习上面的命令，再进一步深入学习。</p>
<h2 id="修改文本"><a href="#修改文本" class="headerlink" title="修改文本**"></a><strong>修改文本<em>**</em></strong></h2><p>如果你希望对字符、单词或行进行修改，可以使用下面的命令：<br>| <strong>命令<em>**</em></strong> | <strong>描述<em>**</em></strong>             |<br>| ———- | ———————- |<br>| cc         | 删除当前行，并进入编辑模式。         |<br>| cw         | 删除当前字（单词），并进入编辑模式。     |<br>| r          | 替换当前光标下的字符。            |<br>| R          | 从当前光标开始替换字符，按 Esc 键退出。 |<br>| s          | 用输入的字符替换当前字符，并进入编辑模式。  |<br>| S          | 用输入的文本替换当前行，并进入编辑模式。   |</p>
<h2 id="粘贴复制"><a href="#粘贴复制" class="headerlink" title="粘贴复制**"></a><strong>粘贴复制<em>**</em></strong></h2><p>vi 中的复制粘贴命令：<br>| <strong>命令<em>**</em></strong> | <strong>描述<em>**</em></strong>    |<br>| ———- | ————- |<br>| yy         | 复制当前行         |<br>| nyy        | 复制n行          |<br>| yw         | 复制一个字（单词）     |<br>| nyw        | 复制n行          |<br>| p          | 将复制的文本粘贴到光标后面 |<br>| P          | 将复制的文本粘贴到光标前面 |</p>
<h2 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令**"></a><strong>高级命令<em>**</em></strong></h2><p>下面的一些命令虽然看起来有些古怪，但是会让你的工作更有效率，如果你是 vi 重度用户，就了解一下吧。<br>| <strong>命令<em>**</em></strong>  | <strong>说明<em>**</em></strong>                         |<br>| ———– | ———————————- |<br>| J           | 将当前行和下一行连接为一行                      |<br>| &lt;&lt;          | 将当前行左移一个单位（一个缩进宽度）                 |<br>| &gt;&gt;          | 将当前行右移一个单位（一个缩进宽度）                 |<br>| ~           | 改变当前字符的大小写                         |<br>| ^G          | Ctrl+G组合键可以显示当前文件名和状态              |<br>| U           | 撤销对当前行所做的修改                        |<br>| u           | 撤销上次操作，再次按 ‘u’ 恢复该次操作              |<br>| :f          | 以百分号(%)的形式显示当前光标在文件中的位置、文件名和文件的总行数 |<br>| :f filename | 将文件重命名为 filename                   |<br>| :w filename | 保存修改到 filename                     |<br>| :e filename | 打开另一个文件名为 filename 的文件             |<br>| :cd dirname | 改变当前工作目录到 dirname                  |<br>| :e #        | 在两个打开的文件之间进行切换                     |<br>| :n          | 如果用 vi 打开了多个文件，可以使用 :n 切换到下一个文件    |<br>| :p          | 如果用 vi 打开了多个文件，可以使用 :n 切换到上一个文件    |<br>| :N          | 如果用 vi 打开了多个文件，可以使用 :n 切换到上一个文件    |<br>| :r file     | 读取文件并在当前行的后边插入                     |<br>| :nr file    | 读取文件并在第 n 行后边插入                    |</p>
<h2 id="文本查找"><a href="#文本查找" class="headerlink" title="文本查找**"></a><strong>文本查找<em>**</em></strong></h2><p>如果希望进行全文件搜索，可以在普通模式（按两次 Esc 键）下输入 / 命令，这时状态栏（最后一行）出现”/“并提示输入要查找的字符串，回车即可。<br>/ 命令是向下查找，如果希望向上查找，可以使用 ? 命令。<br>这时，输入 n 命令可以按相同的方向继续查找，输入 N 命令可以按相反的方向继续查找。<br>搜索的字符串中可以包含一些有特殊含义的字符，如果希望搜索这些字符本身，需要在前面加反斜杠()。<br>| 部分特殊字符列表   |            |<br>| ———- | ———- |<br>| <strong>字符<em>**</em></strong> | <strong>说明<em>**</em></strong> |<br>| ^          | 匹配一行的开头    |<br>| .          | 匹配一个字符     |<br>| *          | 匹配0个或多个字符  |<br>| $          | 匹配一行的结尾    |<br>| [ ]        | 匹配一组字符     |<br>如果希望搜索某行中的单个字符，可以使用 f 或 F 命令，f 向上搜索，F 向下搜索，并且会把光标定位到匹配的字符。<br>也可以使用 t 或 T 命令：t 命令向上搜索，并把光标定位到匹配字符的前面；T 命令向下搜索，并把光标定位到匹配字符的后面。</p>
<h2 id="set-命令"><a href="#set-命令" class="headerlink" title="set 命令**"></a><strong>set 命令<em>**</em></strong></h2><p>set 命令可以对 vi 编辑器进行一些设置。使用 set 命令需要进入命令模式。<br>| :set 命令选项  |                                      |<br>| ———- | ———————————— |<br>| <strong>命令<em>**</em></strong> | <strong>说明<em>**</em></strong>                           |<br>| :set ic    | 搜索时忽略大小写。                            |<br>| :set ai    | 设置自动缩进（自动对齐）。                        |<br>| :set noai  | 取消自动缩进（自动对齐）。                        |<br>| :set nu    | 显示行号。                                |<br>| :set sw    | 设置缩进的空格数，例如，将缩进空格数设置为4：:set sw=4。    |<br>| :set ws    | 循环搜索：如果直到文件末尾也没有查找到指定字符，那么会回到开头继续查找。 |<br>| :set wm    | 设置自动换行，例如，设置距离边际2个字符时换行：:set wm=2 。  |<br>| :set ro    | 将文件类型改为只读。                           |<br>| :set term  | 输出终端类型。                              |<br>| :set bf    | 忽略输入的控制字符，如 BEL(响铃)、BS(退格)、CR(回车)等。  |</p>
<h2 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令**"></a><strong>运行命令<em>**</em></strong></h2><p>切换到命令模式，再输入 ! 命令即可运行 Linux 命令。<br>例如，保存文件前，如果希望查看该文件是否存在，那么输入<br>:! ls<br>即可列出当前目录下的文件。<br>按任意键回到 vi 编辑器。</p>
<h2 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换**"></a><strong>文本替换<em>**</em></strong></h2><p>切换到命令模式，再输入 s/ 命令即可对文本进行替换。语法为：<br>:s/search/replace/g<br>search 为检索的文本，replace 为要替换的文本，g 表示全局替换。</p>
<h2 id="几点提示"><a href="#几点提示" class="headerlink" title="几点提示**"></a><strong>几点提示<em>**</em></strong></h2><p>vi 编辑器的使用讲解完毕，但是请记住下面几点：<br>· 输入冒号(:)进入命令模式，按两次 Esc 键进入普通模式。<br>· 命令大小写的含义是不一样的。<br>· 必须在编辑模式下才能输入内容。</p>
<h1 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统**"></a><strong>Linux文件系统<em>**</em></strong></h1><p>文件系统就是分区或磁盘上的所有文件的逻辑集合。<br>文件系统不仅包含着文件中的数据而且还有文件系统的结构，所有Linux 用户和程序看到的文件、目录、软连接及文件保护信息等都存储在其中。<br>不同Linux发行版本之间的文件系统差别很少，主要表现在系统管理的特色工具以及软件包管理方式的不同，文件目录结构基本上都是一样的。<br>文件系统有多种类型，如：<br>· ext2 ： 早期linux中常用的文件系统；<br>· ext3 ： ext2的升级版，带日志功能；<br>· RAMFS ： 内存文件系统，速度很快；<br>· iso9660：光盘或光盘镜像；<br>· NFS ： 网络文件系统，由SUN发明，主要用于远程文件共享；<br>· MS-DOS ： MS-DOS文件系统；<br>· FAT ： Windows XP 操作系统采用的文件系统；<br>· NTFS ： Windows NT/XP 操作系统采用的文件系统。</p>
<h2 id="分区与目录"><a href="#分区与目录" class="headerlink" title="分区与目录**"></a><strong>分区与目录<em>**</em></strong></h2><p>文件系统位于磁盘分区中；一个硬盘可以有多个分区，也可以只有一个分区；一个分区只能包含一个文件系统。<br>Linux文件系统与Windows有较大的差别。Windows的文件结构是多个并列的树状结构，最顶部的是不同的磁盘（分区），如 C、D、E、F等。<br>Linux的文件结构是单个的树状结构，根目录是“/”，其他目录都要位于根目录下。<br>每次安装系统的时候我们都会进行分区，Linux下磁盘分区和目录的关系如下：<br>· 任何一个分区都必须对应到某个目录上，才能进行读写操作，称为“挂载”。<br>· 被挂载的目录可以是根目录，也可以是其他二级、三级目录，任何目录都可以是挂载点。<br>· 目录是逻辑上的区分。分区是物理上的区分。<br>· 根目录是所有Linux的文件和目录所在的地方，需要挂载上一个磁盘分区。<br>下图是常见的目录和分区的对应关系：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="linux-base/linux36302.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure><br>为什么要分区，如何分区？<br>· 可以把不同资料，分别放入不同分区中管理，降低风险。<br>· 大硬盘搜索范围大，效率低。<br>· /home、/var、/usr/local 经常是单独分区，因为经常会操作，容易产生碎片。<br>为了便于定位和查找，Linux中的每个目录一般都存放特定类型的文件，下表列出了各种Linux发行版本的常见目录：<br>| <strong>目录<em>**</em></strong> | <strong>说明<em>**</em></strong>                               |<br>| ———- | —————————————- |<br>| /          | 根目录，只能包含目录，不能包含具体文件。                     |<br>| /bin       | 存放可执行文件。很多命令就对应/bin目录下的某个程序，例如 ls、cp、mkdir。/bin目录对所有用户有效。 |<br>| /dev       | 硬件驱动程序。例如声卡、磁盘驱动等，还有如 /dev/null、/dev/console、/dev/zero、/dev/full 等文件。 |<br>| /etc       | 主要包含系统配置文件和用户、用户组配置文件。                   |<br>| /lib       | 主要包含共享库文件，类似于Windows下的DLL；有时也会包含内核相关文件。  |<br>| /boot      | 系统启动文件，例如Linux内核、引导程序等。                  |<br>| /home      | 用户工作目录（主目录），每个用户都会分配一个目录。                |<br>| /mnt       | 临时挂载文件系统。这个目录一般是用于存放挂载储存设备的挂载目录的，例如挂载CD-ROM的cdrom目录。 |<br>| /proc      | 操作系统运行时，进程（正在运行中的程序）信息及内核信息（比如cpu、硬盘分区、内存信息等）存放在这里。/proc目录伪装的文件系统proc的挂载目录，proc并不是真正的文件系统。 |<br>| /tmp       | 临时文件目录，系统重启后不会被保存。                       |<br>| /usr       | /user目下的文件比较混杂，包含了管理命令、共享文件、库文件等，可以被很多用户使用。 |<br>| /var       | 主要包含一些可变长度的文件，会经常对数据进行读写，例如日志文件和打印队列里的文件。 |<br>| /sbin      | 和 /bin 类似，主要包含可执行文件，不过一般是系统管理所需要的，不是所有用户都需要。 |</p>
<h2 id="常用文件管理命令"><a href="#常用文件管理命令" class="headerlink" title="常用文件管理命令**"></a><strong>常用文件管理命令<em>**</em></strong></h2><p>你可以通过下面的命令来管理文件：<br>| <strong>Command<em>**</em></strong>   | <strong>Description<em>**</em></strong>          |<br>| —————– | —————————- |<br>| cat filename      | 查看文件内容。                      |<br>| cd dirname        | 改变所在目录。                      |<br>| cp file1 file2    | 复制文件或目录。                     |<br>| file filename     | 查看文件类型(binary, text, etc)。   |<br>| find filename dir | 搜索文件或目录。                     |<br>| head filename     | 显示文件的开头，与tail命令相对。           |<br>| less filename     | 查看文件的全部内容，可以分页显示，比more命令要强大。 |<br>| ls dirname        | 遍历目录下的文件或目录。                 |<br>| mkdir dirname     | 创建目录。                        |<br>| more filename     | 查看文件的全部内容，可以分页显示。            |<br>| mv file1 file2    | 移动文件或重命名。                    |<br>| pwd               | 显示用户当前所在目录。                  |<br>| rm filename       | 删除文件。                        |<br>| rmdir dirname     | 删除目录。                        |<br>| tail filename     | 显示文件的结尾，与head命令相对。           |<br>| touch filename    | 文件不存在时创建一个空文件，存在时修改文件时间戳。    |<br>| whereis filename  | 查看文件所在位置。                    |<br>| which filename    | 如果文件在环境变量PATH中有定义，那么显示文件位置。  |</p>
<h4 id="df命令"><a href="#df命令" class="headerlink" title="df命令**"></a><strong>df命令<em>**</em></strong></h4><p>管理磁盘分区时经常会使用 <strong>df</strong> (disk free) 命令，df -k 命令可以用来查看磁盘空间的使用情况（以千字节计），例如：<br>$df -k<br>Filesystem      1K-blocks      Used   Available Use% Mounted on<br>/dev/vzfs        10485760   7836644     2649116  75% /<br>/devices                0         0           0   0% /devices<br>$<br>每一列的含义如下：<br>| <strong>列<em>**</em></strong>  | <strong>说明<em>**</em></strong>                    |<br>| ———- | —————————– |<br>| Filesystem | 代表文件系统对应的设备文件的路径名（一般是硬盘上的分区）。 |<br>| kbytes     | 分区包含的数据块（1024字节）的数目。          |<br>| used       | 已用空间。                         |<br>| avail      | 可用空间。                         |<br>| capacity   | 已用空间的百分比。                     |<br>| Mounted on | 文件系统挂载点。                      |<br>某些目录（例如 /devices）的 kbytes、used、avail 列为0，use列为0%，这些都是特殊（或虚拟）文件系统，即使位于根目录下，也不占用硬盘空间。<br>你可以结合 -h (human readable) 选项将输出信息格式化，让人更易阅读。 </p>
<h4 id="du-命令"><a href="#du-命令" class="headerlink" title="du 命令**"></a><strong>du 命令<em>**</em></strong></h4><p>du (disk usage) 命令可以用来查看特定目录的空间使用情况。<br>du 命令会显示每个目录所占用数据块。根据系统的不同，一个数据块可能是 512 字节或 1024 字节。举例如下：<br>$du /etc<br>10     /etc/cron.d<br>126    /etc/default<br>6      /etc/dfs<br>…<br>$<br>结合 -h 选项可以让信息显示的更加清晰：<br>$du -h /etc<br>5k    /etc/cron.d<br>63k   /etc/default<br>3k    /etc/dfs<br>…<br>$</p>
<h2 id="挂载文件系统"><a href="#挂载文件系统" class="headerlink" title="挂载文件系统**"></a><strong>挂载文件系统<em>**</em></strong></h2><p>挂载是指将一个硬件设备（例如硬盘、U盘、光盘等）对应到一个已存在的目录上。 若要访问设备中的文件，必须将文件挂载到一个已存在的目录上， 然后通过访问这个目录来访问存储设备。<br>这样就为用户提供了统一的接口，屏蔽了硬件设备的细节。Linux将所有的硬件设备看做文件，对硬件设备的操作等同于对文件的操作。<br>注意：挂载目录可以不为空，但挂载后这个目录下以前的内容将不可用。<br>需要知道的是，光盘、软盘、其他操作系统使用的文件系统的格式与linux使用的文件系统格式是不一样的，挂载需要确认Linux是否支持所要挂载的文件系统格式。<br>查看当前系统所挂载的硬件设备可以使用 mount 命令：<br>$ mount<br>/dev/vzfs on / type reiserfs (rw,usrquota,grpquota)<br>proc on /proc type proc (rw,nodiratime)<br>devpts on /dev/pts type devpts (rw)<br>$<br>一般约定，/mnt 为临时挂载目录，例如挂载CD-ROM、远程网络设备、软盘等。<br>也可以通过mount命令来挂载文件系统，语法为：<br>mount -t file_system_type device_to_mount directory_to_mount_to<br>例如：<br>$ mount -t iso9660 /dev/cdrom /mnt/cdrom<br>将 CD-ROM 挂载到 /mnt/cdrom 目录。<br>注意：file_system_type用来指定文件系统类型，通常可以不指定，Linux会自动正确选择文件系统类型。<br>挂载文件系统后，就可以通过 cd、cat 等命令来操作对应文件。<br>可以通过 umount 命令来卸载文件系统。例如，卸载 cdrom：<br>$ umount /dev/cdrom<br>不过，大部分现代的Linux系统都有自动挂载卸载功能，unmount 命令较少用到。</p>
<h2 id="用户和群组配额"><a href="#用户和群组配额" class="headerlink" title="用户和群组配额**"></a><strong>用户和群组配额<em>**</em></strong></h2><p>用户和群组配额可以让管理员为每个用户或群组分配固定的磁盘空间。<br>管理员有两种方式来分配磁盘空间：<br>· 软限制：如果用户超过指定的空间，会有一个宽限期，等待用户释放空间。<br>· 硬限制：没有宽限期，超出指定空间立即禁止操作。<br>下面的命令可以用来管理配额：<br>| <strong>命令<em>**</em></strong> | <strong>说明<em>**</em></strong>                  |<br>| ———- | ————————— |<br>| quota      | 显示磁盘使用情况以及每个用户组的配额。         |<br>| edquota    | 编辑用户和群组的配额。                 |<br>| quotacheck | 查看文件系统的磁盘使用情况，创建、检查并修复配额文件。 |<br>| setquota   | 设置配额。                       |<br>| quotaon    | 开启用户或群组的配额功能。               |<br>| quotaoff   | 关闭用户或群组的配额功能。               |<br>| repquota   | 打印指定文件系统的配额。                |</p>
<h1 id="Linux文件存储结构，包括目录项、inode、数据块"><a href="#Linux文件存储结构，包括目录项、inode、数据块" class="headerlink" title="Linux文件存储结构，包括目录项、inode、数据块**"></a><strong>Linux文件存储结构，包括目录项、inode、数据块<em>**</em></strong></h1><p>大部分的Linux文件系统（如ext2、ext3）规定，一个文件由目录项、inode和数据块组成：<br>· 目录项：包括文件名和inode节点号。<br>· Inode：又称文件索引节点，包含文件的基础信息以及数据块的指针。<br>· 数据块：包含文件的具体内容。</p>
<h2 id="先说inode"><a href="#先说inode" class="headerlink" title="先说inode**"></a><strong>先说inode<em>**</em></strong></h2><p>理解inode，要从文件储存说起。文件储存在硬盘上，硬盘的最小存储单位叫做”扇区”（Sector），每个扇区储存512字节（相当于0.5KB）。<br>操作系统读取硬盘的时候，不会一个扇区一个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个”块”（block）。这种由多个扇区组成的”块”，是文件存取的最小单位。”块”的大小，最常见的是4KB，即连续八个 sector组成一个 block。<br>文件数据都储存在”块”中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为”索引节点”。<br>inode包含文件的元信息，具体来说有以下内容：<br>· 文件的字节数。<br>· 文件拥有者的User ID。<br>· 文件的Group ID。<br>· 文件的读、写、执行权限。<br>· 文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。<br>· 链接数，即有多少文件名指向这个inode。<br>· 文件数据block的位置。<br>可以用stat命令，查看某个文件的inode信息：<br>stat demo.txt<br>总之，除了文件名以外的所有文件信息，都存在inode之中。至于为什么没有文件名，下文会有详细解释。<br>当查看某个文件时，会先从inode表中查出文件属性及数据存放点，再从数据块中读取数据。<br>请看文件存储结构示意图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="linux-base/linux36302.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure> </p>
<h4 id="inode的大小"><a href="#inode的大小" class="headerlink" title="inode的大小**"></a><strong>inode的大小<em>**</em></strong></h4><p>inode也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。<br>每个inode节点的大小，一般是128字节或256字节。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，每个inode节点的大小为128字节，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。<br>查看每个硬盘分区的inode总数和已经使用的数量，可以使用df -i 命令。<br>查看每个inode节点的大小，可以用如下命令：<br>sudo dumpe2fs -h /dev/hda | grep “Inode size”<br>由于每个文件都必须有一个inode，因此有可能发生inode已经用光，但是硬盘还未存满的情况。这时，就无法在硬盘上创建新文件。</p>
<h4 id="inode号码"><a href="#inode号码" class="headerlink" title="inode号码**"></a><strong>inode号码<em>**</em></strong></h4><p>每个inode都有一个号码，操作系统用inode号码来识别不同的文件。<br>这里值得重复一遍，Linux系统内部不使用文件名，而使用inode号码来识别文件。对于系统来说，文件名只是inode号码便于识别的别称或者绰号。表面上，用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：首先，系统找到这个文件名对应的inode号码；其次，通过inode号码，获取inode信息；最后，根据inode信息，找到文件数据所在的block，读出数据。<br>使用ls -i命令，可以看到文件名对应的inode号码，例如：<br>ls -i demo.txt</p>
<h2 id="目录项"><a href="#目录项" class="headerlink" title="目录项**"></a><strong>目录项<em>**</em></strong></h2><p>Linux系统中，目录（directory）也是一种文件。打开目录，实际上就是打开目录文件。<br>目录文件的结构非常简单，就是一系列目录项（dirent）的列表。每个目录项，由两部分组成：所包含文件的文件名，以及该文件名对应的inode号码。<br>ls命令只列出目录文件中的所有文件名：<br>ls /etc<br>ls -i命令列出整个目录文件，即文件名和inode号码：<br>ls -i /etc<br>如果要查看文件的详细信息，就必须根据inode号码，访问inode节点，读取信息。ls -l命令列出文件的详细信息。<br>ls -l /etc</p>
<h2 id="硬链接和软链接"><a href="#硬链接和软链接" class="headerlink" title="硬链接和软链接**"></a><strong>硬链接和软链接<em>**</em></strong></h2><h4 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接**"></a><strong>硬链接<em>**</em></strong></h4><p>一般情况下，文件名和inode号码是”一一对应”关系，每个inode号码对应一个文件名。但是，Linux系统允许，多个文件名指向同一个inode号码。这意味着，可以用不同的文件名访问同样的内容；对文件内容进行修改，会影响到所有文件名；但是，删除一个文件名，不影响另一个文件名的访问。这种情况就被称为”硬链接”（hard link）。<br>ln命令可以创建硬链接，语法为：<br>ln source_file target_file<br>运行上面这条命令以后，源文件与目标文件的inode号码相同，都指向同一个inode。inode信息中有一项叫做”链接数”，记录指向该inode的文件名总数，这时就会增加1。反过来，删除一个文件名，就会使得inode节点中的”链接数”减1。当这个值减到0，表明没有文件名指向这个inode，系统就会回收这个inode号码，以及其所对应block区域。<br>这里顺便说一下目录文件的”链接数”。创建目录时，默认会生成两个目录项：”.”和”..”。前者的inode号码就是当前目录的inode号码，等同于当前目录的”硬链接”；后者的inode号码就是当前目录的父目录的inode号码，等同于父目录的”硬链接”。所以，任何一个目录的”硬链接”总数，总是等于2加上它的子目录总数（含隐藏目录）,这里的2是父目录对其的“硬链接”和当前目录下的”.硬链接“。</p>
<h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接**"></a><strong>软链接<em>**</em></strong></h4><p>除了硬链接以外，还有一种特殊情况。文件A和文件B的inode号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的”软链接”（soft link）或者”符号链接（symbolic link）。<br>这意味着，文件A依赖于文件B而存在，如果删除了文件B，打开文件A就会报错：”No such file or directory”。这是软链接与硬链接最大的不同：文件A指向文件B的文件名，而不是文件B的inode号码，文件B的inode”链接数”不会因此发生变化。<br>ln -s命令可以创建软链接，语法为：<br>ln source_file target_file</p>
<h1 id="Linux用户管理"><a href="#Linux用户管理" class="headerlink" title="Linux用户管理**"></a><strong>Linux用户管理<em>**</em></strong></h1><p>在Linux中，有三种用户：<br>· Root 用户：也称为超级用户，对系统拥有完全的控制权限。超级用户可以不受限制的运行任何命令。Root 用户可以看做是系统管理员。<br>· 系统用户：系统用户是Linux运行某些程序所必须的用户，例如 mail 用户、sshd 用户等。系统用户通常为系统功能所必须的，不建议修改这些用户。<br>· 普通用户：一般用户都是普通用户，这些用户对系统文件的访问受限，不能执行全部Linux命令。<br>Linux支持用户组，用户组就是具有相同特征的用户的集合。一个组可以包含多个用户，每个用户也可以属于不同的组。用户组在Linux中扮演着重要的角色，方便管理员对用户进行集中管理。</p>
<h2 id="与用户和组有关的系统文件"><a href="#与用户和组有关的系统文件" class="headerlink" title="与用户和组有关的系统文件**"></a><strong>与用户和组有关的系统文件<em>**</em></strong></h2><p>与用户和组有关的系统文件：<br>| <strong>系统文件<em>**</em></strong> | <strong>说明<em>**</em></strong>                               |<br>| ———— | —————————————- |<br>| /etc/passwd  | 保存用户名和密码等信息，Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行。这个文件对所有用户都是可读的。 |<br>| /etc/shadow  | /etc/shadow中的记录行和/etc/passwd中的相对应，他由pwconv命令根据/etc/passwd中的数据自动产生，它的格式和/etc/passwd类似，只是对密码进行了加密。并不是所有的系统都支持这个文件。 |<br>| /etc/group   | 以记录行的形式保存了用户组的所有信息。                      |<br>来看一下/etc/passwd文件的结构：<br>$cat /etc/passwd<br>root:x:0:0:Superuser:/:<br>daemon:x:1:1:System daemons:/etc:<br>bin:x:2:2:Owner of system commands:/bin:<br>sys:x:3:3:Owner of system files:/usr/sys:<br>adm:x:4:4:System accounting:/usr/adm:<br>uucp:x:5:5:UUCP administrator:/usr/lib/uucp:<br>auth:x:7:21:Authentication administrator:/tcb/files/auth:<br>cron:x:9:16:Cron daemon:/usr/spool/cron:<br>listen:x:37:4:Network daemon:/usr/net/nls:<br>lp:x:71:18:printer administrator:/usr/spool/lp:<br>sam:x:200:50:Sam san:/usr/sam:/bin/sh<br>可以看到，/etc/passwd文件中一行记录对应着一个用户，每行记录又被冒号分隔为7个字段，其格式和具体含义如下图所示：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="linux-base/linux43471.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure><br>对每个字段的说明：<br>| <strong>字段<em>**</em></strong> | <strong>说明<em>**</em></strong>                               |<br>| ———- | —————————————- |<br>| 用户名        | 用户名是惟一的，长度根据不同的linux系统而定，一般是8位。          |<br>| 密码         | 由于系统中还有一个/etc/shadow文件用于存放加密后的口令，所以在这里这一项是“x”来表示，如果用户没有设置口令，则该项为空。如果passwd字段中的第一个字符是“*”的话，那么，就表示该账号被查封了，系统不允许持有该账号的用户登录。 |<br>| 用户ID       | 系统内部根据用户ID而不是用户名来识别不同的用户，用户ID有以下几种：· 0代表系统管理员，如果你想建立一个系统管理员的话，可以建立一个普通帐户，然后将该账户的用户ID改为0即可。· 1~500系统预留的ID。· 500以上是普通用户使用。 |<br>| 组ID        | 其实这个和用户ID差不多，用来管理群组，与/etc/group文件相关。     |<br>| 描述信息       | 这个字段几乎没有什么用，只是用来解释这个账号的意义。在不同的Linux系统中，这个字段的 格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用做finger命令的输出。 |<br>| 用户主目录      | 用户登录系统的起始目录。用户登录系统后将首先进入该目录。root用户默认是/，普通用户是/home/username。 |<br>| 用户Shell    | 用户登录系统时使用的Shell。                         |</p>
<h2 id="管理用户和组"><a href="#管理用户和组" class="headerlink" title="管理用户和组**"></a><strong>管理用户和组<em>**</em></strong></h2><p>下面是一些常用的管理用户和组的命令：<br>| <strong>命令<em>**</em></strong> | <strong>说明<em>**</em></strong> |<br>| ———- | ———- |<br>| useradd    | 添加用户。      |<br>| usermod    | 修改用户信息。    |<br>| userdel    | 删除用户。      |<br>| groupadd   | 添加用户组。     |<br>| groupmod   | 修改用户组信息。   |<br>| groupdel   | 删除用户组。     |</p>
<h4 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组**"></a><strong>创建用户组<em>**</em></strong></h4><p>添加用户时，可以将用户添加到现有的用户组，或者创建一个新的用户组。可以在 /etc/groups 文件中看到所有的用户组信息。<br>默认的用户组通常用来管理系统用户，不建议将普通用户添加到这些用户组。使用groupadd命令创建用户组的语法为：<br>groupadd [-g gid [-o]] [-r] [-f] groupname<br>每个选项的含义如下：<br>| <strong>选项<em>**</em></strong> | <strong>说明<em>**</em></strong>      |<br>| ———- | ————— |<br>| -g GID     | 以数字表示的用户组ID。    |<br>| -o         | 可以使用重复的组ID。     |<br>| -r         | 建立系统组，用来管理系统用户。 |<br>| -f         | 强制创建。           |<br>| groupname  | 用户组的名称。         |<br>如果不指定选项，系统将使用默认值。例如创建一个 developers 用户组：<br>$ groupadd developers</p>
<h4 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组**"></a><strong>修改用户组<em>**</em></strong></h4><p>groupmod命令可以用来修改用户组，语法为：<br>$ groupmod -n new_modified_group_name old_group_name<br>例如，将用户组 developers_2 重命名为 developer：<br>$ groupmod -n developer developer_2<br>将developer用户组的ID改为545：<br>$ groupmod -g 545 developer</p>
<h4 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组**"></a><strong>删除用户组<em>**</em></strong></h4><p>通过groupdel命令可以删除用户组。例如，删除developer组：<br>$ groupdel developer<br>groupdel 仅仅删除用户组，并不删除与之相关的文件，这些文件仍然可以被所有者访问。</p>
<h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户**"></a><strong>添加用户<em>**</em></strong></h4><p>添加用户可以使用useradd命令，语法为：<br>useradd -d homedir -g groupname -m -s shell -u userid accountname<br>每个选项的含义如下：<br>| <strong>选项<em>**</em></strong>   | <strong>描述<em>**</em></strong>    |<br>| ———— | ————- |<br>| -d homedir   | 指定用户主目录。      |<br>| -g groupname | 指定用户组。        |<br>| -m           | 如果主目录不存在，就创建。 |<br>| -s shell     | 为用户指定默认Shell。 |<br>| -u userid    | 指定用户ID。       |<br>| accountname  | 用户名。          |<br>如果不指定任何选项，系统将使用默认值。useradd 命令将会修改 /etc/passwd、/etc/shadow、and /etc/group 三个文件，并创建用户主目录。<br>下面的例子将会添加用户 mcmohd，并设置主目录为 /home/mcmohd，用户组为 developers，默认 Shell 为  Korn Shell：<br>$ useradd -d /home/mcmohd -g developers -s /bin/ksh mcmohd<br>注意：添加用户前请确认 developers 用户组存在。<br>用户被创建后，可以使用 passwd 命令来设置密码，例如：<br>$ passwd mcmohd20<br>Changing password for user mcmohd20.<br>New Linux password:<strong>**</strong><br>Retype new UNIX password:<strong>**</strong><br>passwd: all authentication tokens updated successfully.<br>注意：如果你是管理员，输入 $ passwd username 可以修改你所管理的用户的密码；否则只能修改你自己的密码（不需要提供username）。</p>
<h4 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户**"></a><strong>修改用户<em>**</em></strong></h4><p>usermod 命令可以修改现有用户的信息。usermod 命令的选项和 useradd 相同，不过可以增加 -l 选项来更改用户名。<br>下面的例子将用户 mcmohd 的用户名修改为 mcmohd20，主目录修改为 /home/mcmohd20：<br>$ usermod -d /home/mcmohd20 -m -l mcmohd mcmohd20</p>
<h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户**"></a><strong>删除用户<em>**</em></strong></h4><p>userdel 命令可以用来删除现有用户。userdel 是一个危险的命令，请谨慎使用。<br>userdel 命令仅有一个选项 -r，用来删除用户主目录和本地邮件。例如，删除用户  mcmohd20：<br>$ userdel -r mcmohd20<br>为了便于恢复被误删的用户，可以忽略 -r 选项，保留用户主目录，之后确认无误可以随时删除主目录。</p>
<h1 id="Linux系统性能分析"><a href="#Linux系统性能分析" class="headerlink" title="Linux系统性能分析**"></a><strong>Linux系统性能分析<em>**</em></strong></h1><p>这篇教程的目的是向大家介绍一些免费的系统性能分析工具（命令），使用这些工具可以监控系统资源使用情况，便于发现性能瓶颈。<br>系统的整体性能取决于各种资源的平衡，类似木桶理论，某种资源的耗尽会严重阻碍系统的性能。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="linux-base/linux43471.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure><br>Linux中需要监控的资源主要有 CPU、主存（内存）、硬盘空间、I/O时间、网络时间、应用程序等。<br>影响系统性能的主要因素有：<br>| <strong>因素<em>**</em></strong>  | <strong>说明<em>**</em></strong>                               |<br>| ———– | —————————————- |<br>| 用户态CPU      | CPU在用户态运行用户程序所花费的时间，包括库调用，但是不包括内核花费的时间。  |<br>| 内核态CPU      | CPU在内核态运行系统服务所花费的时间。所有的 I/O 操作都需要调用系统服务，程序员可以通过阻塞 I/O 传输来影响这部分的时间。 |<br>| I/O 时间和网络时间 | 响应 I/O 请求、处理网络连接所花费的时间。                  |<br>| 内存          | 切换上下文和交换数据（虚拟内存页导入和导出）花费的时间。             |<br>| 应用程序        | 程序等待运行的时间——CPU正在运行其他程序，等待切换到当前程序。        |<br>说明：一般认为用户态CPU和内核态CPU花费的时间小于70%时是良好状态。<br>下面的命令可以用来监控系统性能并作出相应调整：<br>| <strong>命令<em>**</em></strong> | <strong>说明<em>**</em></strong>                               |<br>| ———- | —————————————- |<br>| nice       | 启动程序时指定进程优先级。                            |<br>| renice     | 调整现有进程的优先级。                              |<br>| netstat    | 显示各种网络相关信息，包括网络连接情况、路由表、接口状态(Interface Statistics)、masquerade 连接、多播成员 (Multicast Memberships)等。实际上，netstat 用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。 |<br>| time       | 检测一个命令运行时间以及资源（CPU、内存、I/O等）使用情况。         |<br>| uptime     | 查看系统负载情况。                                |<br>| ps         | 查看系统中进程的资源使用情况（瞬时状态，不是动态监控）。             |<br>| vmstat     | 报告虚拟内存使用情况。                              |<br>| gprof      | 精确分析程序的性能，能给出函数调用时间、调用次数、调用关系等。          |<br>| top        | 实时监控系统中各个进程资源的资源使用情况。                    |<br>常用命令组合：<br>· vmstat、sar、mpstat检测是否存在CPU瓶颈；<br>· vmstat、free检测是否存在内存瓶颈；<br>· iostat检测是否存在磁盘I/O瓶颈；<br>· netstat检测是否存在网络I/O瓶颈。</p>
<h1 id="Linux系统日志及日志分析"><a href="#Linux系统日志及日志分析" class="headerlink" title="Linux系统日志及日志分析**"></a><strong>Linux系统日志及日志分析<em>**</em></strong></h1><p>Linux系统拥有非常灵活和强大的日志功能，可以保存几乎所有的操作记录，并可以从中检索出我们需要的信息。<br>大部分Linux发行版默认的日志守护进程为 syslog，位于 /etc/syslog 或 /etc/syslogd，默认配置文件为 /etc/syslog.conf，任何希望生成日志的程序都可以向 syslog 发送信息。<br>Linux系统内核和许多程序会产生各种错误信息、警告信息和其他的提示信息，这些信息对管理员了解系统的运行状态是非常有用的，所以应该把它们写到日志文件中去。完成这个过程的程序就是syslog。syslog可以根据日志的类别和优先级将日志保存到不同的文件中。例如，为了方便查阅，可以把内核信息与其他信息分开，单独保存到一个独立的日志文件中。默认配置下，日志文件通常都保存在“/var/log”目录下。</p>
<h3 id="日志类型"><a href="#日志类型" class="headerlink" title="日志类型**"></a><strong>日志类型<em>**</em></strong></h3><p>下面是常见的日志类型，但并不是所有的Linux发行版都包含这些类型：<br>| <strong>类型<em>**</em></strong>    | <strong>说明<em>**</em></strong>                               |<br>| ————- | —————————————- |<br>| auth          | 用户认证时产生的日志，如login命令、su命令。                |<br>| authpriv      | 与 auth 类似，但是只能被特定用户查看。                   |<br>| console       | 针对系统控制台的消息。                              |<br>| cron          | 系统定期执行计划任务时产生的日志。                        |<br>| daemon        | 某些守护进程产生的日志。                             |<br>| ftp           | FTP服务。                                   |<br>| kern          | 系统内核消息。                                  |<br>| local0.local7 | 由自定义程序使用。                                |<br>| lpr           | 与打印机活动有关。                                |<br>| mail          | 邮件日志。                                    |<br>| mark          | 产生时间戳。系统每隔一段时间向日志文件中输出当前时间，每行的格式类似于 May 26 11:17:09 rs2 – MARK –，可以由此推断系统发生故障的大概时间。 |<br>| news          | 网络新闻传输协议(nntp)产生的消息。                     |<br>| ntp           | 网络时间协议(ntp)产生的消息。                        |<br>| user          | 用户进程。                                    |<br>| uucp          | UUCP子系统。                                 |</p>
<h3 id="日志优先级"><a href="#日志优先级" class="headerlink" title="日志优先级**"></a><strong>日志优先级<em>**</em></strong></h3><p>常见的日志优先级请见下标：<br>| <strong>优先级<em>**</em></strong> | <strong>说明<em>**</em></strong>                    |<br>| ———– | —————————– |<br>| emerg       | 紧急情况，系统不可用（例如系统崩溃），一般会通知所有用户。 |<br>| alert       | 需要立即修复，例如系统数据库损坏。             |<br>| crit        | 危险情况，例如硬盘错误，可能会阻碍程序的部分功能。     |<br>| err         | 一般错误消息。                       |<br>| warning     | 警告。                           |<br>| notice      | 不是错误，但是可能需要处理。                |<br>| info        | 通用性消息，一般用来提供有用信息。             |<br>| debug       | 调试程序产生的信息。                    |<br>| none        | 没有优先级，不记录任何日志消息。              |</p>
<h3 id="常见日志文件"><a href="#常见日志文件" class="headerlink" title="常见日志文件**"></a><strong>常见日志文件<em>**</em></strong></h3><p>所有的系统应用都会在 /var/log 目录下创建日志文件，或创建子目录再创建日志文件。例如：<br>| <strong>文件/目录<em>**</em></strong>     | <strong>说明<em>**</em></strong>                              |<br>| —————– | ————————————— |<br>| /var/log/boot.log | 开启或重启日志。                                |<br>| /var/log/cron     | 计划任务日志                                  |<br>| /var/log/maillog  | 邮件日志。                                   |<br>| /var/log/messages | 该日志文件是许多进程日志文件的汇总，从该文件可以看出任何入侵企图或成功的入侵。 |<br>| /var/log/httpd 目录 | Apache HTTP 服务日志。                       |<br>| /var/log/samba 目录 | samba 软件日志                              |</p>
<h3 id="etc-syslog-conf-文件"><a href="#etc-syslog-conf-文件" class="headerlink" title="/etc/syslog.conf 文件**"></a><strong>/etc/syslog.conf 文件<em>**</em></strong></h3><p>/etc/syslog.conf 是 syslog 的配置文件，会根据日志类型和优先级来决定将日志保存到何处。典型的 syslog.conf 文件格式如下所示：<br><em>.err;kern.debug;auth.notice /dev/console<br>daemon,auth.notice           /var/log/messages<br>lpr.info                     /var/log/lpr.log<br>mail.</em>                       /var/log/mail.log<br>ftp.<em>                        /var/log/ftp.log<br>auth.</em>                       @see.xidian.edu.cn<br>auth.<em>                       root,amrood<br>netinfo.err                  /var/log/netinfo.log<br>install.</em>                    /var/log/install.log<br><em>.emerg                      </em><br><em>.alert                      |program_name<br>mark.</em>                       /dev/console<br>第一列为日志类型和日志优先级的组合，每个类型和优先级的组合称为一个选择器；后面一列为保存日志的文件、服务器，或输出日志的终端。syslog 进程根据选择器决定如何操作日志。<br>对配置文件的几点说明：<br>· 日志类型和优先级由点号(.)分开，例如 kern.debug 表示由内核产生的调试信息。<br>· kern.debug 的优先级大于 debug。<br>· 星号(<em>)表示所有，例如 </em>.debug 表示所有类型的调试信息，kern.* 表示由内核产生的所有消息。<br>· 可以使用逗号(,)分隔多个日志类型，使用分号(;)分隔多个选择器。<br>对日志的操作包括：<br>· 将日志输出到文件，例如 /var/log/maillog 或 /dev/console。<br>· 将消息发送给用户，多个用户用逗号(,)分隔，例如 root, amrood。<br>· 通过管道将消息发送给用户程序，注意程序要放在管道符(|)后面。<br>· 将消息发送给其他主机上的 syslog 进程，这时 /etc/syslog.conf 文件后面一列为以@开头的主机名，例如@see.xidian.edu.cn。</p>
<h3 id="logger-命令"><a href="#logger-命令" class="headerlink" title="logger 命令**"></a><strong>logger 命令<em>**</em></strong></h3><p>logger 是Shell命令，可以通过该命令使用 syslog 的系统日志模块，还可以从命令行直接向系统日志文件写入一行信息。<br>logger命令的语法为：<br>logger [-i] [-f filename] [-p priority] [-t tag] [message…]<br>每个选项的含义如下：<br>| <strong>选项<em>**</em></strong>  | <strong>说明<em>**</em></strong>                               |<br>| ———– | —————————————- |<br>| -f filename | 将 filename 文件的内容作为日志。                    |<br>| -i          | 每行都记录 logger 进程的ID。                      |<br>| -p priority | 指定优先级；优先级必须是形如 facility.priority 的完整的选择器，默认优先级为 user.notice。 |<br>| -t tag      | 使用指定的标签标记每一个记录行。                         |<br>| message     | 要写入的日志内容，多条日志以空格为分隔；如果没有指定日志内容，并且 -f filename 选项为空，那么会把标准输入作为日志内容。 |<br>例如，将ping命令的结果写入日志：<br>$ ping 192.168.0.1 | logger -it logger_test -p local3.notice&amp;<br>$ tail -f /var/log/userlog<br>Oct 6 12:48:43 kevein logger_test[22484]: PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.<br>Oct 6 12:48:43 kevein logger_test[22484]: 64 bytes from 192.168.0.1: icmp_seq=1 ttl=253 time=49.7 ms<br>Oct 6 12:48:44 kevein logger_test[22484]: 64 bytes from 192.168.0.1: icmp_seq=2 ttl=253 time=68.4 ms<br>Oct 6 12:48:45 kevein logger_test[22484]: 64 bytes from 192.168.0.1: icmp_seq=3 ttl=253 time=315 ms<br>Oct 6 12:48:46 kevein logger_test[22484]: 64 bytes from 192.168.0.1: icmp_seq=4 ttl=253 time=279 ms<br>Oct 6 12:48:47 kevein logger_test[22484]: 64 bytes from 192.168.0.1: icmp_seq=5 ttl=253 time=347 ms<br>Oct 6 12:48:49 kevein logger_test[22484]: 64 bytes from 192.168.0.1: icmp_seq=6 ttl=253 time=701 ms<br>Oct 6 12:48:50 kevein logger_test[22484]: 64 bytes from 192.168.0.1: icmp_seq=7 ttl=253 time=591 ms<br>Oct 6 12:48:51 kevein logger_test[22484]: 64 bytes from 192.168.0.1: icmp_seq=8 ttl=253 time=592 ms<br>Oct 6 12:48:52 kevein logger_test[22484]: 64 bytes from 192.168.0.1: icmp_seq=9 ttl=253 time=611 ms<br>Oct 6 12:48:53 kevein logger_test[22484]: 64 bytes from 192.168.0.1: icmp_seq=10 ttl=253 time=931 ms<br>ping命令的结果成功输出到 /var/log/userlog 文件。<br>命令 logger -it logger_test -p local3.notice 各选项的含义：<br>· -i：在每行都记录进程ID；<br>· -t logger_test：每行记录都加上“logger_test”这个标签；<br>· -p local3.notice：设置日志类型和优先级。</p>
<h3 id="日志转储"><a href="#日志转储" class="headerlink" title="日志转储**"></a><strong>日志转储<em>**</em></strong></h3><p>日志转储也叫日志回卷或日志轮转。Linux中的日志通常增长很快，会占用大量硬盘空间，需要在日志文件达到指定大小时分开存储。<br>syslog 只负责接收日志并保存到相应的文件，但不会对日志文件进行管理，因此经常会造成日志文件过大，尤其是WEB服务器，轻易就能超过1G，给检索带来困难。<br>大多数Linux发行版使用 logrotate 或 newsyslog 对日志进行管理。logrotate 程序不但可以压缩日志文件，减少存储空间，还可以将日志发送到指定 E-mail，方便管理员及时查看日志。<br>例如，规定邮件日志 /var/log/maillog 超过1G时转储，每周一次，那么每隔一周 logrotate 进程就会检查 /var/log/maillog 文件的大小：<br>· 如果没有超过1G，不进行任何操作。<br>· 如果在1G~2G之间，就会创建新文件 /var/log/maillog.1，并将多出的1G日志转移到该文件，以给 /var/log/maillog 文件瘦身。<br>· 如果在2G~3G之间，会继续创建新文件 /var/log/maillog.2，并将 /var/log/maillog.1 的内容转移到该文件，将 /var/log/maillog 的内容转移到 /var/log/maillog.1，以保持 /var/log/maillog 文件不超过1G。<br>可以看到，每次转存都会创建一个新文件（如果不存在），命名格式为日志文件名加一个数字（从1开始自动增长），以保持当前日志文件和转存后的日志文件不超过指定大小。<br>logrotate 的主要配置文件是 /etc/logrotate.conf，/etc/logrotate.d 目录是对 /etc/logrotate.conf 的补充，或者说为了不使 /etc/logrotate.conf 过大而设置。<br>可以通过 cat 命令查看它的内容：<br>$cat /etc/logrotate.conf<br># see “man logrotate” for details  //可以查看帮助文档<br># rotate log files weekly<br>weekly                             //设置每周转储一次<br># keep 4 weeks worth of backlogs<br>rotate 4                           //最多转储4次<br># create new (empty) log files after rotating old ones<br>create                             //当转储后文件不存储时创建它<br># uncomment this if you want your log files compressed<br>#compress                          //以压缩方式转储<br># RPM packages drop log rotation information into this directory<br>include /etc/logrotate.d           //其他日志文件的转储方式，包含在该目录下<br># no packages own wtmp – we’ll rotate them here<br>/var/log/wtmp {                    //设置/var/log/wtmp日志文件的转储参数<br>​    monthly                        //每月转储<br>​    create 0664 root utmp          //转储后文件不存在时创建它，文件所有者为root，所属组为utmp，对应的权限为0664<br>​    rotate 1                       //最多转储一次<br>}<br>注意：include 允许管理员把多个分散的文件集中到一个，类似于C语言的 #include，将其他文件的内容包含进当前文件。<br>include 非常有用，一些程序会把转储日志的配置文件放在 /etc/logrotate.d 目录，这些配置文件会覆盖或增加 /etc/logrotate.conf 的配置项，如果没有指定相关配置，那么采用 /etc/logrotate.conf 的默认配置。<br>所以，建议将 /etc/logrotate.conf 作为默认配置文件，第三方程序在 /etc/logrotate.d 目录下自定义配置文件。<br>logrotate 也可以作为命令直接运行来修改配置文件。</p>
<h1 id="Linux信号机制与信号处理"><a href="#Linux信号机制与信号处理" class="headerlink" title="Linux信号机制与信号处理**"></a><strong>Linux信号机制与信号处理<em>**</em></strong></h1><p>信号(signal)是Linux进程间通信的一种机制，全称为软中断信号，也被称为软中断。信号本质上是在软件层次上对硬件中断机制的一种模拟。<br>与其他进程间通信方式（例如管道、共享内存等）相比，信号所能传递的信息比较粗糙，只是一个整数。但正是由于传递的信息量少，信号也便于管理和使用，可以用于系统管理相关的任务，例如通知进程终结、中止或者恢复等。<br>每种信号用一个整型常量宏表示，以SIG开头，比如SIGCHLD、SIGINT等，它们在系统头文件<signal.h>中定义。<br>信号由内核(kernel)管理，产生方式多种多样：<br>· 可以由内核自身产生，比如出现硬件错误、内存读取错误，分母为0的除法等，内核需要通知相应进程。<br>· 也可以由其他进程产生并发送给内核，再由内核传递给目标进程。<br>信号传递的过程：<br>· 内核中针对每一个进程都有一个表来保存信号。<br>· 当内核需要将信号传递给某个进程时，就在该进程对应的表中写入信号，这样就生成了信号。<br>· 当该进程由用户态陷入内核态，再次切换到用户态之前，会查看表中的信号。如果有信号，进程就会首先执行信号对应的操作，此时叫做执行信号。<br>· 从生成信号到将信号传递给对应进程这段时间，信号处于等待状态。<br>· 我们可以编写代码，让进程阻塞(block)某些信号，也就是让这些信号始终处于等待的状态，直到进程取消阻塞(unblock)或者忽略信号。</signal.h></p>
<h2 id="信号种类"><a href="#信号种类" class="headerlink" title="信号种类**"></a><strong>信号种类<em>**</em></strong></h2><p>下表列出了一些常见信号：<br>| <strong>信号名称<em>**</em></strong> | <strong>数字表示<em>**</em></strong> | <strong>说明<em>**</em></strong>                               |<br>| ———— | ———— | —————————————- |<br>| SIGHUP       | 1            | 终端挂起或控制进程终止。当用户退出Shell时，由该进程启动的所有进程都会收到这个信号，默认动作为终止进程。 |<br>| SIGINT       | 2            | 键盘中断。当用户按下<ctrl+c>组合键时，用户终端向正在运行中的由该终端启动的程序发出此信号。默认动作为终止进程。 |<br>| SIGQUIT      | 3            | 键盘退出键被按下。当用户按下<ctrl+d>或<ctrl+\>组合键时，用户终端向正在运行中的由该终端启动的程序发出此信号。默认动作为退出程序。 |<br>| SIGFPE       | 8            | 发生致命的运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为0等所有的算法错误。默认动作为终止进程并产生core文件。 |<br>| SIGKILL      | 9            | 无条件终止进程。进程接收到该信号会立即终止，不进行清理和暂存工作。该信号不能被忽略、处理和阻塞，它向系统管理员提供了可以杀死任何进程的方法。 |<br>| SIGALRM      | 14           | 定时器超时，默认动作为终止进程。                         |<br>| SIGTERM      | 15           | 程序结束信号，可以由 kill 命令产生。与SIGKILL不同的是，SIGTERM 信号可以被阻塞和终止，以便程序在退出前可以保存工作或清理临时文件等。 |<br>通过 kill -l 命令可以查看系统支持的所有信号：<br>$ kill -l<br>1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL<br>5) SIGTRAP      6) SIGABRT      7) SIGBUS       8) SIGFPE<br>9) SIGKILL     10) SIGUSR1     11) SIGSEGV     12) SIGUSR2<br>13) SIGPIPE     14) SIGALRM     15) SIGTERM     16) SIGSTKFLT<br>17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP<br>21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU<br>25) SIGXFSZ     26) SIGVTALRM   27) SIGPROF     28) SIGWINCH<br>29) SIGIO       30) SIGPWR      31) SIGSYS      34) SIGRTMIN<br>35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3  38) SIGRTMIN+4<br>39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8<br>43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12<br>47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14<br>51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10<br>55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7  58) SIGRTMAX-6<br>59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2<br>63) SIGRTMAX-1  64) SIGRTMAX<br>上面仅是一个演示，不同的Linux发行版支持的信号可能不同。<br>每种信号都会有一个默认动作。默认动作就是脚本或程序接收到该信号所做出的默认操作。常见的默认动作有终止进程、退出程序、忽略信号、重启暂停的进程等，上表中也对部分默认动作进行了说明。</ctrl+\></ctrl+d></ctrl+c></p>
<h2 id="发送信号"><a href="#发送信号" class="headerlink" title="发送信号**"></a><strong>发送信号<em>**</em></strong></h2><p>有多种方式可以向程序或脚本发送信号，例如按下<ctrl+c>组合键会发送SIGINT信号，终止当前进程。<br>还可以通过 kill 命令发送信号，语法为：<br>$ kill -signal pid<br>signal为要发送的信号，可以是信号名称或数字；pid为接收信号的进程ID。例如：<br>$ kill -1 1001<br>将SIGHUP信号发送给进程ID为1001的程序，程序会终止执行。<br>又如，强制杀死ID为1001的进程：<br>$ kill -9 1001</ctrl+c></p>
<h2 id="捕获信号"><a href="#捕获信号" class="headerlink" title="捕获信号**"></a><strong>捕获信号<em>**</em></strong></h2><p>通常情况下，直接终止进程并不是我们所希望的。例如，按下<ctrl+c>，进程被立即终止，不会清理创建的临时文件，带来系统垃圾，也不会保存正在进行的工作，导致需要重做。<br>可以通过编程来捕获这些信号，当终止信号出现时，可以先进行清场和保存处理，再退出程序。<br>用户程序可以通过C/C++等代码捕获信号，这将在Linux C编程中进行讲解，这里仅介绍如果通过Linux命令捕获信号。<br>通过 trap 命令就可以捕获信号，语法为：<br>$ trap commands signals<br>commands为Linux系统命令或用户自定义命令；signals为要捕获的信号，可以为信号名称或数字。<br>捕获到信号后，可以有三种处理：<br>· 执行一段脚本来做一些处理工作，例如清理临时文件；<br>· 接受（恢复）信号的默认操作；<br>· 忽略当前信号。</ctrl+c></p>
<h4 id="1-清理临时文件"><a href="#1-清理临时文件" class="headerlink" title="1) 清理临时文件**"></a><strong>1) 清理临时文件<em>**</em></strong></h4><p>脚本捕获到终止信号后一个常见的动作就是清理临时文件。例如：<br>$ trap “rm -f $WORKDIR/work1$$ $WORKDIR/dataout$$; exit” 2<br>当用户按下<ctrl+c>后，脚本先清理临时文件 work1$$ 和 dataout$$ 再退出。<br>注意：exit 命令是必须的，否则脚本捕获到信号后会继续执行而不是退出。<br>修改上面的脚本，使接收到 SIGHUP 时进行同样的操作：<br>$ trap “rm $WORKDIR/work1$$ $WORKDIR/dataout$$; exit” 1 2<br>几点注意：<br>· 如果执行多个命令，需要将命令用引号包围；<br>· 只有脚本执行到 trap 命令时才会捕获信号；<br>· 再次接收到信号时还会执行同样的操作。<br>上面的脚本，执行到 trap 命令时就会替换 WORKDIR 和 $$ 的值。如果希望接收到 SIGHUP 或 SIGINT 信号时再替换其值，那么可以将命令放在单引号内，例如：<br>$ trap ‘rm $WORKDIR/work1$$ $WORKDIR/dataout$$; exit’ 1 2</ctrl+c></p>
<h4 id="2-忽略信号"><a href="#2-忽略信号" class="headerlink" title="2) 忽略信号**"></a><strong>2) 忽略信号<em>**</em></strong></h4><p>如果 trap 命令的 commands 为空，将会忽略接收到的信号，即不做任何处理，也不执行默认动作。例如：<br>$ trap ‘’ 2<br>也可以同时忽略多个信号：<br>$ trap ‘’ 1 2 3 15<br>注意：必须被引号包围，不能写成下面的形式：<br>$ trap  2</p>
<h4 id="3-恢复默认动作"><a href="#3-恢复默认动作" class="headerlink" title="3) 恢复默认动作**"></a><strong>3) 恢复默认动作<em>**</em></strong></h4><p>如果希望改变信号的默认动作后再次恢复默认动作，那么省略 trap 命令的 commands 即可，例如：<br>$ trap 1 2<br>将恢复SIGHUP 和 SIGINT 信号的默认动作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux是一个多用户多任务操作系统，不但被很多开发者用作个人操作系统，还大量运行在Web服务器上。&lt;br&gt;该教程将带你快速了解Linux系统，包括基本概念、Linux命令、Shell脚本、常用工具等。&lt;br&gt;该教程可以让你快速入门快速上手，能很快让你看到学习的效果；如果你
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C语言中文网：Shell教程</title>
    <link href="http://yoursite.com/2017/07/04/shell-base/"/>
    <id>http://yoursite.com/2017/07/04/shell-base/</id>
    <published>2017-07-03T16:00:00.000Z</published>
    <updated>2017-07-05T02:10:22.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell简介：什么是Shell，Shell命令的两种执行方式"><a href="#Shell简介：什么是Shell，Shell命令的两种执行方式" class="headerlink" title="Shell简介：什么是Shell，Shell命令的两种执行方式 **"></a><strong>Shell简介：什么是Shell，Shell命令的两种执行方式 <em>**</em></strong></h1><p>Shell本身是一个用C语言编写的程序，它是用户使用Unix/Linux的桥梁，用户的大部分工作都是通过Shell完成的。Shell既是一种命令语言，又是一种程序设计语言。作为命令语言，它交互式地解释和执行用户输入的命令；作为程序设计语言，它定义了各种变量和参数，并提供了许多在高级语言中才具有的控制结构，包括循环和分支。<br>它虽然不是Unix/Linux系统内核的一部分，但它调用了系统核心的大部分功能来执行程序、建立文件并以并行的方式协调各个程序的运行。因此，对于用户来说，shell是最重要的实用程序，深入了解和熟练掌握shell的特性极其使用方法，是用好Unix/Linux系统的关键。<br>可以说，shell使用的熟练程度反映了用户对Unix/Linux使用的熟练程度。<br>注意：单独地学习 Shell 是没有意义的，请先参考<a href="http://c.biancheng.net/cpp/linux/" target="_blank" rel="external">Unix/Linux入门教程</a>，了解 Unix/Linux 基础。</p>
<h2 id="Shell有两种执行命令的方式："><a href="#Shell有两种执行命令的方式：" class="headerlink" title="Shell有两种执行命令的方式：**"></a><strong>Shell有两种执行命令的方式：<em>**</em></strong></h2><p>· 交互式（Interactive）：解释执行用户的命令，用户输入一条命令，Shell就解释执行一条。</p>
<p>· 批处理（Batch）：用户事先写一个Shell脚本(Script)，其中有很多条命令，让Shell一次把这些命令执行完，而不必一条一条地敲命令。</p>
<p>Shell脚本和编程语言很相似，也有变量和流程控制语句，但Shell脚本是解释执行的，不需要编译，Shell程序从脚本中一行一行读取并执行这些命令，相当于一个用户把脚本中的命令一行一行敲到Shell提示符下执行。<br>Shell初学者请注意，在平常应用中，建议不要用 root 帐号运行 Shell 。作为普通用户，不管您有意还是无意，都无法破坏系统；但如果是 root，那就不同了，只要敲几个字母，就可能导致灾难性后果。</p>
<h1 id="几种常见的Shell"><a href="#几种常见的Shell" class="headerlink" title="几种常见的Shell**"></a><strong>几种常见的Shell<em>**</em></strong></h1><p>上面提到过，Shell是一种脚本语言，那么，就必须有解释器来执行这些脚本。<br>Unix/Linux上常见的Shell脚本解释器有bash、sh、csh、ksh等，习惯上把它们称作一种Shell。我们常说有多少种Shell，其实说的是Shell脚本解释器。</p>
<h2 id="bash"><a href="#bash" class="headerlink" title="bash**"></a><strong>bash<em>**</em></strong></h2><p>bash是Linux标准默认的shell，本教程也基于bash讲解。bash由Brian Fox和Chet Ramey共同完成，是BourneAgain Shell的缩写，内部命令一共有40个。<br>Linux使用它作为默认的shell是因为它有诸如以下的特色：</p>
<p>· 可以使用类似DOS下面的doskey的功能，用方向键查阅和快速输入并修改命令。</p>
<p>· 自动通过查找匹配的方式给出以某字符串开头的命令。</p>
<p>· 包含了自身的帮助功能，你只要在提示符下面键入help就可以得到相关的帮助。</p>
<h2 id="sh"><a href="#sh" class="headerlink" title="sh**"></a><strong>sh<em>**</em></strong></h2><p>sh 由Steve Bourne开发，是Bourne Shell的缩写，sh 是Unix 标准默认的shell。</p>
<h2 id="ash"><a href="#ash" class="headerlink" title="ash**"></a><strong>ash<em>**</em></strong></h2><p>ash shell 是由Kenneth Almquist编写的，Linux中占用系统资源最少的一个小shell，它只包含24个内部命令，因而使用起来很不方便。</p>
<h2 id="csh"><a href="#csh" class="headerlink" title="csh**"></a><strong>csh<em>**</em></strong></h2><p>csh 是Linux比较大的内核，它由以William Joy为代表的共计47位作者编成，共有52个内部命令。该shell其实是指向/bin/tcsh这样的一个shell，也就是说，csh其实就是tcsh。</p>
<h2 id="ksh"><a href="#ksh" class="headerlink" title="ksh**"></a><strong>ksh<em>**</em></strong></h2><p>ksh 是Korn shell的缩写，由Eric Gisin编写，共有42条内部命令。该shell最大的优点是几乎和商业发行版的ksh完全兼容，这样就可以在不用花钱购买商业版本的情况下尝试商业版本的性能了。<br>注意：bash是 Bourne Again Shell 的缩写，是linux标准的默认shell ，它基于Bourne shell，吸收了C shell和Korn shell的一些特性。bash完全兼容sh，也就是说，用sh写的脚本可以不加修改的在bash中执行。</p>
<h1 id="Shell脚本语言与编译型语言的差异"><a href="#Shell脚本语言与编译型语言的差异" class="headerlink" title="Shell脚本语言与编译型语言的差异**"></a><strong>Shell脚本语言与编译型语言的差异<em>**</em></strong></h1><p>大体上，可以将程序设计语言可以分为两类：编译型语言和解释型语言。</p>
<h2 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言**"></a><strong>编译型语言<em>**</em></strong></h2><p>很多传统的程序设计语言，例如Fortran、Ada、Pascal、C、C++和Java，都是编译型语言。这类语言需要预先将我们写好的源代码(source code)转换成目标代码(object code)，这个过程被称作“编译”。<br>运行程序时，直接读取目标代码(object code)。由于编译后的目标代码(object code)非常接近计算机底层，因此执行效率很高，这是编译型语言的优点。<br>但是，由于编译型语言多半运作于底层，所处理的是字节、整数、浮点数或是其他机器层级的对象，往往实现一个简单的功能需要大量复杂的代码。例如，在C++里，就很难进行“将一个目录里所有的文件复制到另一个目录中”之类的简单操作。</p>
<h2 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言**"></a><strong>解释型语言<em>**</em></strong></h2><p>解释型语言也被称作“脚本语言”。执行这类程序时，解释器(interpreter)需要读取我们编写的源代码(source code)，并将其转换成目标代码(object code)，再由计算机运行。因为每次执行程序都多了编译的过程，因此效率有所下降。<br>使用脚本编程语言的好处是，它们多半运行在比编译型语言还高的层级，能够轻易处理文件与目录之类的对象；缺点是它们的效率通常不如编译型语言。不过权衡之下，通常使用脚本编程还是值得的：花一个小时写成的简单脚本，同样的功能用C或C++来编写实现，可能需要两天，而且一般来说，脚本执行的速度已经够快了，快到足以让人忽略它性能上的问题。脚本编程语言的例子有awk、Perl、Python、Ruby与Shell。</p>
<h1 id="什么时候使用Shell"><a href="#什么时候使用Shell" class="headerlink" title="什么时候使用Shell**"></a><strong>什么时候使用Shell<em>**</em></strong></h1><p>因为Shell似乎是各UNIX系统之间通用的功能，并且经过了POSIX的标准化。因此，Shell脚本只要“用心写”一次，即可应用到很多系统上。因此，之所以要使用Shell脚本是基于：</p>
<p>· 简单性：Shell是一个高级语言；通过它，你可以简洁地表达复杂的操作。</p>
<p>· 可移植性：使用POSIX所定义的功能，可以做到脚本无须修改就可在不同的系统上执行。</p>
<p>· 开发容易：可以在短时间内完成一个功能强大又妤用的脚本。</p>
<p>但是，考虑到Shell脚本的命令限制和效率问题，下列情况一般不使用Shell：</p>
<ol>
<li><p>资源密集型的任务，尤其在需要考虑效率时（比如，排序，hash等等）。</p>
</li>
<li><p>需要处理大任务的数学操作，尤其是浮点运算，精确运算，或者复杂的算术运算（这种情况一般使用C++或FORTRAN 来处理）。</p>
</li>
<li><p>有跨平台（操作系统）移植需求（一般使用C 或Java）。</p>
</li>
<li><p>复杂的应用，在必须使用结构化编程的时候（需要变量的类型检查，函数原型，等等）。</p>
</li>
<li><p>对于影响系统全局性的关键任务应用。</p>
</li>
<li><p>对于安全有很高要求的任务，比如你需要一个健壮的系统来防止入侵、破解、恶意破坏等等。</p>
</li>
<li><p>项目由连串的依赖的各个部分组成。</p>
</li>
<li><p>需要大规模的文件操作。</p>
</li>
<li><p>需要多维数组的支持。</p>
</li>
<li><p>需要数据结构的支持，比如链表或数等数据结构。</p>
</li>
<li><p>需要产生或操作图形化界面 GUI。</p>
</li>
<li><p>需要直接操作系统硬件。</p>
</li>
<li><p>需要 I/O 或socket 接口。</p>
</li>
<li><p>需要使用库或者遗留下来的老代码的接口。</p>
</li>
<li><p>私人的、闭源的应用（shell 脚本把代码就放在文本文件中，全世界都能看到）。</p>
</li>
</ol>
<p>如果你的应用符合上边的任意一条，那么就考虑一下更强大的语言吧——或许是Perl、Tcl、Python、Ruby——或者是更高层次的编译语言比如C/C++，或者是Java。即使如此，你会发现，使用shell来原型开发你的应用，在开发步骤中也是非常有用的。</p>
<h1 id="第一个Shell脚本"><a href="#第一个Shell脚本" class="headerlink" title="第一个Shell脚本**"></a><strong>第一个Shell脚本<em>**</em></strong></h1><p>打开文本编辑器，新建一个文件，扩展名为sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用php写shell 脚本，扩展名就用php好了。<br>输入一些代码：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line">echo "Hello World !"</div></pre></td></tr></table></figure>
<p>“#!” 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种Shell。echo命令用于向窗口输出文本。<br>运行Shell脚本有两种方法。</p>
<h2 id="作为可执行程序"><a href="#作为可执行程序" class="headerlink" title="作为可执行程序**"></a><strong>作为可执行程序<em>**</em></strong></h2><p>将上面的代码保存为test.sh，并 cd 到相应目录：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> chmod +x ./test.sh  #使脚本具有执行权限</div><div class="line"><span class="meta">$</span> ./test.sh  #执行脚本</div></pre></td></tr></table></figure>
<p>注意，一定要写成./test.sh，而不是test.sh。运行其它二进制的程序也一样，直接写test.sh，linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin, /sbin, /usr/bin，/usr/sbin等在PATH里，你的当前目录通常不在PATH里，所以写成test.sh是会找不到命令的，要用./test.sh告诉系统说，就在当前目录找。<br>通过这种方式运行bash脚本，第一行一定要写对，好让系统查找到正确的解释器。<br>这里的”系统”，其实就是shell这个应用程序（想象一下Windows Explorer），但我故意写成系统，是方便理解，既然这个系统就是指shell，那么一个使用/bin/sh作为解释器的脚本是不是可以省去第一行呢？是的。</p>
<h2 id="作为解释器参数"><a href="#作为解释器参数" class="headerlink" title="作为解释器参数**"></a><strong>作为解释器参数<em>**</em></strong></h2><p>这种运行方式是，直接运行解释器，其参数就是shell脚本的文件名，如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> /bin/sh test.sh</div><div class="line"><span class="meta">$</span> /bin/php test.php</div></pre></td></tr></table></figure>
<p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。<br>再看一个例子。下面的脚本使用 <strong>read</strong> 命令从 stdin 获取输入并赋值给 PERSON 变量，最后在 stdout 上输出：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"><span class="meta">#</span> Author : mozhiyan</div><div class="line"><span class="meta">#</span> Copyright (c) http://see.xidian.edu.cn/cpp/linux/</div><div class="line"><span class="meta">#</span> Script follows here:</div><div class="line">echo "What is your name?"</div><div class="line">read PERSON</div><div class="line">echo "Hello, $PERSON"</div></pre></td></tr></table></figure>
<p>运行脚本：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> chmod +x ./test.sh</div><div class="line"><span class="meta">$</span> ./test.sh</div><div class="line">What is your name?</div><div class="line">mozhiyan</div><div class="line">Hello, mozhiyan</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<h1 id="Shell变量：Shell变量的定义、删除变量、只读变量、变量类型"><a href="#Shell变量：Shell变量的定义、删除变量、只读变量、变量类型" class="headerlink" title="Shell变量：Shell变量的定义、删除变量、只读变量、变量类型**"></a><strong>Shell变量：Shell变量的定义、删除变量、只读变量、变量类型<em>**</em></strong></h1><p>Shell支持自定义变量。</p>
<h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量**"></a><strong>定义变量<em>**</em></strong></h2><p>定义变量时，变量名不加美元符号（<code>$</code>），如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">variableName="value"</div></pre></td></tr></table></figure>
<p>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</p>
<p>· 首个字符必须为字母（<code>a-z</code>，<code>A-Z</code>）。</p>
<p>· 中间不能有空格，可以使用下划线（<code>_</code>）。</p>
<p>· 不能使用标点符号。</p>
<p>· 不能使用<code>bash</code>里的关键字（可用<code>help</code>命令查看保留关键字）。</p>
<p>变量定义举例：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myUrl="http://see.xidian.edu.cn/cpp/linux/"</div><div class="line">myNum=100</div></pre></td></tr></table></figure>
<h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量**"></a><strong>使用变量<em>**</em></strong></h2><p>使用一个定义过的变量，只要在变量名前面加美元符号（<code>$</code>）即可，如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">your_name="mozhiyan"</div><div class="line">echo $your_name</div><div class="line">echo $&#123;your_name&#125;</div></pre></td></tr></table></figure>
<p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for skill in Ada Coffe Action Java </div><div class="line">do</div><div class="line">	echo "I am good at $&#123;skill&#125;Script"</div><div class="line">done</div></pre></td></tr></table></figure>
<p>如果不给<code>skill</code>变量加花括号，写成<code>echo &quot;I am good at $skillScript&quot;</code>，解释器就会把<code>$skillScript</code>当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。<br>推荐给所有变量加上花括号，这是个好的编程习惯。</p>
<h2 id="重新定义变量"><a href="#重新定义变量" class="headerlink" title="重新定义变量**"></a><strong>重新定义变量<em>**</em></strong></h2><p>已定义的变量，可以被重新定义，如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">myUrl="http://see.xidian.edu.cn/cpp/linux/"</div><div class="line">echo $&#123;myUrl&#125;</div><div class="line">myUrl="http://see.xidian.edu.cn/cpp/shell/"</div><div class="line">echo $&#123;myUrl&#125;</div></pre></td></tr></table></figure>
<p>这样写是合法的，但注意，第二次赋值的时候不能写 <code>$myUrl=&quot;http://see.xidian.edu.cn/cpp/shell/&quot;</code>，使用变量的时候才加美元符（<code>$</code>）。</p>
<h2 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量**"></a><strong>只读变量<em>**</em></strong></h2><p>使用 <strong>readonly</strong> 命令可以将变量定义为只读变量，只读变量的值不能被改变。<br>下面的例子尝试更改只读变量，结果报错：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">myUrl="http://see.xidian.edu.cn/cpp/shell/"</div><div class="line">readonly myUrl</div><div class="line">myUrl="http://see.xidian.edu.cn/cpp/danpianji/"</div></pre></td></tr></table></figure>
<p>运行脚本，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/sh: NAME: This variable is read only.</div></pre></td></tr></table></figure>
<h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量**"></a><strong>删除变量<em>**</em></strong></h2><p>使用 <strong>unset</strong> 命令可以删除变量。语法：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unset variable_name</div></pre></td></tr></table></figure>
<p>变量被删除后不能再次使用；unset 命令不能删除只读变量。<br>举个例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line">myUrl="http://see.xidian.edu.cn/cpp/u/xitong/"</div><div class="line">unset myUrl</div><div class="line">echo $myUrl</div></pre></td></tr></table></figure>
<p>上面的脚本没有任何输出。</p>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型**"></a><strong>变量类型<em>**</em></strong></h2><p>运行shell时，会同时存在三种变量：</p>
<h4 id="1-局部变量"><a href="#1-局部变量" class="headerlink" title="1) 局部变量**"></a><strong>1) 局部变量<em>**</em></strong></h4><p>局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p>
<h4 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2) 环境变量**"></a><strong>2) 环境变量<em>**</em></strong></h4><p>所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</p>
<h4 id="3-shell变量"><a href="#3-shell变量" class="headerlink" title="3) shell变量**"></a><strong>3) shell变量<em>**</em></strong></h4><p>shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</p>
<h1 id="Shell特殊变量：Shell-0-和命令行参数"><a href="#Shell特殊变量：Shell-0-和命令行参数" class="headerlink" title="Shell特殊变量：Shell $0, $#, $*, $@, $?, `# 和命令行参数**"></a><strong>Shell特殊变量：Shell <code>$0</code>, <code>$#</code>, <code>$*</code>, <code>$@</code>, <code>$?</code>, `# 和命令行参数<em>**</em></strong></h1><p>前面已经讲到，变量名只能包含数字、字母和下划线，因为某些包含其他字符的变量有特殊含义，这样的变量被称为特殊变量。<br>例如，<code>$</code> 表示当前Shell进程的ID，即pid，看下面的代码：</p>
<p><code>$echo $$</code></p>
<p>运行结果</p>
<p><code>29949</code></p>
<table>
<thead>
<tr>
<th>特殊变量列表</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>变量<em>**</em></strong></td>
<td><strong>含义<em>**</em></strong></td>
</tr>
<tr>
<td>$0</td>
<td>当前脚本的文件名</td>
</tr>
<tr>
<td>$n</td>
<td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</td>
</tr>
<tr>
<td>$#</td>
<td>传递给脚本或函数的参数个数。</td>
</tr>
<tr>
<td>$*</td>
<td>传递给脚本或函数的所有参数。</td>
</tr>
<tr>
<td>$@</td>
<td>传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</td>
</tr>
<tr>
<td>$?</td>
<td>上个命令的退出状态，或函数的返回值。</td>
</tr>
<tr>
<td>$$</td>
<td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td>
</tr>
</tbody>
</table>
<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数**"></a><strong>命令行参数<em>**</em></strong></h2><p>运行脚本时传递给脚本的参数称为命令行参数。命令行参数用<code>$n</code>表示，例如，<code>$1</code>表示第一个参数，<code>$2</code> 表示第二个参数，依次类推。<br>请看下面的脚本：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line">echo "File Name: $0"</div><div class="line">echo "First Parameter : $1"</div><div class="line">echo "First Parameter : $2"</div><div class="line">echo "Quoted Values: $@"</div><div class="line">echo "Quoted Values: $*"</div><div class="line">echo "Total Number of Parameters : $#"</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$./test.sh Zara Ali</div><div class="line">File Name : ./test.sh</div><div class="line">First Parameter : Zara</div><div class="line">Second Parameter : Ali</div><div class="line">Quoted Values: Zara Ali</div><div class="line">Quoted Values: Zara Ali</div><div class="line">Total Number of Parameters : 2</div></pre></td></tr></table></figure>
<h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$* 和 $@ 的区别**"></a><strong><code>$*</code> 和 <code>$@</code> 的区别<em>**</em></strong></h2><p><code>$*</code> 和<code>$@</code>都表示传递给函数或脚本的所有参数，</p>
<p>不被双引号(“ “)包含时，都以<code>&quot;$1&quot;</code> <code>&quot;$2&quot;</code>  … <code>&quot;$n&quot;</code>的形式输出所有参数。<br>但是当它们被双引号(“ “)包含时，<code>&quot;$*&quot;</code>会将所有的参数作为一个整体，以<code>&quot;$1 $2 … $n&quot;</code>的形式输出所有参数；<code>&quot;$@&quot;</code> 会将各个参数分开，以<code>&quot;$1&quot;</code> <code>&quot;$2&quot;</code>  …  <code>&quot;$n&quot;</code> 的形式输出所有参数。</p>
<p>下面的例子可以清楚的看到<code>$*</code>和<code>$@</code> 的区别：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line">echo "$*=" $*</div><div class="line">echo "\"$*\"=" "$*"</div><div class="line"></div><div class="line">echo "$@=" $@</div><div class="line">echo "\"$@\"=" "$@"</div><div class="line"></div><div class="line">echo "print each param from $*"</div><div class="line">for var in $*</div><div class="line">do</div><div class="line">    echo "$var"</div><div class="line">done</div><div class="line"></div><div class="line">echo "print each param from $@"</div><div class="line">for var in $@</div><div class="line">do</div><div class="line">    echo "$var"</div><div class="line">done</div><div class="line"></div><div class="line">echo "print each param from \"$*\""</div><div class="line">for var in "$*"</div><div class="line">do</div><div class="line">    echo "$var"</div><div class="line">done</div><div class="line"></div><div class="line">echo "print each param from \"$@\""</div><div class="line">for var in "$@"</div><div class="line">do</div><div class="line">    echo "$var"</div><div class="line">done</div></pre></td></tr></table></figure>
<p>执行 ./test.sh “a” “b” “c” “d”，看到下面的结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>*=  a b c d</div><div class="line">"$*"= a b c d</div><div class="line"><span class="meta">$</span>@=  a b c d</div><div class="line">"$@"= a b c d</div><div class="line">print each param from $*</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div><div class="line">print each param from $@</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div><div class="line">print each param from "$*"</div><div class="line">a b c d</div><div class="line">print each param from "$@"</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div></pre></td></tr></table></figure>
<h2 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态**"></a><strong>退出状态<em>**</em></strong></h2><p><code>$?</code>可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。<br>退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。<br>不过，也有一些命令返回其他值，表示不同类型的错误。<br>下面例子中，命令成功执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>./test.sh Zara Ali</div><div class="line">File Name : ./test.sh</div><div class="line">First Parameter : Zara</div><div class="line">Second Parameter : Ali</div><div class="line">Quoted Values: Zara Ali</div><div class="line">Quoted Values: Zara Ali</div><div class="line">Total Number of Parameters : 2</div><div class="line">echo ?</div><div class="line">0</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<p><code>$?</code> 也可以表示函数的返回值，后续将会讲解。</p>
<h1 id="Shell替换：Shell变量替换，命令替换，转义字符"><a href="#Shell替换：Shell变量替换，命令替换，转义字符" class="headerlink" title="Shell替换：Shell变量替换，命令替换，转义字符**"></a><strong>Shell替换：Shell变量替换，命令替换，转义字符<em>**</em></strong></h1><p>如果表达式中包含特殊字符，Shell 将会进行替换。例如，在双引号中使用变量就是一种替换，转义字符也是一种替换。<br>举个例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">a=10</div><div class="line">echo -e "Value of a is $a \n"</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><code>Value of a is 10</code></p>
<p>这里 <code>-e</code>表示对转义字符进行替换。如果不使用 <code>-e</code> 选项，将会原样输出：</p>
<p><code>Value of a is 10\n</code></p>
<p>下面的转义字符都可以用在<code>echo</code>中：</p>
<table>
<thead>
<tr>
<th><strong>转义字符<em>**</em></strong></th>
<th><strong>含义<em>**</em></strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>\</td>
<td>反斜杠</td>
</tr>
<tr>
<td>\a</td>
<td>警报，响铃</td>
</tr>
<tr>
<td>\b</td>
<td>退格（删除键）</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表符（tab键）</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表符</td>
</tr>
</tbody>
</table>
<p>可以使用<code>echo</code>命令的 <code>-E</code>选项禁止转义，默认也是不转义的；使用<code>-n</code>选项可以禁止插入换行符。</p>
<h2 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换**"></a><strong>命令替换<em>**</em></strong></h2><p>命令替换是指Shell可以先执行命令，将输出结果暂时保存，在适当的地方输出。<br>命令替换的语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`command`</div></pre></td></tr></table></figure>
<p>注意是反引号，不是单引号，这个键位于 Esc` 键下方。<br>下面的例子中，将命令执行结果保存在变量中：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">DATE=date</div><div class="line">echo "Date is $DATE"</div><div class="line"></div><div class="line">USERS=who | wc -l</div><div class="line">echo "Logged in user are $USERS"</div><div class="line"></div><div class="line">UP=date ; uptime</div><div class="line">echo "Uptime is $UP"</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Date is Thu Jul  2 03:59:57 MST 2009</div><div class="line">Logged in user are 1</div><div class="line">Uptime is Thu Jul  2 03:59:57 MST 2009</div><div class="line">03:59:57 up 20 days, 14:03,  1 user,  load avg: 0.13, 0.07, 0.15</div></pre></td></tr></table></figure>
<h2 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换**"></a><strong>变量替换<em>**</em></strong></h2><p>变量替换可以根据变量的状态（是否为空、是否定义等）来改变它的值<br>可以使用的变量替换形式：</p>
<table>
<thead>
<tr>
<th><strong>形式<em>**</em></strong></th>
<th><strong>说明<em>**</em></strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>${var}</td>
<td>变量本来的值</td>
</tr>
<tr>
<td>${var:-word}</td>
<td>如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值。</td>
</tr>
<tr>
<td>${var:=word}</td>
<td>如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值设置为 word。</td>
</tr>
<tr>
<td>${var:?message}</td>
<td>如果变量 var 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量 var 是否可以被正常赋值。若此替换出现在Shell脚本中，那么脚本将停止运行。</td>
</tr>
<tr>
<td>${var:+word}</td>
<td>如果变量 var 被定义，那么返回 word，但不改变 var 的值。</td>
</tr>
</tbody>
</table>
<p>请看下面的例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">echo $&#123;var:-"Variable is not set"&#125;</div><div class="line">echo "1 - Value of var is $&#123;var&#125;"</div><div class="line"></div><div class="line">echo $&#123;var:="Variable is not set"&#125;</div><div class="line">echo "2 - Value of var is $&#123;var&#125;"</div><div class="line"></div><div class="line">unset var</div><div class="line">echo $&#123;var:+"This is default value"&#125;</div><div class="line">echo "3 - Value of var is $var"</div><div class="line"></div><div class="line">var="Prefix"</div><div class="line">echo $&#123;var:+"This is default value"&#125;</div><div class="line">echo "4 - Value of var is $var"</div><div class="line"></div><div class="line">echo $&#123;var:?"Print this message"&#125;</div><div class="line">echo "5 - Value of var is $&#123;var&#125;"</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Variable is not set</div><div class="line">1 - Value of var is</div><div class="line">Variable is not set</div><div class="line">2 - Value of var is Variable is not set</div><div class="line"></div><div class="line">3 - Value of var is</div><div class="line">This is default value</div><div class="line">4 - Value of var is Prefix</div><div class="line">Prefix</div><div class="line">5 - Value of var is Prefix</div></pre></td></tr></table></figure>
<h1 id="Shell运算符：Shell算数运算符、关系运算符、布尔运算符、字符串运算符等"><a href="#Shell运算符：Shell算数运算符、关系运算符、布尔运算符、字符串运算符等" class="headerlink" title="Shell运算符：Shell算数运算符、关系运算符、布尔运算符、字符串运算符等**"></a><strong>Shell运算符：Shell算数运算符、关系运算符、布尔运算符、字符串运算符等<em>**</em></strong></h1><p>Bash 支持很多运算符，包括算数运算符、关系运算符、布尔运算符、字符串运算符和文件测试运算符。<br>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。<br>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。<br>例如，两个数相加：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line">val=`expr 2 + 2`</div><div class="line">echo "Total value : $val"</div></pre></td></tr></table></figure>
<p>运行脚本输出：</p>
<p><code>Total value : 4</code></p>
<p>两点注意：</p>
<p>· 表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</p>
<p>· 完整的表达式要被(``)包含，注意这个字符不是常用的单引号，在 Esc 键下边。</p>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符**"></a><strong>算术运算符<em>**</em></strong></h2><p>先来看一个使用算术运算符的例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"><span class="meta">#</span> 加法</div><div class="line">a=10</div><div class="line">b=20</div><div class="line">val=`expr $a + $b`</div><div class="line">echo "a + b : $val"</div><div class="line"><span class="meta">#</span> 减法</div><div class="line">val=`expr $a - $b`</div><div class="line">echo "a - b : $val"</div><div class="line"><span class="meta">#</span> 乘法</div><div class="line">val=`expr $a \* $b`</div><div class="line">echo "a * b : $val"</div><div class="line"><span class="meta">#</span> 除法</div><div class="line">val=`expr $b / $a`</div><div class="line">echo "b / a : $val"</div><div class="line"><span class="meta">#</span> 取余</div><div class="line">val=`expr $b % $a`</div><div class="line">echo "b % a : $val"</div><div class="line"><span class="meta">#</span> 相等</div><div class="line">if [ $a == $b ]</div><div class="line">then</div><div class="line">   echo "a is equal to b"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 不相等</div><div class="line">if [ $a != $b ]</div><div class="line">then</div><div class="line">   echo "a is not equal to b"</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a + b : 30</div><div class="line">a - b : -10</div><div class="line">a * b : 200</div><div class="line">b / a : 2</div><div class="line">b % a : 0</div><div class="line">a is not equal to b</div></pre></td></tr></table></figure>
<p>注意：</p>
<p>· 乘号(<code>*</code>)前边必须加反斜杠(<code>\</code>)才能实现乘法运算；</p>
<p>· <code>if...then...fi</code>是条件语句，后续将会讲解。</p>
<table>
<thead>
<tr>
<th>算术运算符列表</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>运算符<em>**</em></strong></td>
<td><strong>说明<em>**</em></strong></td>
<td><strong>举例<em>**</em></strong></td>
</tr>
<tr>
<td>+</td>
<td>加法</td>
<td><code>expr $a + $b</code> 结果为 30。</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td><code>expr $a - $b</code> 结果为 10。</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td><code>expr $a \* $b</code> 结果为  200。</td>
</tr>
<tr>
<td>/</td>
<td>除法</td>
<td><code>expr $b / $a</code> 结果为 2。</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td><code>expr $b % $a</code> 结果为 0。</td>
</tr>
<tr>
<td>=</td>
<td>赋值</td>
<td>a=$b 将把变量 b 的值赋给 a。</td>
</tr>
<tr>
<td>==</td>
<td>相等。用于比较两个数字，相同则返回 true。</td>
<td>[ $a == $b ] 返回 false。</td>
</tr>
<tr>
<td>!=</td>
<td>不相等。用于比较两个数字，不相同则返回 true。</td>
<td>[ $a != $b ] 返回 true。</td>
</tr>
</tbody>
</table>
<p>注意：条件表达式要放在方括号之间，并且要有空格，例如<code>[$a==$b]</code>是错误的，必须写成<code>[ $a == $b ]</code>。</p>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符**"></a><strong>关系运算符<em>**</em></strong></h2><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。<br>先来看一个关系运算符的例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"></div><div class="line">a=10</div><div class="line">b=20</div><div class="line"><span class="meta">#</span> 相等</div><div class="line">if [ $a -eq $b ]</div><div class="line">then</div><div class="line">   echo "$a -eq $b : a is equal to b"</div><div class="line">else</div><div class="line">   echo "$a -eq $b: a is not equal to b"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 不相等</div><div class="line">if [ $a -ne $b ]</div><div class="line">then</div><div class="line">   echo "$a -ne $b: a is not equal to b"</div><div class="line">else</div><div class="line">   echo "$a -ne $b : a is equal to b"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 大于</div><div class="line">if [ $a -gt $b ]</div><div class="line">then</div><div class="line">   echo "$a -gt $b: a is greater than b"</div><div class="line">else</div><div class="line">   echo "$a -gt $b: a is not greater than b"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 小于</div><div class="line">if [ $a -lt $b ]</div><div class="line">then</div><div class="line">   echo "$a -lt $b: a is less than b"</div><div class="line">else</div><div class="line">   echo "$a -lt $b: a is not less than b"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 大于等于</div><div class="line">if [ $a -ge $b ]</div><div class="line">then</div><div class="line">   echo "$a -ge $b: a is greater or  equal to b"</div><div class="line">else</div><div class="line">   echo "$a -ge $b: a is not greater or equal to b"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 小于等于</div><div class="line">if [ $a -le $b ]</div><div class="line">then</div><div class="line">   echo "$a -le $b: a is less or  equal to b"</div><div class="line">else</div><div class="line">   echo "$a -le $b: a is not less or equal to b"</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">10 -eq 20: a is not equal to b</div><div class="line">10 -ne 20: a is not equal to b</div><div class="line">10 -gt 20: a is not greater than b</div><div class="line">10 -lt 20: a is less than b</div><div class="line">10 -ge 20: a is not greater or equal to b</div><div class="line">10 -le 20: a is less or  equal to b</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>关系运算符列表</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>运算符<em>**</em></strong></td>
<td><strong>说明<em>**</em></strong></td>
<td><strong>举例<em>**</em></strong></td>
</tr>
<tr>
<td>-eq</td>
<td>检测两个数是否相等，相等返回 true。</td>
<td><code>[ $a -eq $b ]</code>返回 true。</td>
</tr>
<tr>
<td>-ne</td>
<td>检测两个数是否相等，不相等返回 true。</td>
<td><code>[ $a -ne $b ]</code>返回 true。</td>
</tr>
<tr>
<td>-gt</td>
<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>
<td><code>[ $a -gt $b ]</code>返回 false。</td>
</tr>
<tr>
<td>-lt</td>
<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>
<td><code>[ $a -lt $b ]</code>返回 true。</td>
</tr>
<tr>
<td>-ge</td>
<td>检测左边的数是否大等于右边的，如果是，则返回 true。</td>
<td><code>[ $a -ge $b ]</code> 返回 false。</td>
</tr>
<tr>
<td>-le</td>
<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>
<td><code>[ $a -le $b ]</code>返回 true。</td>
</tr>
</tbody>
</table>
<h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符**"></a><strong>布尔运算符<em>**</em></strong></h2><p>先来看一个布尔运算符的例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"></div><div class="line">a=10</div><div class="line">b=20</div><div class="line"></div><div class="line">if [ $a != $b ]</div><div class="line">then</div><div class="line">   echo "$a != $b : a is not equal to b"</div><div class="line">else</div><div class="line">   echo "$a != $b: a is equal to b"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> -a 与运算 and</div><div class="line">if [ $a -lt 100 -a $b -gt 15 ]</div><div class="line">then</div><div class="line">   echo "$a -lt 100 -a $b -gt 15 : returns true"</div><div class="line">else</div><div class="line">   echo "$a -lt 100 -a $b -gt 15 : returns false"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> -o 或运算 or</div><div class="line">if [ $a -lt 100 -o $b -gt 100 ]</div><div class="line">then</div><div class="line">   echo "$a -lt 100 -o $b -gt 100 : returns true"</div><div class="line">else</div><div class="line">   echo "$a -lt 100 -o $b -gt 100 : returns false"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> -o 或运算 or</div><div class="line">if [ $a -lt 5 -o $b -gt 100 ]</div><div class="line">then</div><div class="line">   echo "$a -lt 100 -o $b -gt 100 : returns true"</div><div class="line">else</div><div class="line">   echo "$a -lt 100 -o $b -gt 100 : returns false"</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">10 != 20 : a is not equal to b</div><div class="line">10 -lt 100 -a 20 -gt 15 : returns true</div><div class="line">10 -lt 100 -o 20 -gt 100 : returns true</div><div class="line">10 -lt 5 -o 20 -gt 100 : returns false</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>布尔运算符列表</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>运算符<em>**</em></strong></td>
<td><strong>说明<em>**</em></strong></td>
<td><strong>举例<em>**</em></strong></td>
</tr>
<tr>
<td>!</td>
<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>
<td><code>[ ! false ]</code>返回 true。</td>
</tr>
<tr>
<td>-o</td>
<td>或运算，有一个表达式为 true 则返回 true。</td>
<td><code>[ $a -lt 20 -o $b -gt 100 ]</code>返回 true。</td>
</tr>
<tr>
<td>-a</td>
<td>与运算，两个表达式都为 true 才返回 true。</td>
<td><code>[ $a -lt 20 -a $b -gt 100 ]</code> 返回 false。</td>
</tr>
</tbody>
</table>
<h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符**"></a><strong>字符串运算符<em>**</em></strong></h2><p>先来看一个例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"></div><div class="line">a="abc"</div><div class="line">b="efg"</div><div class="line"><span class="meta">#</span> 相等返回true</div><div class="line">if [ $a = $b ]</div><div class="line">then</div><div class="line">   echo "$a = $b : a is equal to b"</div><div class="line">else</div><div class="line">   echo "$a = $b: a is not equal to b"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 不相等返回true</div><div class="line">if [ $a != $b ]</div><div class="line">then</div><div class="line">   echo "$a != $b : a is not equal to b"</div><div class="line">else</div><div class="line">   echo "$a != $b: a is equal to b"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> -z 长度为0返回true </div><div class="line">if [ -z $a ]</div><div class="line">then</div><div class="line">   echo "-z $a : string length is zero"</div><div class="line">else</div><div class="line">   echo "-z $a : string length is not zero"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> -n 长度不为0返回true </div><div class="line">if [ -n $a ]</div><div class="line">then</div><div class="line">   echo "-n $a : string length is not zero"</div><div class="line">else</div><div class="line">   echo "-n $a : string length is zero"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 检测字符串是否为空，不为空返回 true</div><div class="line">if [ $a ]</div><div class="line">then</div><div class="line">   echo "$a : string is not empty"</div><div class="line">else</div><div class="line">   echo "$a : string is empty"</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">abc = efg: a is not equal to b</div><div class="line">abc != efg : a is not equal to b</div><div class="line">-z abc : string length is not zero</div><div class="line">-n abc : string length is not zero</div><div class="line">abc : string is not empty</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>字符串运算符列表</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>运算符<em>**</em></strong></td>
<td><strong>说明<em>**</em></strong></td>
<td><strong>举例<em>**</em></strong></td>
</tr>
<tr>
<td>=</td>
<td>检测两个字符串是否相等，相等返回 true。</td>
<td><code>[ $a = $b ]</code>返回 false。</td>
</tr>
<tr>
<td>!=</td>
<td>检测两个字符串是否相等，不相等返回 true。</td>
<td><code>[ $a != $b ]</code>返回 true。</td>
</tr>
<tr>
<td>-z</td>
<td>检测字符串长度是否为0，为0返回 true。</td>
<td><code>[ -z $a ]</code>返回 false。</td>
</tr>
<tr>
<td>-n</td>
<td>检测字符串长度是否为0，不为0返回 true。</td>
<td><code>[ -z $a ]</code> 返回 true。</td>
</tr>
<tr>
<td>str</td>
<td>检测字符串是否为空，不为空返回 true。</td>
<td><code>[ $a ]</code>返回 true。</td>
</tr>
</tbody>
</table>
<h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符**"></a><strong>文件测试运算符<em>**</em></strong></h2><p>文件测试运算符用于检测 Unix 文件的各种属性。<br>例如，变量 <code>file</code> 表示文件<code>“/var/www/tutorialspoint/unix/test.sh”</code>，它的大小为<code>100</code>字节，具有 <code>rwx</code> 权限。下面的代码，将检测该文件的各种属性：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"></div><div class="line">file="/var/www/tutorialspoint/unix/test.sh"</div><div class="line"><span class="meta">#</span> 检测文件是否可读 read</div><div class="line">if [ -r $file ]</div><div class="line">then</div><div class="line">   echo "File has read access"</div><div class="line">else</div><div class="line">   echo "File does not have read access"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 检测文件是否可写 white</div><div class="line">if [ -w $file ]</div><div class="line">then</div><div class="line">   echo "File has write permission"</div><div class="line">else</div><div class="line">   echo "File does not have write permission"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 检测文件是否可执行</div><div class="line">if [ -x $file ]</div><div class="line">then</div><div class="line">   echo "File has execute permission"</div><div class="line">else</div><div class="line">   echo "File does not have execute permission"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 检测文件是否是普通文件（既不是目录，也不是设备文件） file</div><div class="line">if [ -f $file ]</div><div class="line">then</div><div class="line">   echo "File is an ordinary file"</div><div class="line">else</div><div class="line">   echo "This is sepcial file"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 检测文件是否是目录 dir</div><div class="line">if [ -d $file ]</div><div class="line">then</div><div class="line">   echo "File is a directory"</div><div class="line">else</div><div class="line">   echo "This is not a directory"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 检测文件是否为空（文件大小是否大于0）space</div><div class="line">if [ -s $file ]</div><div class="line">then</div><div class="line">   echo "File size is zero"</div><div class="line">else</div><div class="line">   echo "File size is not zero"</div><div class="line">fi</div><div class="line"><span class="meta">#</span> 检测文件（包括目录）是否存在</div><div class="line">if [ -e $file ]</div><div class="line">then</div><div class="line">   echo "File exists"</div><div class="line">else</div><div class="line">   echo "File does not exist"</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">File has read access</div><div class="line">File has write permission</div><div class="line">File has execute permission</div><div class="line">File is an ordinary file</div><div class="line">This is not a directory</div><div class="line">File size is zero</div><div class="line">File exists</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>文件测试运算符列表</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>操作符<em>**</em></strong></td>
<td><strong>说明<em>**</em></strong></td>
<td><strong>举例<em>**</em></strong></td>
</tr>
<tr>
<td>-b file</td>
<td>检测文件是否是块设备文件，如果是，则返回 true。</td>
<td><code>[ -b $file ]</code> 返回 false。</td>
</tr>
<tr>
<td>-c file</td>
<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>
<td><code>[ -b $file ]</code> 返回 false。</td>
</tr>
<tr>
<td>-d file</td>
<td>检测文件是否是目录，如果是，则返回 true。</td>
<td><code>[ -d $file ]</code> 返回 false。</td>
</tr>
<tr>
<td>-f file</td>
<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>
<td><code>[ -f $file ]</code> 返回 true。</td>
</tr>
<tr>
<td>-g file</td>
<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>
<td><code>[ -g $file ]</code> 返回 false。</td>
</tr>
<tr>
<td>-k file</td>
<td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>
<td><code>[ -k $file ]</code> 返回 false。</td>
</tr>
<tr>
<td>-p file</td>
<td>检测文件是否是具名管道，如果是，则返回 true。</td>
<td><code>[ -p $file ]</code>返回 false。</td>
</tr>
<tr>
<td>-u file</td>
<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>
<td><code>[ -u $file ]</code> 返回 false。</td>
</tr>
<tr>
<td>-r file</td>
<td>检测文件是否可读，如果是，则返回 true。</td>
<td><code>[ -r $file ]</code> 返回 true。</td>
</tr>
<tr>
<td>-w file</td>
<td>检测文件是否可写，如果是，则返回 true。</td>
<td><code>[ -w $file ]</code> 返回 true。</td>
</tr>
<tr>
<td>-x file</td>
<td>检测文件是否可执行，如果是，则返回 true。</td>
<td><code>[ -x $file ]</code>返回 true。</td>
</tr>
<tr>
<td>-s file</td>
<td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>
<td><code>[ -s $file ]</code>返回 true。</td>
</tr>
<tr>
<td>-e file</td>
<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>
<td><code>[ -e $file ]</code> 返回 true。</td>
</tr>
</tbody>
</table>
<p> <strong>Shell注释<em>**</em></strong></p>
<p>以“#”开头的行就是注释，会被解释器忽略。<br>sh里没有多行注释，只能每一行加一个#号。只能像这样：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>--------------------------------------------</div><div class="line"><span class="meta">#</span> 这是一个自动打ipa的脚本，基于webfrogs的ipa-build书写：</div><div class="line"><span class="meta">#</span> https://github.com/webfrogs/xcode_shell/blob/master/ipa-build</div><div class="line"><span class="meta">#</span> 功能：自动为etao ios app打包，产出物为14个渠道的ipa包</div><div class="line"><span class="meta">#</span> 特色：全自动打包，不需要输入任何参数</div><div class="line"><span class="meta">#</span>--------------------------------------------</div><div class="line"><span class="meta">#</span>#### 用户配置区 开始 #####</div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span> 项目根目录，推荐将此脚本放在项目的根目录，这里就不用改了</div><div class="line"><span class="meta">#</span> 应用名，确保和Xcode里Product下的target_name.app名字一致</div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span>#### 用户配置区 结束  #####</div></pre></td></tr></table></figure>
<p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p>
<h1 id="Shell字符串"><a href="#Shell字符串" class="headerlink" title="Shell字符串**"></a><strong>Shell字符串<em>**</em></strong></h1><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p>
<h2 id="单引号"><a href="#单引号" class="headerlink" title="单引号**"></a><strong>单引号<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str='this is a string'</div></pre></td></tr></table></figure>
<p>单引号字符串的限制：</p>
<p>· 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</p>
<p>· 单引号字串中不能出现单引号（对单引号使用转义符后也不行）。</p>
<h2 id="双引号"><a href="#双引号" class="headerlink" title="双引号**"></a><strong>双引号<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">your_name='qinjx'</div><div class="line">str="Hello, I know your are \"$your_name\"! \n"</div></pre></td></tr></table></figure>
<p>双引号的优点：</p>
<p>· 双引号里可以有变量</p>
<p>· 双引号里可以出现转义字符</p>
<h2 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串**"></a><strong>拼接字符串<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">your_name="qinjx"</div><div class="line">greeting="hello, "$your_name" !"</div><div class="line">greeting_1="hello, $&#123;your_name&#125; !"</div><div class="line"></div><div class="line">echo $greeting $greeting_1</div></pre></td></tr></table></figure>
<h2 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度**"></a><strong>获取字符串长度<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">string="abcd"</div><div class="line">echo $&#123;#string&#125; #输出 4</div></pre></td></tr></table></figure>
<h2 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串**"></a><strong>提取子字符串<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">string="alibaba is a great company"</div><div class="line">echo $&#123;string:1:4&#125; #输出liba</div></pre></td></tr></table></figure>
<h2 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串**"></a><strong>查找子字符串<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">string="alibaba is a great company"</div><div class="line">echo `expr index "$string" is`</div></pre></td></tr></table></figure>
<h1 id="Shell数组：shell数组的定义、数组长度"><a href="#Shell数组：shell数组的定义、数组长度" class="headerlink" title="Shell数组：shell数组的定义、数组长度**"></a><strong>Shell数组：shell数组的定义、数组长度<em>**</em></strong></h1><p>Shell在编程方面比Windows批处理强大很多，无论是在循环、运算。<br>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。类似与C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。</p>
<h2 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组**"></a><strong>定义数组<em>**</em></strong></h2><p>在Shell中，用括号来表示数组，数组元素用“空格”符号分割开。定义数组的一般形式为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array_name=(value1 ... valuen)</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array_name=(value0 value1 value2 value3)</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">array_name=(</div><div class="line">value0</div><div class="line">value1</div><div class="line">value2</div><div class="line">value3</div><div class="line">)</div></pre></td></tr></table></figure>
<p>还可以单独定义数组的各个分量：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">array_name[0]=value0</div><div class="line">array_name[1]=value1</div><div class="line">array_name[2]=value2</div></pre></td></tr></table></figure>
<p>可以不使用连续的下标，而且下标的范围没有限制。</p>
<h2 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组**"></a><strong>读取数组<em>**</em></strong></h2><p>读取数组元素值的一般格式是：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>&#123;array_name[index]&#125;</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">valuen=$&#123;array_name[2]&#125;</div></pre></td></tr></table></figure>
<p>举个例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"></div><div class="line">NAME[0]="Zara"</div><div class="line">NAME[1]="Qadir"</div><div class="line">NAME[2]="Mahnaz"</div><div class="line">NAME[3]="Ayan"</div><div class="line">NAME[4]="Daisy"</div><div class="line">echo "First Index: $&#123;NAME[0]&#125;"</div><div class="line">echo "Second Index: $&#123;NAME[1]&#125;"</div></pre></td></tr></table></figure>
<p>运行脚本，输出：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>./test.sh</div><div class="line">First Index: Zara</div><div class="line">Second Index: Qadir</div></pre></td></tr></table></figure>
<p>使用@ 或 * 可以获取数组中的所有元素，例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>&#123;array_name[*]&#125;</div><div class="line"><span class="meta">$</span>&#123;array_name[@]&#125;</div></pre></td></tr></table></figure>
<p>举个例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"></div><div class="line">NAME[0]="Zara"</div><div class="line">NAME[1]="Qadir"</div><div class="line">NAME[2]="Mahnaz"</div><div class="line">NAME[3]="Ayan"</div><div class="line">NAME[4]="Daisy"</div><div class="line">echo "First Method: $&#123;NAME[*]&#125;"</div><div class="line">echo "Second Method: $&#123;NAME[@]&#125;"</div></pre></td></tr></table></figure>
<p>运行脚本，输出：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>./test.sh</div><div class="line">First Method: Zara Qadir Mahnaz Ayan Daisy</div><div class="line">Second Method: Zara Qadir Mahnaz Ayan Daisy</div></pre></td></tr></table></figure>
<h2 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度**"></a><strong>获取数组的长度<em>**</em></strong></h2><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 取得数组元素的个数</div><div class="line">length=$&#123;#array_name[@]&#125;</div><div class="line"><span class="meta">#</span> 或者</div><div class="line">length=$&#123;#array_name[*]&#125;</div><div class="line"><span class="meta">#</span> 取得数组单个元素的长度</div><div class="line">lengthn=$&#123;#array_name[n]&#125;</div></pre></td></tr></table></figure>
<h1 id="Shell-echo命令"><a href="#Shell-echo命令" class="headerlink" title="Shell echo命令**"></a><strong>Shell echo命令<em>**</em></strong></h1><p><code>echo</code>是Shell的一个内部指令，用于在屏幕上打印出指定的字符串。命令格式：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo arg</div></pre></td></tr></table></figure>
<p>您可以使用<code>echo</code>实现更复杂的输出格式控制。</p>
<h2 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符**"></a><strong>显示转义字符<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo "\"It is a test\""</div></pre></td></tr></table></figure>
<p>结果将是：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"It is a test"</div></pre></td></tr></table></figure>
<p>双引号也可以省略。</p>
<h2 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量**"></a><strong>显示变量<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name="OK"</div><div class="line">echo "$name It is a test"</div></pre></td></tr></table></figure>
<p>结果将是：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OK It is a test</div></pre></td></tr></table></figure>
<p>同样双引号也可以省略。<br>如果变量与其它字符相连的话，需要使用大括号（<code>{ }</code>）：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mouth=8</div><div class="line">echo "$&#123;mouth&#125;-1-2009"</div></pre></td></tr></table></figure>
<p>结果将是：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">8-1-2009</div></pre></td></tr></table></figure>
<h2 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行**"></a><strong>显示换行<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo "OK!\n"</div><div class="line">echo "It is a test"</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OK!</div><div class="line">It is a test</div></pre></td></tr></table></figure>
<h2 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行**"></a><strong>显示不换行<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo "OK!\c"</div><div class="line">echo "It is a test"</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OK!It si a test</div></pre></td></tr></table></figure>
<h2 id="显示结果重定向至文件"><a href="#显示结果重定向至文件" class="headerlink" title="显示结果重定向至文件**"></a><strong>显示结果重定向至文件<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo "It is a test" &gt; myfile</div></pre></td></tr></table></figure>
<h2 id="原样输出字符串"><a href="#原样输出字符串" class="headerlink" title="原样输出字符串**"></a><strong>原样输出字符串<em>**</em></strong></h2><p>若需要原样输出字符串（不进行转义），请使用单引号。例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo '$name\"'</div></pre></td></tr></table></figure>
<h2 id="显示命令执行结果"><a href="#显示命令执行结果" class="headerlink" title="显示命令执行结果**"></a><strong>显示命令执行结果<em>**</em></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo `date`</div></pre></td></tr></table></figure>
<p>结果将显示当前日期</p>
<p><strong>从上面可看出，双引号可有可无，单引号主要用在原样输出中。</strong></p>
<h1 id="shell-printf命令：格式化输出语句"><a href="#shell-printf命令：格式化输出语句" class="headerlink" title="shell printf命令：格式化输出语句**"></a><strong>shell printf命令：格式化输出语句<em>**</em></strong></h1><p><code>printf</code> 命令用于格式化输出， 是<code>echo</code>命令的增强版。它是C语言<code>printf()</code>库函数的一个有限的变形，并且在语法上有些不同。<br>注意：<code>printf</code> 由 POSIX 标准所定义，移植性要比 <code>echo</code> 好。<br>如同 <code>echo</code> 命令，<code>printf</code>命令也可以输出简单的字符串：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>printf "Hello, Shell\n"</div><div class="line">Hello, Shell</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<p><code>printf</code> 不像<code>echo</code> 那样会自动换行，必须显式添加换行符(<code>\n</code>)。<br><code>printf</code>命令的语法：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printf  format-string  [arguments...]</div></pre></td></tr></table></figure>
<p><code>format-string</code>为格式控制字符串，<code>arguments</code>为参数列表。<br><code>printf()</code>在C语言入门教程中已经讲到，功能和用法与 <code>printf</code> 命令类似，请查看：<a href="http://c.biancheng.net/cpp/html/33.html" target="_blank" rel="external">C语言格式输出函数printf()详解</a><br>这里仅说明与C语言<code>printf()</code>函数的不同：</p>
<p>· <code>printf</code> 命令不用加括号</p>
<p>· <code>format-string</code> 可以没有引号，但最好加上，单引号双引号均可。</p>
<p>· 参数多于格式控制符(<code>%</code>)时，<code>format-string</code> 可以重用，可以将所有参数都转换。</p>
<p>· <code>arguments</code> 使用空格分隔，不用逗号。</p>
<p>请看下面的例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> format-string为双引号</div><div class="line"><span class="meta">$</span> printf "%d %s\n" 1 "abc"</div><div class="line">1 abc</div><div class="line"><span class="meta">#</span> 单引号与双引号效果一样 </div><div class="line"><span class="meta">$</span> printf '%d %s\n' 1 "abc" </div><div class="line">1 abc</div><div class="line"><span class="meta">#</span> 没有引号也可以输出</div><div class="line"><span class="meta">$</span> printf %s abcdef</div><div class="line">abcdef</div><div class="line"><span class="meta">#</span> 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</div><div class="line"><span class="meta">$</span> printf %s abc def</div><div class="line">abcdef</div><div class="line"><span class="meta">$</span> printf "%s\n" abc def</div><div class="line">abc</div><div class="line">def</div><div class="line"><span class="meta">$</span> printf "%s %s %s\n" a b c d e f g h i j</div><div class="line">a b c</div><div class="line">d e f</div><div class="line">g h i</div><div class="line">j</div><div class="line"><span class="meta">#</span> 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</div><div class="line"><span class="meta">$</span> printf "%s and %d \n" </div><div class="line">and 0</div><div class="line"><span class="meta">#</span> 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0</div><div class="line"><span class="meta">$</span> printf "The first program always prints'%s,%d\n'" Hello Shell</div><div class="line">-bash: printf: Shell: invalid number</div><div class="line">The first program always prints 'Hello,0'</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<p>注意，根据POSIX标准，浮点格式<code>%e</code>、<code>%E</code>、<code>%f</code>、<code>%g</code>与<code>%G</code>是“不需要被支持”。这是因为awk支持浮点预算，且有它自己的<code>printf</code>语句。这样Shell程序中需要将浮点数值进行格式化的打印时，可使用小型的awk程序实现。然而，内建于bash、ksh93和zsh中的<code>printf</code>命令都支持浮点格式。</p>
<h1 id="Shell-if-else语句"><a href="#Shell-if-else语句" class="headerlink" title="Shell if else语句**"></a><strong>Shell if else语句<em>**</em></strong></h1><p>if语句通过关系运算符判断表达式的真假来决定执行哪个分支。Shell 有三种if … else 语句：</p>
<p>· if … fi 语句；</p>
<p>· if … else … fi 语句；</p>
<p>· if … elif … else … fi 语句。</p>
<h2 id="1-if-…-else-语句"><a href="#1-if-…-else-语句" class="headerlink" title="1) if … else 语句**"></a><strong>1) if … else 语句<em>**</em></strong></h2><p>if … else 语句的语法：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ expression ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression is true</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>如果 <code>expression</code> 返回 <code>true</code>，<code>then</code>后边的语句将会被执行；如果返回 <code>false</code>，不会执行任何语句。<br>最后必须以 <code>fi</code> 来结尾闭合 <code>if</code>，<code>fi</code> 就是 <code>if</code> 倒过来拼写，后面也会遇见。<br>注意：<code>expression</code> 和方括号(<code>[ ]</code>)之间必须有空格，否则会有语法错误。<br>举个例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"></div><div class="line">a=10</div><div class="line">b=20</div><div class="line"></div><div class="line">if [ $a == $b ]</div><div class="line">then</div><div class="line">   echo "a is equal to b"</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a != $b ]</div><div class="line">then</div><div class="line">   echo "a is not equal to b"</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a is not equal to b</div></pre></td></tr></table></figure>
<h2 id="2-if-…-else-…-fi-语句"><a href="#2-if-…-else-…-fi-语句" class="headerlink" title="2) if … else … fi 语句**"></a><strong>2) if … else … fi 语句<em>**</em></strong></h2><p>if … else … fi 语句的语法：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if [ expression ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression is true</div><div class="line">else</div><div class="line">   Statement(s) to be executed if expression is not true</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>如果 expression 返回 true，那么 then 后边的语句将会被执行；否则，执行 else 后边的语句。<br>举个例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"></div><div class="line">a=10</div><div class="line">b=20</div><div class="line"></div><div class="line">if [ $a == $b ]</div><div class="line">then</div><div class="line">   echo "a is equal to b"</div><div class="line">else</div><div class="line">   echo "a is not equal to b"</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a is not equal to b</div></pre></td></tr></table></figure>
<h2 id="3-if-…-elif-…-fi-语句"><a href="#3-if-…-elif-…-fi-语句" class="headerlink" title="3) if … elif … fi 语句**"></a><strong>3) if … elif … fi 语句<em>**</em></strong></h2><p>if … elif … fi 语句可以对多个条件进行判断，语法为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">if [ expression 1 ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression 1 is true</div><div class="line">elif [ expression 2 ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression 2 is true</div><div class="line">elif [ expression 3 ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression 3 is true</div><div class="line">else</div><div class="line">   Statement(s) to be executed if no expression is true</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>哪一个 expression 的值为 true，就执行哪个 expression 后面的语句；如果都为 false，那么不执行任何语句。<br>举个例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"></div><div class="line">a=10</div><div class="line">b=20</div><div class="line"></div><div class="line">if [ $a == $b ]</div><div class="line">then</div><div class="line">   echo "a is equal to b"</div><div class="line">elif [ $a -gt $b ]</div><div class="line">then</div><div class="line">   echo "a is greater than b"</div><div class="line">elif [ $a -lt $b ]</div><div class="line">then</div><div class="line">   echo "a is less than b"</div><div class="line">else</div><div class="line">   echo "None of the condition met"</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a is less than b</div></pre></td></tr></table></figure>
<p>if … else 语句也可以写成一行，以命令的方式来运行，像这样：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if test $[2*3] -eq $[1+5]; then echo 'The two numbers are equal!'; fi;</div></pre></td></tr></table></figure>
<p>if … else 语句也经常与 test 命令结合使用，如下所示：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">num1=$[2*3]</div><div class="line">num2=$[1+5]</div><div class="line">if test $[num1] -eq $[num2]</div><div class="line">then</div><div class="line">    echo 'The two numbers are equal!'</div><div class="line">else</div><div class="line">    echo 'The two numbers are not equal!'</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The two numbers are equal!</div></pre></td></tr></table></figure>
<p>test 命令用于检查某个条件是否成立，与方括号(<code>[ ]</code>)类似。</p>
<h1 id="Shell-test命令"><a href="#Shell-test命令" class="headerlink" title="Shell test命令**"></a><strong>Shell test命令<em>**</em></strong></h1><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p>
<h2 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试**"></a><strong>数值测试<em>**</em></strong></h2><table>
<thead>
<tr>
<th><strong>参数<em>**</em></strong></th>
<th><strong>说明<em>**</em></strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>-eq</td>
<td>等于则为真</td>
</tr>
<tr>
<td>-ne</td>
<td>不等于则为真</td>
</tr>
<tr>
<td>-gt</td>
<td>大于则为真</td>
</tr>
<tr>
<td>-ge</td>
<td>大于等于则为真</td>
</tr>
<tr>
<td>-lt</td>
<td>小于则为真</td>
</tr>
<tr>
<td>-le</td>
<td>小于等于则为真</td>
</tr>
</tbody>
</table>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">num1=100</div><div class="line">num2=100</div><div class="line">if test $[num1] -eq $[num2]</div><div class="line">then</div><div class="line">    echo 'The two numbers are equal!'</div><div class="line">else</div><div class="line">    echo 'The two numbers are not equal!'</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The two numbers are equal!</div></pre></td></tr></table></figure></p>
<h2 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试**"></a><strong>字符串测试<em>**</em></strong></h2><table>
<thead>
<tr>
<th><strong>参数<em>**</em></strong></th>
<th><strong>说明<em>**</em></strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于则为真</td>
</tr>
<tr>
<td>!=</td>
<td>不相等则为真</td>
</tr>
<tr>
<td>-z 字符串</td>
<td>字符串长度为0则为真</td>
</tr>
<tr>
<td>-n 字符串</td>
<td>字符串长度不为0则为真</td>
</tr>
</tbody>
</table>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">num1=100</div><div class="line">num2=100</div><div class="line">if test num1=num2</div><div class="line">then</div><div class="line">    echo 'The two strings are equal!'</div><div class="line">else</div><div class="line">    echo 'The two strings are not equal!'</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The two strings are equal!</div></pre></td></tr></table></figure></p>
<h2 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试**"></a><strong>文件测试<em>**</em></strong></h2><table>
<thead>
<tr>
<th><strong>参数<em>**</em></strong></th>
<th><strong>说明<em>**</em></strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>-e 文件名</td>
<td>如果文件存在则为真</td>
</tr>
<tr>
<td>-r 文件名</td>
<td>如果文件存在且可读则为真</td>
</tr>
<tr>
<td>-w 文件名</td>
<td>如果文件存在且可写则为真</td>
</tr>
<tr>
<td>-x 文件名</td>
<td>如果文件存在且可执行则为真</td>
</tr>
<tr>
<td>-s 文件名</td>
<td>如果文件存在且至少有一个字符则为真</td>
</tr>
<tr>
<td>-d 文件名</td>
<td>如果文件存在且为目录则为真</td>
</tr>
<tr>
<td>-f 文件名</td>
<td>如果文件存在且为普通文件则为真</td>
</tr>
<tr>
<td>-c 文件名</td>
<td>如果文件存在且为字符型特殊文件则为真</td>
</tr>
<tr>
<td>-b 文件名</td>
<td>如果文件存在且为块特殊文件则为真</td>
</tr>
</tbody>
</table>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd /bin</div><div class="line">if test -e ./bash</div><div class="line">then</div><div class="line">    echo 'The file already exists!'</div><div class="line">else</div><div class="line">    echo 'The file does not exists!'</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The file already exists!</div></pre></td></tr></table></figure></p>
<p>另外，Shell还提供了与(-a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：“!”最高，“-a”次之，“-o”最低。例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd /bin</div><div class="line">if test -e ./notFile -o ./bash</div><div class="line">then</div><div class="line">    echo 'One file exists at least!'</div><div class="line">else</div><div class="line">    echo 'Both dose not exists!'</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">One file exists at least!</div></pre></td></tr></table></figure></p>
<h1 id="Shell-case-esac语句"><a href="#Shell-case-esac语句" class="headerlink" title="Shell case esac语句**"></a><strong>Shell case esac语句<em>**</em></strong></h1><p>case … esac 与其他语言中的 switch … case 语句类似，是一种多分枝选择结构。<br>case 语句匹配一个值或一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">case 值 in</div><div class="line">模式1)</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    command3</div><div class="line">    ;;</div><div class="line">模式2）</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    command3</div><div class="line">    ;;</div><div class="line">*)</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    command3</div><div class="line">    ;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>case工作方式如上所示。取值后面必须为关键字 in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。;; 与其他语言中的 break 类似，意思是跳到整个 case 语句的最后。<br>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 <code>*</code> 捕获该值，再执行后面的命令。<br>下面的脚本提示输入1到4，与每一种模式进行匹配：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">echo 'Input a number between 1 to 4'</div><div class="line">echo 'Your number is:\c'</div><div class="line">read aNum</div><div class="line">case $aNum in</div><div class="line">    1)  echo 'You select 1'</div><div class="line">    ;;</div><div class="line">    2)  echo 'You select 2'</div><div class="line">    ;;</div><div class="line">    3)  echo 'You select 3'</div><div class="line">    ;;</div><div class="line">    4)  echo 'You select 4'</div><div class="line">    ;;</div><div class="line">    *)  echo 'You do not select a number between 1 to 4'</div><div class="line">    ;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>输入不同的内容，会有不同的结果，例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input a number between 1 to 4</div><div class="line">Your number is:3</div><div class="line">You select 3</div></pre></td></tr></table></figure>
<p>再举一个例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">option="$&#123;1&#125;"</div><div class="line">case $&#123;option&#125; in</div><div class="line">   -f) FILE="$&#123;2&#125;"</div><div class="line">      echo "File name is $FILE"</div><div class="line">      ;;</div><div class="line">   -d) DIR="$&#123;2&#125;"</div><div class="line">      echo "Dir name is $DIR"</div><div class="line">      ;;</div><div class="line">   *) </div><div class="line">      echo "`basename $&#123;0&#125;`:usage: [-f file] | [-d directory]"</div><div class="line">      exit 1 # Command to come out of the program with status 1</div><div class="line">      ;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>./test.sh</div><div class="line">test.sh: usage: [ -f filename ] | [ -d directory ]</div><div class="line"><span class="meta">$</span> ./test.sh -f index.htm</div><div class="line"><span class="meta">$</span> vi test.sh</div><div class="line"><span class="meta">$</span> ./test.sh -f index.htm</div><div class="line">File name is index.htm</div><div class="line"><span class="meta">$</span> ./test.sh -d unix</div><div class="line">Dir name is unix</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<h1 id="Shell-for循环"><a href="#Shell-for循环" class="headerlink" title="Shell for循环**"></a><strong>Shell for循环<em>**</em></strong></h1><p>与其他编程语言类似，Shell支持for循环。<br>for循环一般格式为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for 变量 in 列表</div><div class="line">do</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    ...</div><div class="line">    commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<p>列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。每循环一次，就将列表中的下一个值赋给变量。<br>in 列表是可选的，如果不用它，for 循环使用命令行的位置参数。<br>例如，顺序输出当前列表中的数字：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for loop in 1 2 3 4 5</div><div class="line">do</div><div class="line">    echo "The value is: $loop"</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">The value is: 1</div><div class="line">The value is: 2</div><div class="line">The value is: 3</div><div class="line">The value is: 4</div><div class="line">The value is: 5</div></pre></td></tr></table></figure>
<p>顺序输出字符串中的字符：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for str in 'This is a string'</div><div class="line">do</div><div class="line">    echo $str</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This is a string</div></pre></td></tr></table></figure>
<p>显示主目录下以 .bash 开头的文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">for FILE in $HOME/.bash*</div><div class="line">do</div><div class="line">   echo $FILE</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/root/.bash_history</div><div class="line">/root/.bash_logout</div><div class="line">/root/.bash_profile</div><div class="line">/root/.bashrc</div></pre></td></tr></table></figure>
<h1 id="Shell-while循环"><a href="#Shell-while循环" class="headerlink" title="Shell while循环**"></a><strong>Shell while循环<em>**</em></strong></h1><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">while command</div><div class="line">do</div><div class="line">   Statement(s) to be executed if command is true</div><div class="line">done</div></pre></td></tr></table></figure>
<p>命令执行完毕，控制返回循环顶部，从头开始直至测试条件为假。<br>以下是一个基本的while循环，测试条件是：如果COUNTER小于5，那么返回 true。COUNTER从0开始，每次循环处理时，COUNTER加1。运行上述脚本，返回数字1到5，然后终止。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">COUNTER=0</div><div class="line">while [ $COUNTER -lt 5 ]</div><div class="line">do</div><div class="line">    COUNTER='expr $COUNTER+1'</div><div class="line">    echo $COUNTER</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行脚本，输出：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td></tr></table></figure>
<p>while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按<code>Ctrl-D</code>结束循环。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">echo 'type &lt;CTRL-D&gt; to terminate'</div><div class="line">echo -n 'enter your most liked film: '</div><div class="line">while read FILM</div><div class="line">do</div><div class="line">    echo "Yeah! great film the $FILM"</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行脚本，输出类似下面：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type &lt;CTRL-D&gt; to terminate</div><div class="line">enter your most liked film: Sound of Music</div><div class="line">Yeah! great film the Sound of Music</div></pre></td></tr></table></figure>
<h1 id="Shell-until循环"><a href="#Shell-until循环" class="headerlink" title="Shell until循环**"></a><strong>Shell until循环<em>**</em></strong></h1><p>until 循环执行一系列命令直至条件为 true 时停止。until 循环与 while 循环在处理方式上刚好相反。一般while循环优于until循环，但在某些时候，也只是极少数情况下，until 循环更加有用。<br>until 循环格式为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">until command</div><div class="line">do</div><div class="line">   Statement(s) to be executed until command is true</div><div class="line">done</div></pre></td></tr></table></figure>
<p>command 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。<br>例如，使用 until 命令输出 0 ~ 9 的数字：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">a=0</div><div class="line"></div><div class="line">until [ ! $a -lt 10 ]</div><div class="line">do</div><div class="line">   echo $a</div><div class="line">   a=`expr $a + 1`</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td></tr></table></figure>
<h1 id="Shell-break和continue命令"><a href="#Shell-break和continue命令" class="headerlink" title="Shell break和continue命令**"></a><strong>Shell break和continue命令<em>**</em></strong></h1><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，像大多数编程语言一样，Shell也使用 break 和 continue 来跳出循环。</p>
<h2 id="break命令"><a href="#break命令" class="headerlink" title="break命令**"></a><strong>break命令<em>**</em></strong></h2><p>break命令允许跳出所有循环（终止执行后面的所有循环）。<br>下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，就要使用break命令。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">while :</div><div class="line">do</div><div class="line">    echo -n "Input a number between 1 to 5: "</div><div class="line">    read aNum</div><div class="line">    case $aNum in</div><div class="line">        1|2|3|4|5) echo "Your number is $aNum!"</div><div class="line">        ;;</div><div class="line">        *) echo "You do not select a number between 1 to 5, game is over!"</div><div class="line">            break</div><div class="line">        ;;</div><div class="line">    esac</div><div class="line">done</div></pre></td></tr></table></figure>
<p>在嵌套循环中，break 命令后面还可以跟一个整数，表示跳出第几层循环。例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">break n</div></pre></td></tr></table></figure>
<p>表示跳出第 n 层循环。<br>下面是一个嵌套循环的例子，如果 var1 等于 2，并且 var2 等于 0，就跳出循环：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">for var1 in 1 2 3</div><div class="line">do</div><div class="line">   for var2 in 0 5</div><div class="line">   do</div><div class="line">      if [ $var1 -eq 2 -a $var2 -eq 0 ]</div><div class="line">      then</div><div class="line">         break 2</div><div class="line">      else</div><div class="line">         echo "$var1 $var2"</div><div class="line">      fi</div><div class="line">   done</div><div class="line">done</div></pre></td></tr></table></figure>
<p>如上，break 2 表示直接跳出外层循环。运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 0</div><div class="line">1 5</div></pre></td></tr></table></figure>
<h2 id="continue命令"><a href="#continue命令" class="headerlink" title="continue命令**"></a><strong>continue命令<em>**</em></strong></h2><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。<br>对上面的例子进行修改：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line">while :</div><div class="line">do</div><div class="line">    echo -n "Input a number between 1 to 5: "</div><div class="line">    read aNum</div><div class="line">    case $aNum in</div><div class="line">        1|2|3|4|5) echo "Your number is $aNum!"</div><div class="line">        ;;</div><div class="line">        *) echo "You do not select a number between 1 to 5!"</div><div class="line">            continue</div><div class="line">            echo "Game is over!"</div><div class="line">        ;;</div><div class="line">    esac</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo "Game is over!"</div></pre></td></tr></table></figure>
<p>永远不会被执行。<br>同样，continue 后面也可以跟一个数字，表示跳出第几层循环。<br>再看一个 continue 的例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">NUMS="1 2 3 4 5 6 7"</div><div class="line"></div><div class="line">for NUM in $NUMS</div><div class="line">do</div><div class="line">   Q=`expr $NUM % 2`</div><div class="line">   if [ $Q -eq 0 ]</div><div class="line">   then</div><div class="line">      echo "Number is an even number!!"</div><div class="line">      continue</div><div class="line">   fi</div><div class="line">   echo "Found odd number"</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Found odd number</div><div class="line">Number is an even number!!</div><div class="line">Found odd number</div><div class="line">Number is an even number!!</div><div class="line">Found odd number</div><div class="line">Number is an even number!!</div><div class="line">Found odd number</div></pre></td></tr></table></figure>
<h1 id="Shell函数：Shell函数返回值、删除函数、在终端调用函数"><a href="#Shell函数：Shell函数返回值、删除函数、在终端调用函数" class="headerlink" title="Shell函数：Shell函数返回值、删除函数、在终端调用函数**"></a><strong>Shell函数：Shell函数返回值、删除函数、在终端调用函数<em>**</em></strong></h1><p>函数可以让我们将一个复杂功能划分成若干模块，让程序结构更加清晰，代码重复利用率更高。像其他编程语言一样，Shell 也支持函数。Shell 函数必须先定义后使用。<br>Shell 函数的定义格式如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function_name () &#123;</div><div class="line">    list of commands</div><div class="line">    [ return value ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你愿意，也可以在函数名前加上关键字 function：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function function_name () &#123;</div><div class="line">    list of commands</div><div class="line">    [ return value ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数返回值，可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。<br>Shell 函数返回值只能是整数，一般用来表示函数执行成功与否，0表示成功，其他值表示失败。如果 return 其他数据，比如一个字符串，往往会得到错误提示：“numeric argument required”。<br>如果一定要让函数返回字符串，那么可以先定义一个变量，用来接收函数的计算结果，脚本在需要的时候访问这个变量来获得函数返回值。<br>先来看一个例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"><span class="meta"></span></div><div class="line"># Define your function here</div><div class="line">Hello () &#123;</div><div class="line">   echo "Url is http://see.xidian.edu.cn/cpp/shell/"</div><div class="line">&#125;</div><div class="line"><span class="meta"></span></div><div class="line"># Invoke your function</div><div class="line">Hello</div></pre></td></tr></table></figure>
<p>运行结果：??</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>./test.sh</div><div class="line">Hello World</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<p>调用函数只需要给出函数名，不需要加括号。<br>再来看一个带有return语句的函数：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">funWithReturn()&#123;</div><div class="line">    echo "The function is to get the sum of two numbers..."</div><div class="line">    echo -n "Input first number: "</div><div class="line">    read aNum</div><div class="line">    echo -n "Input another number: "</div><div class="line">    read anotherNum</div><div class="line">    echo "The two numbers are $aNum and $anotherNum !"</div><div class="line">    return $(($aNum+$anotherNum))</div><div class="line">&#125;</div><div class="line">funWithReturn</div><div class="line"><span class="meta">#</span> Capture value returnd by last command</div><div class="line">ret=$?</div><div class="line">echo "The sum of two numbers is $ret !"</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">The function is to get the sum of two numbers...</div><div class="line">Input first number: 25</div><div class="line">Input another number: 50</div><div class="line">The two numbers are 25 and 50 !</div><div class="line">The sum of two numbers is 75 !</div></pre></td></tr></table></figure>
<p>函数返回值在调用该函数后通过 <code>$?</code>来获得。<br>再来看一个函数嵌套的例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"><span class="meta"></span></div><div class="line"># Calling one function from another</div><div class="line">number_one () &#123;</div><div class="line">   echo "Url_1 is http://see.xidian.edu.cn/cpp/shell/"</div><div class="line">   number_two</div><div class="line">&#125;</div><div class="line"></div><div class="line">number_two () &#123;</div><div class="line">   echo "Url_2 is http://see.xidian.edu.cn/cpp/u/xitong/"</div><div class="line">&#125;</div><div class="line"></div><div class="line">number_one</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Url_1 is http://see.xidian.edu.cn/cpp/shell/</div><div class="line">Url_2 is http://see.xidian.edu.cn/cpp/u/xitong/</div></pre></td></tr></table></figure>
<p>像删除变量一样，删除函数也可以使用 unset 命令，不过要加上<code>.f</code>选项，如下所示：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>unset .f function_name</div></pre></td></tr></table></figure>
<p>如果你希望直接从终端调用函数，可以将函数定义在主目录下的 .profile 文件，这样每次登录后，在命令提示符后面输入函数名字就可以立即调用。</p>
<h1 id="Shell函数参数"><a href="#Shell函数参数" class="headerlink" title="Shell函数参数**"></a><strong>Shell函数参数<em>**</em></strong></h1><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过<code>$n</code>的形式来获取参数的值，例如，<code>$1</code>表示第一个参数，<code>$2</code>表示第二个参数…<br>带参数的函数示例：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">funWithParam()&#123;</div><div class="line">    echo "The value of the first parameter is $1 !"</div><div class="line">    echo "The value of the second parameter is $2 !"</div><div class="line">    echo "The value of the tenth parameter is $10 !"</div><div class="line">    echo "The value of the tenth parameter is $&#123;10&#125; !"</div><div class="line">    echo "The value of the eleventh parameter is $&#123;11&#125; !"</div><div class="line">    echo "The amount of the parameters is $# !"  # 参数个数</div><div class="line">    echo "The string of the parameters is $* !"  # 传递给函数的所有参数</div><div class="line">&#125;</div><div class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</div></pre></td></tr></table></figure>
<p>运行脚本：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">The value of the first parameter is 1 !</div><div class="line">The value of the second parameter is 2 !</div><div class="line">The value of the tenth parameter is 10 !</div><div class="line">The value of the tenth parameter is 34 !</div><div class="line">The value of the eleventh parameter is 73 !</div><div class="line">The amount of the parameters is 12 !</div><div class="line">The string of the parameters is 1 2 3 4 5 6 7 8 9 34 73 !"</div></pre></td></tr></table></figure>
<p>注意，<code>$10</code> 不能获取第十个参数，获取第十个参数需要<code>${10}</code>。当<code>n&gt;=10</code>时，需要使用<code>${n}</code>来获取参数。<br>另外，还有几个特殊变量用来处理参数，前面已经提到：</p>
<table>
<thead>
<tr>
<th><strong>特殊变量<em>**</em></strong></th>
<th><strong>说明<em>**</em></strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$#</code></td>
<td>传递给函数的参数个数。</td>
</tr>
<tr>
<td><code>$*</code></td>
<td>显示所有传递给函数的参数。</td>
</tr>
<tr>
<td><code>$@</code></td>
<td>与<code>$*</code>相同，但是略有区别，请查看<a href="http://c.biancheng.net/cpp/view/2739.html" target="_blank" rel="external">Shell特殊变量</a>。</td>
</tr>
<tr>
<td><code>$?</code></td>
<td>函数的返回值。</td>
</tr>
</tbody>
</table>
<h1 id="Shell输入输出重定向：Shell-Here-Document，-dev-null文件"><a href="#Shell输入输出重定向：Shell-Here-Document，-dev-null文件" class="headerlink" title="Shell输入输出重定向：Shell Here Document，/dev/null文件**"></a><strong>Shell输入输出重定向：Shell Here Document，/dev/null文件<em>**</em></strong></h1><p>Unix 命令默认从标准输入设备(stdin)获取输入，将结果输出到标准输出设备(stdout)显示。一般情况下，标准输入设备就是键盘，标准输出设备就是终端，即显示器。</p>
<h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向**"></a><strong>输出重定向<em>**</em></strong></h2><p>命令的输出不仅可以是显示器，还可以很容易的转移向到文件，这被称为输出重定向。<br>命令输出重定向的语法为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> command &gt; file</div></pre></td></tr></table></figure>
<p>这样，输出到显示器的内容就可以被重定向到文件。<br>例如，下面的命令在显示器上不会看到任何输出：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> who &gt; users</div></pre></td></tr></table></figure>
<p>打开 users 文件，可以看到下面的内容：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cat users</div><div class="line">oko         tty01   Sep 12 07:30</div><div class="line">ai          tty15   Sep 12 13:32</div><div class="line">ruth        tty21   Sep 12 10:10</div><div class="line">pat         tty24   Sep 12 13:07</div><div class="line">steve       tty25   Sep 12 13:03</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<p>输出重定向会覆盖文件内容，请看下面的例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> echo line 1 &gt; users</div><div class="line"><span class="meta">$</span> cat users</div><div class="line">line 1</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<p>如果不希望文件内容被覆盖，可以使用 &gt;&gt; 追加到文件末尾，例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> echo line 2 &gt;&gt; users</div><div class="line"><span class="meta">$</span> cat users</div><div class="line">line 1</div><div class="line">line 2</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向**"></a><strong>输入重定向<em>**</em></strong></h2><p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">command &lt; file</div></pre></td></tr></table></figure>
<p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。<br>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。<br>例如，计算 users 文件中的行数，可以使用下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> wc -l users</div><div class="line">2 users</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<p>也可以将输入重定向到 users 文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> wc -l &lt; users</div><div class="line">2</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。</p>
<h2 id="重定向深入讲解"><a href="#重定向深入讲解" class="headerlink" title="重定向深入讲解**"></a><strong>重定向深入讲解<em>**</em></strong></h2><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p>
<p>· 标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</p>
<p>· 标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</p>
<p>· 标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</p>
<p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。<br>如果希望 stderr 重定向到 file，可以这样写：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>command 2 &gt; file</div></pre></td></tr></table></figure>
<p>如果希望 stderr 追加到 file 文件末尾，可以这样写：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>command 2 &gt;&gt; file</div></pre></td></tr></table></figure>
<p>2 表示标准错误文件(stderr)。<br>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>command &gt; file 2&gt;&amp;1</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>command &gt;&gt; file 2&gt;&amp;1</div></pre></td></tr></table></figure>
<p>如果希望对 stdin 和 stdout 都重定向，可以这样写：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>command &lt; file1 &gt;file2</div></pre></td></tr></table></figure>
<p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。 </p>
<table>
<thead>
<tr>
<th>全部可用的重定向命令列表</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>命令<em>**</em></strong></td>
<td><strong>说明<em>**</em></strong></td>
</tr>
<tr>
<td>command &gt; file</td>
<td>将输出重定向到 file。</td>
</tr>
<tr>
<td>command &lt; file</td>
<td>将输入重定向到 file。</td>
</tr>
<tr>
<td>command &gt;&gt; file</td>
<td>将输出以追加的方式重定向到 file。</td>
</tr>
<tr>
<td>n &gt; file</td>
<td>将文件描述符为 n 的文件重定向到 file。</td>
</tr>
<tr>
<td>n &gt;&gt; file</td>
<td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td>
</tr>
<tr>
<td>n &gt;&amp; m</td>
<td>将输出文件 m 和 n 合并。</td>
</tr>
<tr>
<td>n &lt;&amp; m</td>
<td>将输入文件 m 和 n 合并。</td>
</tr>
<tr>
<td>&lt;&lt; tag</td>
<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>
</tr>
</tbody>
</table>
<h2 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document**"></a><strong>Here Document<em>**</em></strong></h2><p>Here Document 目前没有统一的翻译，这里暂译为”嵌入文档“。Here Document 是 Shell 中的一种特殊的重定向方式，它的基本的形式如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">command &lt;&lt; delimiter</div><div class="line">    document</div><div class="line">delimiter</div></pre></td></tr></table></figure>
<p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。<br>注意：</p>
<p>· 结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</p>
<p>· 开始的delimiter前后的空格会被忽略掉。</p>
<p>下面的例子，通过 wc -l 命令计算 document 的行数：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>wc -l &lt;&lt; EOF</div><div class="line">    This is a simple lookup program</div><div class="line">    for good (and bad) restaurants</div><div class="line">    in Cape Town.</div><div class="line">EOF</div><div class="line">3</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<p>也可以 将 Here Document 用在脚本中，例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"></div><div class="line">cat &lt;&lt; EOF</div><div class="line">This is a simple lookup program</div><div class="line">for good (and bad) restaurants</div><div class="line">in Cape Town.</div><div class="line">EOF</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">This is a simple lookup program</div><div class="line">for good (and bad) restaurants</div><div class="line">in Cape Town.</div></pre></td></tr></table></figure>
<p>下面的脚本通过 vi 编辑器将 document 保存到 test.txt 文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"></div><div class="line">filename=test.txt</div><div class="line">vi $filename &lt;&lt;EndOfCommands</div><div class="line">i</div><div class="line">This file was created automatically from</div><div class="line">a shell script</div><div class="line">^[</div><div class="line">ZZ</div><div class="line">EndOfCommands</div></pre></td></tr></table></figure>
<p>运行脚本：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sh test.sh</div><div class="line">Vim: Warning: Input is not from a terminal</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<p>打开 test.txt，可以看到下面的内容：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cat test.txt</div><div class="line">This file was created automatically from</div><div class="line">a shell script</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<h2 id="dev-null-文件"><a href="#dev-null-文件" class="headerlink" title="/dev/null 文件**"></a><strong>/dev/null 文件<em>**</em></strong></h2><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> command &gt; /dev/null</div></pre></td></tr></table></figure>
<p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到”禁止输出“的效果。<br>如果希望屏蔽 stdout 和 stderr，可以这样写：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> command &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure></p>
<h1 id="Shell文件包含"><a href="#Shell文件包含" class="headerlink" title="Shell文件包含**"></a><strong>Shell文件包含<em>**</em></strong></h1><p>像其他语言一样，Shell 也可以包含外部脚本，将外部脚本的内容合并到当前脚本。<br>Shell 中包含脚本可以使用：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">. filename</div></pre></td></tr></table></figure>
<p>或<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source filename</div></pre></td></tr></table></figure></p>
<p>两种方式的效果相同，简单起见，一般使用点号(<code>.</code>)，但是注意点号(<code>.</code>)和文件名中间有一空格。<br>例如，创建两个脚本，一个是被调用脚本 subscript.sh，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url="http://see.xidian.edu.cn/cpp/view/2738.html"</div></pre></td></tr></table></figure>
<p>一个是主文件 main.sh，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line">. ./subscript.sh</div><div class="line">echo $url</div></pre></td></tr></table></figure>
<p>执行脚本：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>chomd +x main.sh</div><div class="line">./main.sh</div><div class="line">http://see.xidian.edu.cn/cpp/view/2738.html</div><div class="line"><span class="meta">$</span></div></pre></td></tr></table></figure>
<p>注意：被包含脚本不需要有执行权限。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Shell简介：什么是Shell，Shell命令的两种执行方式&quot;&gt;&lt;a href=&quot;#Shell简介：什么是Shell，Shell命令的两种执行方式&quot; class=&quot;headerlink&quot; title=&quot;Shell简介：什么是Shell，Shell命令的两种执行方
    
    </summary>
    
      <category term="shell" scheme="http://yoursite.com/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack3.0 配置</title>
    <link href="http://yoursite.com/2017/06/26/webpack-setting/"/>
    <id>http://yoursite.com/2017/06/26/webpack-setting/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-06-26T07:10:49.135Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">"./app/entry"</span>, <span class="comment">// string | object | array</span></div><div class="line">  entry: [<span class="string">"./app/entry1"</span>, <span class="string">"./app/entry2"</span>],</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">a</span>: <span class="string">"./app/entry-a"</span>,</div><div class="line">    <span class="attr">b</span>: [<span class="string">"./app/entry-b1"</span>, <span class="string">"./app/entry-b2"</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 这里应用程序开始执行</span></div><div class="line">  <span class="comment">// webpack 开始打包</span></div><div class="line"></div><div class="line">  output: &#123;</div><div class="line">    <span class="comment">// webpack 如何输出结果的相关选项</span></div><div class="line"></div><div class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>), <span class="comment">// string</span></div><div class="line">    <span class="comment">// 所有输出文件的目标路径</span></div><div class="line">    <span class="comment">// 必须是绝对路径（使用 Node.js 的 path 模块）</span></div><div class="line"></div><div class="line">    filename: <span class="string">"bundle.js"</span>, <span class="comment">// string</span></div><div class="line">    filename: <span class="string">"[name].js"</span>, <span class="comment">// 用于多个入口点(entry point)（出口点？）</span></div><div class="line">    filename: <span class="string">"[chunkhash].js"</span>, <span class="comment">// 用于长效缓存</span></div><div class="line">    <span class="comment">// 「入口分块(entry chunk)」的文件名模板（出口分块？）</span></div><div class="line"></div><div class="line">    publicPath: <span class="string">"/assets/"</span>, <span class="comment">// string</span></div><div class="line">    publicPath: <span class="string">""</span>,</div><div class="line">    <span class="attr">publicPath</span>: <span class="string">"https://cdn.example.com/"</span>,</div><div class="line">    <span class="comment">// 输出解析文件的目录，url 相对于 HTML 页面</span></div><div class="line"></div><div class="line">    library: <span class="string">"MyLibrary"</span>, <span class="comment">// string,</span></div><div class="line">    <span class="comment">// 导出库(exported library)的名称</span></div><div class="line"></div><div class="line">    libraryTarget: <span class="string">"umd"</span>, <span class="comment">// 通用模块定义</span></div><div class="line">    libraryTarget: <span class="string">"umd2"</span>, <span class="comment">// 通用模块定义</span></div><div class="line">    libraryTarget: <span class="string">"commonjs2"</span>, <span class="comment">// exported with module.exports</span></div><div class="line">    libraryTarget: <span class="string">"commonjs-module"</span>, <span class="comment">// 使用 module.exports 导出</span></div><div class="line">    libraryTarget: <span class="string">"commonjs"</span>, <span class="comment">// 作为 exports 的属性导出</span></div><div class="line">    libraryTarget: <span class="string">"amd"</span>, <span class="comment">// 使用 AMD 定义方法来定义</span></div><div class="line">    libraryTarget: <span class="string">"this"</span>, <span class="comment">// 在 this 上设置属性</span></div><div class="line">    libraryTarget: <span class="string">"var"</span>, <span class="comment">// 变量定义于根作用域下</span></div><div class="line">    libraryTarget: <span class="string">"assign"</span>, <span class="comment">// 盲分配(blind assignment)</span></div><div class="line">    libraryTarget: <span class="string">"window"</span>, <span class="comment">// 在 window 对象上设置属性</span></div><div class="line">    libraryTarget: <span class="string">"global"</span>, <span class="comment">// property set to global object</span></div><div class="line">    libraryTarget: <span class="string">"jsonp"</span>, <span class="comment">// jsonp wrapper</span></div><div class="line">    <span class="comment">// 导出库(exported library)的类型</span></div><div class="line"></div><div class="line">    <span class="comment">/* 高级输出配置（点击显示） */</span></div><div class="line"></div><div class="line">    pathinfo: <span class="literal">true</span>, <span class="comment">// boolean</span></div><div class="line">    <span class="comment">// 在生成代码时，引入相关的模块、导出、请求等有帮助的路径信息。</span></div><div class="line"></div><div class="line">    chunkFilename: <span class="string">"[id].js"</span>,</div><div class="line">    <span class="attr">chunkFilename</span>: <span class="string">"[chunkhash].js"</span>, <span class="comment">// 长效缓存(/guides/caching)</span></div><div class="line">    <span class="comment">// 「附加分块(additional chunk)」的文件名模板</span></div><div class="line"></div><div class="line">    jsonpFunction: <span class="string">"myWebpackJsonp"</span>, <span class="comment">// string</span></div><div class="line">    <span class="comment">// 用于加载分块的 JSONP 函数名</span></div><div class="line"></div><div class="line">    sourceMapFilename: <span class="string">"[file].map"</span>, <span class="comment">// string</span></div><div class="line">    sourceMapFilename: <span class="string">"sourcemaps/[file].map"</span>, <span class="comment">// string</span></div><div class="line">    <span class="comment">// 「source map 位置」的文件名模板</span></div><div class="line"></div><div class="line">    devtoolModuleFilenameTemplate: <span class="string">"webpack:///[resource-path]"</span>, <span class="comment">// string</span></div><div class="line">    <span class="comment">// 「devtool 中模块」的文件名模板</span></div><div class="line"></div><div class="line">    devtoolFallbackModuleFilenameTemplate: <span class="string">"webpack:///[resource-path]?[hash]"</span>, <span class="comment">// string</span></div><div class="line">    <span class="comment">// 「devtool 中模块」的文件名模板（用于冲突）</span></div><div class="line"></div><div class="line">    umdNamedDefine: <span class="literal">true</span>, <span class="comment">// boolean</span></div><div class="line">    <span class="comment">// 在 UMD 库中使用命名的 AMD 模块</span></div><div class="line"></div><div class="line">    crossOriginLoading: <span class="string">"use-credentials"</span>, <span class="comment">// 枚举</span></div><div class="line">    crossOriginLoading: <span class="string">"anonymous"</span>,</div><div class="line">    <span class="attr">crossOriginLoading</span>: <span class="literal">false</span>,</div><div class="line">    <span class="comment">// 指定运行时如何发出跨域请求问题</span></div><div class="line"></div><div class="line">    <span class="comment">/* 专家级输出配置（自行承担风险） */</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="comment">// 关于模块配置</span></div><div class="line"></div><div class="line">    rules: [</div><div class="line">      <span class="comment">// 模块规则（配置 loader、解析器等选项）</span></div><div class="line"></div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">        <span class="attr">include</span>: [</div><div class="line">          path.resolve(__dirname, <span class="string">"app"</span>)</div><div class="line">        ],</div><div class="line">        <span class="attr">exclude</span>: [</div><div class="line">          path.resolve(__dirname, <span class="string">"app/demo-files"</span>)</div><div class="line">        ],</div><div class="line">        <span class="comment">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></div><div class="line">        <span class="comment">// test 和 include 具有相同的作用，都是必须匹配选项</span></div><div class="line">        <span class="comment">// exclude 是必不匹配选项（优先于 test 和 include）</span></div><div class="line">        <span class="comment">// 最佳实践：</span></div><div class="line">        <span class="comment">// - 只在 test 和 文件名匹配 中使用正则表达式</span></div><div class="line">        <span class="comment">// - 在 include 和 exclude 中使用绝对路径数组</span></div><div class="line">        <span class="comment">// - 尽量避免 exclude，更倾向于使用 include</span></div><div class="line"></div><div class="line">        issuer: &#123; test, include, exclude &#125;,</div><div class="line">        <span class="comment">// issuer 条件（导入源）</span></div><div class="line"></div><div class="line">        enforce: <span class="string">"pre"</span>,</div><div class="line">        <span class="attr">enforce</span>: <span class="string">"post"</span>,</div><div class="line">        <span class="comment">// 标识应用这些规则，即使规则覆盖（高级选项）</span></div><div class="line"></div><div class="line">        loader: <span class="string">"babel-loader"</span>,</div><div class="line">        <span class="comment">// 应该应用的 loader，它相对上下文解析</span></div><div class="line">        <span class="comment">// 为了更清晰，`-loader` 后缀在 webpack 2 中不再是可选的</span></div><div class="line">        <span class="comment">// 查看 webpack 1 升级指南。</span></div><div class="line"></div><div class="line">        options: &#123;</div><div class="line">          <span class="attr">presets</span>: [<span class="string">"es2015"</span>]</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// loader 的可选项</span></div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="string">"\.html$"</span></div><div class="line"></div><div class="line">        use: [</div><div class="line">          <span class="comment">// 应用多个 loader 和选项</span></div><div class="line">          <span class="string">"htmllint-loader"</span>,</div><div class="line">          &#123;</div><div class="line">            <span class="attr">loader</span>: <span class="string">"html-loader"</span>,</div><div class="line">            <span class="attr">options</span>: &#123;</div><div class="line">              <span class="comment">/* ... */</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      &#123; <span class="attr">oneOf</span>: [ <span class="comment">/* rules */</span> ] &#125;,</div><div class="line">      <span class="comment">// 只使用这些嵌套规则之一</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">rules</span>: [ <span class="comment">/* rules */</span> ] &#125;,</div><div class="line">      <span class="comment">// 使用所有这些嵌套规则（合并可用条件）</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">and</span>: [ <span class="comment">/* 条件 */</span> ] &#125; &#125;,</div><div class="line">      <span class="comment">// 仅当所有条件都匹配时才匹配</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">or</span>: [ <span class="comment">/* 条件 */</span> ] &#125; &#125;,</div><div class="line">      &#123; <span class="attr">resource</span>: [ <span class="comment">/* 条件 */</span> ] &#125;,</div><div class="line">      <span class="comment">// 任意条件匹配时匹配（默认为数组）</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">not</span>: <span class="comment">/* 条件 */</span> &#125; &#125;</div><div class="line">      <span class="comment">// 条件不匹配时匹配</span></div><div class="line">    ],</div><div class="line"></div><div class="line">    <span class="comment">/* 高级模块配置（点击展示） */</span></div><div class="line"></div><div class="line">    noParse: [</div><div class="line">      <span class="regexp">/special-library\.js$/</span></div><div class="line">    ],</div><div class="line">    <span class="comment">// 不解析这里的模块</span></div><div class="line"></div><div class="line">    unknownContextRequest: <span class="string">"."</span>,</div><div class="line">    <span class="attr">unknownContextRecursive</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">unknownContextRegExp</span>: <span class="regexp">/^\.\/.*$/</span>,</div><div class="line">    <span class="attr">unknownContextCritical</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">exprContextRequest</span>: <span class="string">"."</span>,</div><div class="line">    <span class="attr">exprContextRegExp</span>: <span class="regexp">/^\.\/.*$/</span>,</div><div class="line">    <span class="attr">exprContextRecursive</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">exprContextCritical</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">wrappedContextRegExp</span>: <span class="regexp">/.*/</span>,</div><div class="line">    <span class="attr">wrappedContextRecursive</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">wrappedContextCritical</span>: <span class="literal">false</span>,</div><div class="line">    <span class="comment">// specifies default behavior for dynamic requests</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">resolve</span>: &#123;</div><div class="line">    <span class="comment">// 解析模块请求的选项</span></div><div class="line">    <span class="comment">// （不适用于对 loader 解析）</span></div><div class="line"></div><div class="line">    modules: [</div><div class="line">      <span class="string">"node_modules"</span>,</div><div class="line">      path.resolve(__dirname, <span class="string">"app"</span>)</div><div class="line">    ],</div><div class="line">    <span class="comment">// 用于查找模块的目录</span></div><div class="line"></div><div class="line">    extensions: [<span class="string">".js"</span>, <span class="string">".json"</span>, <span class="string">".jsx"</span>, <span class="string">".css"</span>],</div><div class="line">    <span class="comment">// 使用的扩展名</span></div><div class="line"></div><div class="line">    alias: &#123;</div><div class="line">      <span class="comment">// 模块别名列表</span></div><div class="line"></div><div class="line">      <span class="string">"module"</span>: <span class="string">"new-module"</span>,</div><div class="line">      <span class="comment">// 起别名："module" -&gt; "new-module" 和 "module/path/file" -&gt; "new-module/path/file"</span></div><div class="line"></div><div class="line">      <span class="string">"only-module$"</span>: <span class="string">"new-module"</span>,</div><div class="line">      <span class="comment">// 起别名 "only-module" -&gt; "new-module"，但不匹配 "module/path/file" -&gt; "new-module/path/file"</span></div><div class="line"></div><div class="line">      <span class="string">"module"</span>: path.resolve(__dirname, <span class="string">"app/third/module.js"</span>),</div><div class="line">      <span class="comment">// 起别名 "module" -&gt; "./app/third/module.js" 和 "module/file" 会导致错误</span></div><div class="line">      <span class="comment">// 模块别名相对于当前上下文导入</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/* 可供选择的别名语法（点击展示） */</span></div><div class="line">    alias: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"module"</span>,</div><div class="line">        <span class="comment">// 旧的请求</span></div><div class="line"></div><div class="line">        alias: <span class="string">"new-module"</span>,</div><div class="line">        <span class="comment">// 新的请求</span></div><div class="line"></div><div class="line">        onlyModule: <span class="literal">true</span></div><div class="line">        <span class="comment">// 如果为 true，只有 "module" 是别名</span></div><div class="line">        <span class="comment">// 如果为 false，"module/inner/path" 也是别名</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line"></div><div class="line">    <span class="comment">/* 高级解析选项（点击展示） */</span></div><div class="line"></div><div class="line">    symlinks: <span class="literal">true</span>,</div><div class="line">    <span class="comment">// 遵循符号链接(symlinks)到新位置</span></div><div class="line"></div><div class="line">    descriptionFiles: [<span class="string">"package.json"</span>],</div><div class="line">    <span class="comment">// 从 package 描述中读取的文件</span></div><div class="line"></div><div class="line">    mainFields: [<span class="string">"main"</span>],</div><div class="line">    <span class="comment">// 从描述文件中读取的属性</span></div><div class="line">    <span class="comment">// 当请求文件夹时</span></div><div class="line"></div><div class="line">    aliasFields: [<span class="string">"browser"</span>],</div><div class="line">    <span class="comment">// 从描述文件中读取的属性</span></div><div class="line">    <span class="comment">// 以对此 package 的请求起别名</span></div><div class="line"></div><div class="line">    enforceExtension: <span class="literal">false</span>,</div><div class="line">    <span class="comment">// 如果为 true，请求必不包括扩展名</span></div><div class="line">    <span class="comment">// 如果为 false，请求可以包括扩展名</span></div><div class="line"></div><div class="line">    moduleExtensions: [<span class="string">"-module"</span>],</div><div class="line">    <span class="attr">enforceModuleExtension</span>: <span class="literal">false</span>,</div><div class="line">    <span class="comment">// 类似 extensions/enforceExtension，但是用模块名替换文件</span></div><div class="line"></div><div class="line">    unsafeCache: <span class="literal">true</span>,</div><div class="line">    <span class="attr">unsafeCache</span>: &#123;&#125;,</div><div class="line">    <span class="comment">// 为解析的请求启用缓存</span></div><div class="line">    <span class="comment">// 这是不安全，因为文件夹结构可能会改动</span></div><div class="line">    <span class="comment">// 但是性能改善是很大的</span></div><div class="line"></div><div class="line">    cachePredicate: <span class="function">(<span class="params">path, request</span>) =&gt;</span> <span class="literal">true</span>,</div><div class="line">    <span class="comment">// predicate function which selects requests for caching</span></div><div class="line"></div><div class="line">    plugins: [</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    ]</div><div class="line">    <span class="comment">// 应用于解析器的附加插件</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">performance</span>: &#123;</div><div class="line">    <span class="attr">hints</span>: <span class="string">"warning"</span>, <span class="comment">// 枚举</span></div><div class="line">    hints: <span class="string">"error"</span>, <span class="comment">// 性能提示中抛出错误</span></div><div class="line">    hints: <span class="literal">false</span>, <span class="comment">// 关闭性能提示</span></div><div class="line">    maxAssetSize: <span class="number">200000</span>, <span class="comment">// 整数类型（以字节为单位）</span></div><div class="line">    maxEntrypointSize: <span class="number">400000</span>, <span class="comment">// 整数类型（以字节为单位）</span></div><div class="line">    assetFilter: <span class="function"><span class="keyword">function</span>(<span class="params">assetFilename</span>) </span>&#123;</div><div class="line">      <span class="comment">// 提供资源文件名的断言函数</span></div><div class="line">      <span class="keyword">return</span> assetFilename.endsWith(<span class="string">'.css'</span>) || assetFilename.endsWith(<span class="string">'.js'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">devtool</span>: <span class="string">"source-map"</span>, <span class="comment">// enum</span></div><div class="line">  devtool: <span class="string">"inline-source-map"</span>, <span class="comment">// 嵌入到源文件中</span></div><div class="line">  devtool: <span class="string">"eval-source-map"</span>, <span class="comment">// 将 SourceMap 嵌入到每个模块中</span></div><div class="line">  devtool: <span class="string">"hidden-source-map"</span>, <span class="comment">// SourceMap 不在源文件中引用</span></div><div class="line">  devtool: <span class="string">"cheap-source-map"</span>, <span class="comment">// 没有模块映射(module mappings)的 SourceMap 低级变体(cheap-variant)</span></div><div class="line">  devtool: <span class="string">"cheap-module-source-map"</span>, <span class="comment">// 有模块映射(module mappings)的 SourceMap 低级变体</span></div><div class="line">  devtool: <span class="string">"eval"</span>, <span class="comment">// 没有模块映射，而是命名模块。以牺牲细节达到最快。</span></div><div class="line">  <span class="comment">// 通过在浏览器调试工具(browser devtools)中添加元信息(meta info)增强调试</span></div><div class="line">  <span class="comment">// 牺牲了构建速度的 `source-map' 是最详细的。</span></div><div class="line"></div><div class="line">  context: __dirname, <span class="comment">// string（绝对路径！）</span></div><div class="line">  <span class="comment">// webpack 的主目录</span></div><div class="line">  <span class="comment">// entry 和 module.rules.loader 选项</span></div><div class="line">  <span class="comment">// 相对于此目录解析</span></div><div class="line"></div><div class="line">  target: <span class="string">"web"</span>, <span class="comment">// 枚举</span></div><div class="line">  target: <span class="string">"webworker"</span>, <span class="comment">// WebWorker</span></div><div class="line">  target: <span class="string">"node"</span>, <span class="comment">// node.js 通过 require</span></div><div class="line">  target: <span class="string">"async-node"</span>, <span class="comment">// Node.js 通过 fs and vm</span></div><div class="line">  target: <span class="string">"node-webkit"</span>, <span class="comment">// nw.js</span></div><div class="line">  target: <span class="string">"electron-main"</span>, <span class="comment">// electron，主进程(main process)</span></div><div class="line">  target: <span class="string">"electron-renderer"</span>, <span class="comment">// electron，渲染进程(renderer process)</span></div><div class="line">  target: <span class="function">(<span class="params">compiler</span>) =&gt;</span> &#123; <span class="comment">/* ... */</span> &#125;, <span class="comment">// 自定义</span></div><div class="line">  <span class="comment">// 包(bundle)应该运行的环境</span></div><div class="line">  <span class="comment">// 更改 块加载行为(chunk loading behavior) 和 可用模块(available module)</span></div><div class="line"></div><div class="line">  externals: [<span class="string">"react"</span>, /^@angular\<span class="comment">//],</span></div><div class="line">  externals: <span class="string">"react"</span>, <span class="comment">// string（精确匹配）</span></div><div class="line">  externals: <span class="regexp">/^[a-z\-]+($|\/)/</span>, <span class="comment">// 正则</span></div><div class="line">  externals: &#123; <span class="comment">// 对象</span></div><div class="line">    angular: <span class="string">"this angular"</span>, <span class="comment">// this["angular"]</span></div><div class="line">    react: &#123; <span class="comment">// UMD</span></div><div class="line">      commonjs: <span class="string">"react"</span>,</div><div class="line">      <span class="attr">commonjs2</span>: <span class="string">"react"</span>,</div><div class="line">      <span class="attr">amd</span>: <span class="string">"react"</span>,</div><div class="line">      <span class="attr">root</span>: <span class="string">"React"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">externals</span>: <span class="function">(<span class="params">request</span>) =&gt;</span> &#123; <span class="comment">/* ... */</span> <span class="keyword">return</span> <span class="string">"commonjs "</span> + request &#125;</div><div class="line">  <span class="comment">// 不要遵循/打包这些模块，而是在运行时从环境中请求他们</span></div><div class="line"></div><div class="line">  stats: <span class="string">"errors-only"</span>,</div><div class="line">  <span class="attr">stats</span>: &#123; <span class="comment">//object</span></div><div class="line">    assets: <span class="literal">true</span>,</div><div class="line">    <span class="attr">colors</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">errors</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">errorDetails</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">hash</span>: <span class="literal">true</span>,</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 精确控制要显示的 bundle 信息</span></div><div class="line"></div><div class="line">  devServer: &#123;</div><div class="line">    <span class="attr">proxy</span>: &#123; <span class="comment">// proxy URLs to backend development server</span></div><div class="line">      <span class="string">'/api'</span>: <span class="string">'http://localhost:3000'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">contentBase</span>: path.join(__dirname, <span class="string">'public'</span>), <span class="comment">// boolean | string | array, static file location</span></div><div class="line">    compress: <span class="literal">true</span>, <span class="comment">// enable gzip compression</span></div><div class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">// true for index.html upon 404, object for multiple paths</span></div><div class="line">    hot: <span class="literal">true</span>, <span class="comment">// hot module replacement. Depends on HotModuleReplacementPlugin</span></div><div class="line">    https: <span class="literal">false</span>, <span class="comment">// true for self-signed, object for cert authority</span></div><div class="line">    noInfo: <span class="literal">true</span>, <span class="comment">// only errors &amp; warns on hot reload</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  ],</div><div class="line">  <span class="comment">// 附加插件列表</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/* 高级配置（点击展示） */</span></div><div class="line"></div><div class="line">  resolveLoader: &#123; <span class="comment">/* 等同于 resolve */</span> &#125;</div><div class="line">  <span class="comment">// 独立解析选项的 loader</span></div><div class="line"></div><div class="line">  profile: <span class="literal">true</span>, <span class="comment">// boolean</span></div><div class="line">  <span class="comment">// 捕获时机信息</span></div><div class="line"></div><div class="line">  bail: <span class="literal">true</span>, <span class="comment">//boolean</span></div><div class="line">  <span class="comment">// 在第一个错误出错时抛出，而不是无视错误。</span></div><div class="line"></div><div class="line">  cache: <span class="literal">false</span>, <span class="comment">// boolean</span></div><div class="line">  <span class="comment">// 禁用/启用缓存</span></div><div class="line"></div><div class="line">  watch: <span class="literal">true</span>, <span class="comment">// boolean</span></div><div class="line">  <span class="comment">// 启用观察</span></div><div class="line"></div><div class="line">  watchOptions: &#123;</div><div class="line">    <span class="attr">aggregateTimeout</span>: <span class="number">1000</span>, <span class="comment">// in ms</span></div><div class="line">    <span class="comment">// 将多个更改聚合到单个重构建(rebuild)</span></div><div class="line"></div><div class="line">    poll: <span class="literal">true</span>,</div><div class="line">    <span class="attr">poll</span>: <span class="number">500</span>, <span class="comment">// 间隔单位 ms</span></div><div class="line">    <span class="comment">// 启用轮询观察模式</span></div><div class="line">    <span class="comment">// 必须用在不通知更改的文件系统中</span></div><div class="line">    <span class="comment">// 即 nfs shares（译者注：Network FileSystem，最大的功能就是可以透過網路，讓不同的機器、不同的作業系統、可以彼此分享個別的檔案 ( share file )）</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">node</span>: &#123;</div><div class="line">    <span class="comment">/* TODO */</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">recordsPath</span>: path.resolve(__dirname, <span class="string">"build/records.json"</span>),</div><div class="line">  <span class="attr">recordsInputPath</span>: path.resolve(__dirname, <span class="string">"build/records.json"</span>),</div><div class="line">  <span class="attr">recordsOutputPath</span>: path.resolve(__dirname, <span class="string">"build/records.json"</span>),</div><div class="line">  <span class="comment">// TODO</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>ES6中的模块介绍</title>
    <link href="http://yoursite.com/2017/05/17/es6-model/"/>
    <id>http://yoursite.com/2017/05/17/es6-model/</id>
    <published>2017-05-17T07:44:45.000Z</published>
    <updated>2017-05-19T09:38:39.257Z</updated>
    
    <content type="html"><![CDATA[<p>ES6在语言规格的层面上，实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。</p>
<p>ES6模块主要有两个功能：export和import</p>
<ul>
<li>export用于对外输出本模块（一个文件可以理解为一个模块）变量的接口</li>
<li>import用于在一个模块中加载另一个含有export接口的模块。</li>
</ul>
<h2 id="以对象属性形式的export和import"><a href="#以对象属性形式的export和import" class="headerlink" title="以对象属性形式的export和import"></a>以对象属性形式的export和import</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//export.js</span></div><div class="line"><span class="keyword">let</span> var1=<span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> var2=<span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">let</span> method2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;var1,var2,method1,method2&#125;</div></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//export.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> var1=<span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> var2=<span class="number">2</span>;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> method2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//import.js</span></div><div class="line"><span class="keyword">import</span>&#123;var1,var2,method1,method2&#125; <span class="keyword">from</span> <span class="string">"./export.js"</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myVar <span class="keyword">from</span> <span class="string">"./export.js"</span></div><div class="line"><span class="built_in">console</span>.log(var1,var2,method1,method2,myVar)</div><div class="line"><span class="comment">//1</span></div><div class="line"><span class="comment">//2 </span></div><div class="line"><span class="comment">//method1() &#123;&#125; </span></div><div class="line"><span class="comment">//method2() &#123;&#125; </span></div><div class="line"><span class="comment">//Object &#123;var1: 1, var2: 2,  method1:method1(),method2:method2(),default: "aaaa",__esModule: true&#125;</span></div></pre></td></tr></table></figure>
<h2 id="以模板形式的export和import"><a href="#以模板形式的export和import" class="headerlink" title="以模板形式的export和import"></a>以模板形式的export和import</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//export.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">let</span> x=<span class="number">1</span>;<span class="number">1212</span></div><div class="line"></div><div class="line"><span class="comment">//import.js</span></div><div class="line"><span class="keyword">import</span> x <span class="keyword">from</span>  <span class="string">"./export.js"</span>;</div><div class="line"><span class="built_in">console</span>.log(x) <span class="comment">//输出的是x</span></div></pre></td></tr></table></figure>
<p>可以发现，通过export模板的话，输出的格式不是以对象的形式{x}，而是直接的x。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6在语言规格的层面上，实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。&lt;/p&gt;
&lt;p&gt;ES6模块主要有两个功能：export和import&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;export用于对外输出本模块
    
    </summary>
    
      <category term="es6" scheme="http://yoursite.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>路由的配置项</title>
    <link href="http://yoursite.com/2017/05/17/react-router/"/>
    <id>http://yoursite.com/2017/05/17/react-router/</id>
    <published>2017-05-17T07:35:12.000Z</published>
    <updated>2017-05-19T08:40:22.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路由的基本使用方法"><a href="#路由的基本使用方法" class="headerlink" title="路由的基本使用方法"></a>路由的基本使用方法</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></div><div class="line"><span class="keyword">import</span> &#123; Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> App = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;h1&gt;App&lt;/h1&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">          &lt;li&gt;&lt;Link to="/about"&gt;About&lt;/Link&gt;&lt;/li&gt;</div><div class="line">          &lt;li&gt;&lt;Link to="/inbox"&gt;Inbox&lt;/Link&gt;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> About = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;h3&gt;About&lt;/h3&gt;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> Inbox = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;h2&gt;Inbox&lt;/h2&gt;</div><div class="line">        &#123;this.props.children || "Welcome to your Inbox"&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> Message = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;h3&gt;Message &#123;this.props.params.id&#125;&lt;/h3&gt;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">render((</div><div class="line">  &lt;Router&gt;</div><div class="line">    &lt;Route path="/" component=&#123;App&#125;&gt;</div><div class="line">      &lt;Route path="about" component=&#123;About&#125; /&gt;</div><div class="line">      &lt;Route path="inbox" component=&#123;Inbox&#125;&gt;</div><div class="line">        &lt;Route path="messages/:id" component=&#123;Message&#125; /&gt;</div><div class="line">      &lt;/Route&gt;</div><div class="line">    &lt;/Route&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">), document.body)</div></pre></td></tr></table></figure>
<p>如果路由按这种配置，我们就可以得到路由与URL的映射表： </p>
<table>
<thead>
<tr>
<th>URL</th>
<th>Components</th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>App</td>
</tr>
<tr>
<td>/about</td>
<td>App -&gt; About</td>
</tr>
<tr>
<td>/inbox</td>
<td>App -&gt; Inbox</td>
</tr>
<tr>
<td>/inbox/messages/:id</td>
<td>App -&gt; Inbox -&gt; Message</td>
</tr>
</tbody>
</table>
<h2 id="Router的基础配置"><a href="#Router的基础配置" class="headerlink" title="Router的基础配置"></a>Router的基础配置</h2><p><strong>（1）路由默认首页（<code>IndexRoute</code>）</strong> </p>
<p>当URL为<code>/</code>的时候，我们需要增加一个默认的初始显示子组件。我们可以通过<code>IndexRoute</code>来设置默认页。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; IndexRoute &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> Dashboard = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;Welcome to the app!&lt;/div&gt;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">render((</div><div class="line">  &lt;Router&gt;</div><div class="line">    &lt;Route path="/" component=&#123;App&#125;&gt;</div><div class="line">      &#123;/* Show the dashboard at / */&#125;</div><div class="line">      &lt;IndexRoute component=&#123;Dashboard&#125; /&gt;</div><div class="line">      &lt;Route path="about" component=&#123;About&#125; /&gt;</div><div class="line">      &lt;Route path="inbox" component=&#123;Inbox&#125;&gt;</div><div class="line">        &lt;Route path="messages/:id" component=&#123;Message&#125; /&gt;</div><div class="line">      &lt;/Route&gt;</div><div class="line">    &lt;/Route&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">), document.body)</div></pre></td></tr></table></figure>
<p>通过这样的设置，现在我们就有了默认元素了，这种方式类似于<code>apache</code>的直接根目录（<code>directorIndex</code>）或</p>
<p>者是<code>nginx</code>的<code>index</code>.是对直接根路径匹配路由，下面我们来看现在这种方式下的路由与URL的关系：</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>Components</th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>App -&gt; Dashboard</td>
</tr>
<tr>
<td>/about</td>
<td>App -&gt; About</td>
</tr>
<tr>
<td>/inbox</td>
<td>App -&gt; Inbox</td>
</tr>
<tr>
<td>/inbox/messages/:id</td>
<td>App -&gt; Inbox -&gt; Message</td>
</tr>
</tbody>
</table>
<p>我们发现与上面相比，这里多了默认的首页路由：url为：<code>/</code>，路由的组件为<code>App -&gt;Dashboard</code></p>
<p><strong>（2）从<code>URL</code>中解耦<code>UI</code></strong></p>
<p>如果我们能从URL为<code>/inbox/messages/:id</code> 的路由中，移除<code>/inbox</code>使得路由的真正页面为：<code>/message/:id</code></p>
<p>同时保留了<code>JSX</code>的页面结构，<a href="http://lib.csdn.net/base/react" target="_blank" rel="external">React</a>-router允许我们使用这种缺省路径的方法。我们来看如下代码：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">render((</div><div class="line">  &lt;Router&gt;</div><div class="line">    &lt;Route path="/" component=&#123;App&#125;&gt;</div><div class="line">      &lt;IndexRoute component=&#123;Dashboard&#125; /&gt;</div><div class="line">      &lt;Route path="about" component=&#123;About&#125; /&gt;</div><div class="line">      &lt;Route path="inbox" component=&#123;Inbox&#125; /&gt;</div><div class="line"></div><div class="line">      &#123;/* Use /messages/:id instead of /inbox/messages/:id */&#125;</div><div class="line">      &lt;Route component=&#123;Inbox&#125;&gt;</div><div class="line">        &lt;Route path="messages/:id" component=&#123;Message&#125; /&gt;</div><div class="line">      &lt;/Route&gt;</div><div class="line">    &lt;/Route&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">), document.body)</div></pre></td></tr></table></figure>
<p>注意：这里的<code>message</code>所在的父路由，缺省了<code>path</code>，这样实际上我们就将路由从<code>/inbox/message/:id</code>转化</p>
<p>成为了<code>/message/:id</code>，但是整体的<code>JSX</code>结构并没有发生变化，只是缺省了<code>path</code>而已。这种缺省的方式，</p>
<p>使得我们能够避免非常复杂的层层<code>url</code>的书写方式，这样使得我们整个路由的控制显得简单名了。这种方式</p>
<p>的访问结果如下：</p>
<table>
<thead>
<tr>
<th>URl</th>
<th>Components</th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>App -&gt; Dashboard</td>
</tr>
<tr>
<td>/about</td>
<td>App -&gt; About</td>
</tr>
<tr>
<td>/inbox</td>
<td>App -&gt; Inbox</td>
</tr>
<tr>
<td>/messages/:id</td>
<td>App -&gt; Inbox -&gt; Message</td>
</tr>
</tbody>
</table>
<p>上图中，值得注意的是我们只要通过<code>url: /message/:id</code>就可以访问到组件：<code>App -&gt; Inbox -&gt; Message</code>，大大的简化了<code>url</code>，但是访问结果却与<code>inbox/message/:id</code>完全相同。</p>
<p><strong>（3）重定向路由（<code>Redirect</code>）</strong></p>
<p>通过<code>Redirect</code>，我们可以重新定向路由。我们来看下面的例子：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line">render((</div><div class="line">  &lt;Router&gt;</div><div class="line">    &lt;Route path="/" component=&#123;App&#125;&gt;</div><div class="line">      &lt;IndexRoute component=&#123;Dashboard&#125; /&gt;</div><div class="line">      &lt;Route path="about" component=&#123;About&#125; /&gt;</div><div class="line"></div><div class="line">      &lt;Route path="inbox" component=&#123;Inbox&#125;&gt;</div><div class="line">        &#123;/* Redirect /inbox/messages/:id to /messages/:id */&#125;</div><div class="line">        &lt;Redirect from="messages/:id" to="/messages/:id" /&gt;</div><div class="line">      &lt;/Route&gt;</div><div class="line"></div><div class="line">      &lt;Route component=&#123;Inbox&#125;&gt;</div><div class="line">        &lt;Route path="messages/:id" component=&#123;Message&#125; /&gt;</div><div class="line">      &lt;/Route&gt;</div><div class="line">    &lt;/Route&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">), document.body)</div></pre></td></tr></table></figure>
<p>现在，当我们访问<code>/inbox/message/:id</code>的时候，路由会自动跳转到新的<code>url：/message/:id</code>，这样我们就实现了路由的重定向。</p>
<p><strong>（4）路由的leave和enter,路由的进入和移除的过程</strong></p>
<p>路由定义了进入和移除时的<code>hook</code>，也就是路由的移入或者移除的时候会触发一定的事件，这些<code>hooks</code>是非常</p>
<p>有用的，比如路由移入（进入访问）的时候需要做一个<strong>权限认证</strong>，或者说路由移除（移除访问）的时候需要</p>
<p><strong>保存一些参数</strong>等，我们来看什么时候会触发<code>leave hook</code>，什么时候会触发<code>enter hook</code>。</p>
<p>举一个例子：当我们从<code>url：/messages/5</code>，跳转到新的<code>url：/about</code>的过程。</p>
<p>（a）首先触发<code>/messages/:id</code> 路由的<code>leave hook</code></p>
<p>（b）再次触发<code>/inbox</code>路由的<code>leave hook</code></p>
<p>（c）最后触发<code>/about</code>路由的<code>enter hook</code></p>
<p><strong>（5）利用插件的方法来配置路由，并且同时根据leave和enter hook，在JS中实现Redirect</strong></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> routes = &#123;</div><div class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attr">component</span>: App,</div><div class="line">  <span class="attr">indexRoute</span>: &#123; <span class="attr">component</span>: Dashboard &#125;,</div><div class="line">  <span class="attr">childRoutes</span>: [</div><div class="line">    &#123; <span class="attr">path</span>: <span class="string">'about'</span>, <span class="attr">component</span>: About &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'inbox'</span>,</div><div class="line">      <span class="attr">component</span>: Inbox,</div><div class="line">      <span class="attr">childRoutes</span>: [&#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'messages/:id'</span>,</div><div class="line">        <span class="attr">onEnter</span>: <span class="function">(<span class="params">&#123; params &#125;, replace</span>) =&gt;</span> replace(<span class="string">`/messages/<span class="subst">$&#123;params.id&#125;</span>`</span>)</div><div class="line">      &#125;]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">component</span>: Inbox,</div><div class="line">      <span class="attr">childRoutes</span>: [&#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'messages/:id'</span>, <span class="attr">component</span>: Message</div><div class="line">      &#125;]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">render(&lt;Router routes=&#123;routes&#125; /&gt;, document.body)</div></pre></td></tr></table></figure>
<p>这里通过<code>onEnter</code>中的方法来触发重定向，从而实现<code>Redirect</code>.</p>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p> <a href="http://blog.csdn.net/liwusen/article/details/53282245" target="_blank" rel="external">Reacter-router（config）基础配置项</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;路由的基本使用方法&quot;&gt;&lt;a href=&quot;#路由的基本使用方法&quot; class=&quot;headerlink&quot; title=&quot;路由的基本使用方法&quot;&gt;&lt;/a&gt;路由的基本使用方法&lt;/h2&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>react-scu</title>
    <link href="http://yoursite.com/2017/05/17/react-scu/"/>
    <id>http://yoursite.com/2017/05/17/react-scu/</id>
    <published>2017-05-17T07:20:09.000Z</published>
    <updated>2017-05-19T08:46:50.095Z</updated>
    
    <content type="html"><![CDATA[<p><code>shouldComponentUpdate</code>，就是指明什么时候<code>component</code>（组件）需要进行更新。</p>
<h2 id="常见的shouldComponentUpdate的用法"><a href="#常见的shouldComponentUpdate的用法" class="headerlink" title="常见的shouldComponentUpdate的用法"></a>常见的shouldComponentUpdate的用法</h2><p>（1）比如在下面的例子中，组件中只有2个值，props.color和state.count可以发生改变，我们可以这样</p>
<p>使用shouldComponentUpdate。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class CounterButton extends React.Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;count: 1&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</div><div class="line">    if (this.props.color !== nextProps.color) &#123;</div><div class="line">      return true;</div><div class="line">    &#125;</div><div class="line">    if (this.state.count !== nextState.count) &#123;</div><div class="line">      return true;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    &lt;button</div><div class="line">      color=&#123;this.props.color&#125;</div><div class="line">      onClick=&#123;() =&gt; this.setState(state =&gt; (&#123;count: state.count + 1&#125;))&#125;&gt;</div><div class="line">      Count: &#123;this.state.count&#125;</div><div class="line">    &lt;/button&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上述代码中，组件仅仅会校验prop.color和state.count,如果这些值都不会改变，那么组件就不会有更新。</p>
<p>（2）如果组件更加复杂，拥有的状态变量更多</p>
<p>当组件复杂化，拥有状态变多时，我们需要设计一种模式，对所有的props变量和state变量，做一个“shallow comparison(浅比较）”，这样会使得shouldComponentUpdate函数冗杂化，为了解决该问题，<a href="http://lib.csdn.net/base/react" target="_blank" rel="external">React</a>给了我们提供了另一个继承方法——React.PureComponent：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class CounterButton extends React.PureComponent &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;count: 1&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    &lt;button</div><div class="line">      color=&#123;this.props.color&#125;</div><div class="line">      onClick=&#123;() =&gt; this.setState(state =&gt; (&#123;count: state.count + 1&#125;))&#125;&gt;</div><div class="line">      Count: &#123;this.state.count&#125;</div><div class="line">    &lt;/button&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在大多数的情况下，”shallow comparison（浅比较）”是有意义的，因此在大部门情况下我们可以用React.PureComponent来代替shouldComponentUpdate，但是当props和state中的变量发生突变的情况下，“shallow comparison”会失效，因此在props和state的变量发生突变的情况下，不能通过React.PureComponent来更新组件。</p>
<h2 id="shallow-comparison失效的情况"><a href="#shallow-comparison失效的情况" class="headerlink" title="shallow comparison失效的情况"></a>shallow comparison失效的情况</h2><p>shallow comparion在js中：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=[<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> y=x;</div><div class="line">x.push(<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(x==y)<span class="comment">//输出true</span></div></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">var</span> y=x;</div><div class="line">x.b=<span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(x==y)<span class="comment">//输出true</span></div></pre></td></tr></table></figure>
<p>从上面我们可以看出，shallow comparison不能进行深层比较的原因是，js中数组和对象的本质都是Object，一旦赋值y=x后，无论x如何变化，x,y都会只想的是同一个对象。</p>
<h2 id="如何解决shallow-comparison失效的问题"><a href="#如何解决shallow-comparison失效的问题" class="headerlink" title="如何解决shallow comparison失效的问题"></a>如何解决shallow comparison失效的问题</h2><p>失效状态1：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">handleClick() &#123;</div><div class="line">   <span class="comment">// This section is bad style and causes a bug</span></div><div class="line">   <span class="keyword">const</span> words = <span class="keyword">this</span>.state.words;</div><div class="line">   words.push(<span class="string">'marklar'</span>);</div><div class="line">   <span class="keyword">this</span>.setState(&#123;<span class="attr">words</span>: words&#125;);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>解决方法：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">handleClick() &#123;</div><div class="line">  <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</div><div class="line">    <span class="attr">words</span>: prevState.words.concat([<span class="string">'marklar'</span>])</div><div class="line">  &#125;));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>失效状态2：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateColorMap</span>(<span class="params">colormap</span>) </span>&#123;</div><div class="line">  colormap.right = <span class="string">'blue'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决方法：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateColorMap</span>(<span class="params">colormap</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, colormap, &#123;<span class="attr">right</span>: <span class="string">'blue'</span>&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本质:解决方法的本质是生成了一个新的对象，新对象与原对象比较一定返回的是false。</p>
<p>另一种方法是通过插件Immutable.js解决，不详细描述。</p>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p> <a href="http://blog.csdn.net/liwusen/article/details/53908266" target="_blank" rel="external">React高级教程（es6）——（4）ShouldComponentUpdate的用法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;shouldComponentUpdate&lt;/code&gt;，就是指明什么时候&lt;code&gt;component&lt;/code&gt;（组件）需要进行更新。&lt;/p&gt;
&lt;h2 id=&quot;常见的shouldComponentUpdate的用法&quot;&gt;&lt;a href=&quot;#常见的should
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>React中的Context</title>
    <link href="http://yoursite.com/2017/05/17/react-context/"/>
    <id>http://yoursite.com/2017/05/17/react-context/</id>
    <published>2017-05-17T07:07:23.000Z</published>
    <updated>2017-05-17T07:11:32.077Z</updated>
    
    <content type="html"><![CDATA[<p>简介：在<a href="http://lib.csdn.net/base/react" target="_blank" rel="external">React</a>中，数据可以以流的形式自上而下的传递，每当你使用一个组件的时候，你可以看到组件的props属性会自上而下的传递。但是，在某些情况下，我们不想通过父组件的props属性一级一级的往下传递，我们希望在某一级子组件中，直接得到上N级父组件中props中的值。</p>
<h2 id="一般情况下通过props传值的情况"><a href="#一般情况下通过props传值的情况" class="headerlink" title="一般情况下通过props传值的情况"></a>一般情况下通过props传值的情况</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;button style=&#123;&#123;background: this.props.color&#125;&#125;&gt;</div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      &lt;/button&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;this.props.text&#125; &lt;Button color=&#123;this.props.color&#125;&gt;Delete&lt;/Button&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> color = <span class="string">"purple"</span>;</div><div class="line">    <span class="keyword">const</span> children = <span class="keyword">this</span>.props.messages.map(<span class="function">(<span class="params">message</span>) =&gt;</span></div><div class="line">      &lt;Message text=&#123;message.text&#125; color=&#123;color&#125; /&gt;</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;children&#125;&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们来分析一下这段代码，大致的组件分为3级:</p>
<p>顶层MessageLists——&gt;Message一级子类——&gt;Button底层子类</p>
<p>我们来看从父组件到子组件的值的传递情况：</p>
<p><strong>（1）text:</strong></p>
<p>我们可以看到，在顶层组件MessageLists中的值，传递到一级子组件Message中，并在此组件中被使用。</p>
<p><strong>（2）color:</strong></p>
<p>再看props中的color的传递情况，在顶层组件MessageLists中的值，先传递到一级子组件Message中，</p>
<p>在传递到二级子组件Button中，最后在二级子组件中被使用。</p>
<p>综上：这就是一般在React中，所使用的通过props属性，在父组件与子组件中进行值传递。</p>
<h2 id="如何利用React中的Context来进行值的越级传递。"><a href="#如何利用React中的Context来进行值的越级传递。" class="headerlink" title="如何利用React中的Context来进行值的越级传递。"></a>如何利用React中的Context来进行值的越级传递。</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;button style=&#123;&#123;background: this.context.color&#125;&#125;&gt;</div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      &lt;/button&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Button.contextTypes = &#123;</div><div class="line">  <span class="attr">color</span>: React.PropTypes.string</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;this.props.text&#125; &lt;Button&gt;Delete&lt;/Button&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  getChildContext() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">color</span>: <span class="string">"purple"</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> children = <span class="keyword">this</span>.props.messages.map(<span class="function">(<span class="params">message</span>) =&gt;</span></div><div class="line">      &lt;Message text=&#123;message.text&#125; /&gt;</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;children&#125;&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MessageList.childContextTypes = &#123;</div><div class="line">  <span class="attr">color</span>: React.PropTypes.string</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上述代码，我们实现了通过React的Context实现了值——color的越级传递。我们来分析一下上述的方法。</p>
<p><strong>（1）首先在顶层组件中：</strong></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MessageList.childContextTypes = &#123;</div><div class="line">  <span class="attr">color</span>: React.PropTypes.string</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>定义了顶层组件所拥有的子类context对象——该顶层组件所拥有的的子类context对象为color，且必须为字符串。</p>
<p>然后通过getChildText方法，来给子context对象的属性赋值：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getChildContext() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">color</span>: <span class="string">"purple"</span>&#125;;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这样就完成了顶层组件中，context对象的赋值。</p>
<p><strong>（2）越级传递，因为color属性只在最底层使用</strong></p>
<p>我们来看color属性的越级传递，因为color属性，在一级子组件Message中并没有直接用到，因此我们可以</p>
<p>直接传递到最底层（越级），在Button组件中使用。</p>
<p>首先Button组件中，再次声明了所接受到的context的子组件color的类型，声明必须为字符串：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Button.contextTypes = &#123;</div><div class="line">  <span class="attr">color</span>: React.PropTypes.string</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后可以通过this.context.color这种方式调用：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;button style=&#123;&#123;<span class="attr">background</span>: <span class="keyword">this</span>.context.color&#125;&#125;&gt;</div><div class="line">       &#123;<span class="keyword">this</span>.props.children&#125;</div><div class="line">&lt;<span class="regexp">/button&gt;123123</span></div></pre></td></tr></table></figure>
<p>综上：这样，我们发现通过Context，我们就能实现值得越级传递。</p>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p> <a href="http://blog.csdn.net/liwusen/article/details/53408906" target="_blank" rel="external">React高级教程（es6）——（3）React中的Context</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简介：在&lt;a href=&quot;http://lib.csdn.net/base/react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt;中，数据可以以流的形式自上而下的传递，每当你使用一个组件的时候，你可以看到组件的props属性会自上而下
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>JSX语法深入理解</title>
    <link href="http://yoursite.com/2017/05/17/react-jsx-syntax/"/>
    <id>http://yoursite.com/2017/05/17/react-jsx-syntax/</id>
    <published>2017-05-17T06:51:31.000Z</published>
    <updated>2017-05-17T06:53:20.705Z</updated>
    
    <content type="html"><![CDATA[<p>简介：从根本上来说，JSX语法提供了一种创建<a href="http://lib.csdn.net/base/react" target="_blank" rel="external">React</a>元素的语法糖，JSX语句可以编译成：<br>React.createElement(component, props, …children)的形式，比如：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;MyButton color=<span class="string">"blue"</span> shadowSize=&#123;<span class="number">2</span>&#125;&gt;</div><div class="line">  Click Me</div><div class="line">&lt;<span class="regexp">/MyButton&gt;</span></div></pre></td></tr></table></figure>
<p>编译结果：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">React.createElement(</div><div class="line">  MyButton,</div><div class="line">  &#123;<span class="attr">color</span>: <span class="string">'blue'</span>, <span class="attr">shadowSize</span>: <span class="number">2</span>&#125;,</div><div class="line">  <span class="string">'Click Me'</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="指定React元素的类型"><a href="#指定React元素的类型" class="headerlink" title="指定React元素的类型"></a>指定React元素的类型</h2><p>JSX标签的头部，决定了React元素的类型，大写的标签，意味着JSX的标签与React的组件一一对应，比如</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Foo/&gt;标签就对应了Foo组件</div></pre></td></tr></table></figure>
<p><strong>（1）必须包裹在一定的范围内</strong></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> CustomButton <span class="keyword">from</span> <span class="string">'./CustomButton'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">WarningButton</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// return React.createElement(CustomButton, &#123;color: 'red'&#125;, null);</span></div><div class="line">  <span class="keyword">return</span> &lt;CustomButton color="red" /&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>比如这样，引入了2个组件，构成了一个新的组件WarningButton，组件的返回值的元素，必须包含在一定范围内，这里通过函数的’{ ‘, ’ } ‘实现包裹的效果。</p>
<p><strong>（2）用户定义的组件必须大写</strong></p>
<p>我们前面已经说过，JSX的标签与组件是一一对应的，当我们使用JSX语法，引用组件的时候，标签必须要大写（同时定义组件的函数名也必须是大写的）。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> &lt;h2&gt;Hello,World&lt;/h2&gt;</div><div class="line">&#125;</div><div class="line"><span class="comment">//定义过程</span></div><div class="line"></div><div class="line">&lt;Hello/&gt;</div><div class="line"><span class="comment">//使用过程</span></div></pre></td></tr></table></figure>
<p><strong>（3）不能在运行期间，动态的选择类型</strong><br>我们不能在JSX中，动态的规定组件的类型，举例来说：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; PhotoStory, VideoStory &#125; <span class="keyword">from</span> <span class="string">'./stories'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> components = &#123;</div><div class="line">  <span class="attr">photo</span>: PhotoStory,</div><div class="line">  <span class="attr">video</span>: VideoStory</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Story</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &lt;components[props.storyType] story=&#123;props.story&#125; /&gt;;</div><div class="line">  //这样写是不对的，我们在返回的组件中，动态定义了组件，这种动态的定义是无效的</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应该改写为：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; PhotoStory, VideoStory &#125; <span class="keyword">from</span> <span class="string">'./stories'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> components = &#123;</div><div class="line">  <span class="attr">photo</span>: PhotoStory,</div><div class="line">  <span class="attr">video</span>: VideoStory</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Story</span>(<span class="params">props</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> SpecificStory = components[props.storyType];</div><div class="line">  <span class="keyword">return</span> &lt; SpecificStory  story=&#123;props.story&#125; /&gt;;</div><div class="line">    //这样就是正确的，我们不要在JSX的标签中使用动态定义</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JSX中的Props属性"><a href="#JSX中的Props属性" class="headerlink" title="JSX中的Props属性"></a>JSX中的Props属性</h2><p><strong>（1）JS表达式</strong><br>可以通过{}，包裹js的语法来使用。比如：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;MyComponent foo=&#123;<span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span>&#125; /&gt;</div></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;MyComponent foo=&#123;<span class="number">10</span>&#125; /&gt;</div></pre></td></tr></table></figure>
<p>如果不是js表达式，则不能包裹在{}中使用。</p>
<p><strong>（2）Props属性的默认值</strong><br>Props上的属性可以有默认值，并且默认值为true，比如：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;MyTextBox autocomplete /&gt;</div><div class="line">&lt;MyTextBox autocomplete=&#123;true&#125; /&gt;</div></pre></td></tr></table></figure>
<p>上面这两个式子是等价的，但是不推荐使用默认值，因为在<code>ES6</code>的语法中<code>{foo}</code>代表的意思是：<code>{foo:foo}</code>的意思，并不是<code>{foo:true}</code>。</p>
<p><strong>（3）扩展属性</strong><br>可以通过ES6的…方法，给组件赋属性值，例如：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">App1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &lt;Greeting firstName="Ben" lastName="Hector" /&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function App2() &#123;</div><div class="line">  const props = &#123;firstName: 'Ben', lastName: 'Hector'&#125;;</div><div class="line">  return &lt;Greeting &#123;...props&#125; /&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的这两种方式是等价的。</p>
<h2 id="JSX中的children"><a href="#JSX中的children" class="headerlink" title="JSX中的children"></a>JSX中的children</h2><p><strong>（1）children中的function</strong></p>
<p>我们来考虑自定义组件中包含函数的情况：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListOfTenThings</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;Repeat numTimes=&#123;10&#125;&gt;</div><div class="line">      &#123;(index) =&gt; &lt;div key=&#123;index&#125;&gt;This is item &#123;index&#125; in the list&lt;/div&gt;&#125;</div><div class="line">    &lt;/Repeat&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么何时调用这个children中的方法呢？</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Repeat</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> items = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.numTimes; i++) &#123;</div><div class="line">    items.push(props.children(i));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;items&#125;&lt;/div&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们从上述的Repeat组件的定义中可以看出来，children中的方法按此定义会一直执行10次。</p>
<p><strong>（2）忽略Boolean，Null以及Undefined</strong></p>
<p><code>false</code>,<code>null</code>,<code>undefined</code>以及<code>true</code>是不能通过render()方法，呈现在页面上的，下面的这些div块的样式<br>相同，都是空白块：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div /&gt;</div><div class="line">&lt;div&gt;&lt;/div&gt;</div><div class="line">&lt;div&gt;&#123;false&#125;&lt;/div&gt;</div><div class="line">&lt;div&gt;&#123;null&#125;&lt;/div&gt;</div><div class="line">&lt;div&gt;&#123;true&#125;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>这种属性，在通过render呈现元素的时候，是十分有用的，比如我们只想在div元素中展现Head组件，<br>例子如下：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &#123;showHeader &amp;&amp; &lt;Header /&gt;&#125;</div><div class="line">  &lt;Content /&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>这里的逻辑是，只有<code>showHeader==true</code>，在会在页面呈现<code>Header</code>组件，否则为<code>null</code>，即为不显示任何东西，这相当于一个<code>if</code>的判断了。</p>
<p>再举一个例子：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &#123;props.messages.length &amp;&amp;</div><div class="line">    &lt;MessageList messages=&#123;props.messages&#125; /&gt;</div><div class="line">  &#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>在这个<code>div</code>中，我们需要知道的是即使元素为0，0是能够呈现在页面中的。也就是说上述代码中，只要<br><code>props.messages</code>数组存在，不管长度是否为<code>0</code>都是存在的。（这里不同于<code>js</code>，<code>js</code>中的语法认为<code>0==false</code>）</p>
<p><strong>（3）如何显示Null，Undefined和Boolean</strong></p>
<p>如果我们一定要再页面上显示<code>Null</code>等，可以将其先转化为字符串之后再显示。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  My JavaScript variable is &#123;<span class="built_in">String</span>(myVariable)&#125;.</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<p>通过String的转化后就能在页面上显示了。</p>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="http://blog.csdn.net/liwusen/article/details/53383922" target="_blank" rel="external">http://blog.csdn.net/liwusen/article/details/53383922</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简介：从根本上来说，JSX语法提供了一种创建&lt;a href=&quot;http://lib.csdn.net/base/react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt;元素的语法糖，JSX语句可以编译成：&lt;br&gt;React.create
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么文件名要小写？</title>
    <link href="http://yoursite.com/2017/05/12/name-the-file/"/>
    <id>http://yoursite.com/2017/05/12/name-the-file/</id>
    <published>2017-05-12T01:26:21.000Z</published>
    <updated>2017-05-12T02:37:14.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么文件名要小写？"><a href="#为什么文件名要小写？" class="headerlink" title="为什么文件名要小写？"></a>为什么文件名要小写？</h1><blockquote>
<p>“文件名建议只使用小写字母，不使用大写字母。”</p>
<p>“为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。”</p>
</blockquote>
<p>网友看见了，就<a href="https://github.com/ruanyf/document-style-guide/commit/22db946f22cdce12cde4e264344e8223abfafcd5#commitcomment-20691431" target="_blank" rel="external">提问</a>为什么文件名要小写？</p>
<p>说实话，虽然这是 Linux 传统，我却从没认真想过原因。赶紧查资料，结果发现四个很有说服力的理由，支持这样做。</p>
<p>下面就是这四个理由。另外，文后我还会发布一条前端培训的消息。</p>
<h2 id="一、可移植性"><a href="#一、可移植性" class="headerlink" title="一、可移植性"></a>一、可移植性</h2><p>Linux 系统是大小写敏感的，而 Windows 系统和 Mac 系统正好相反，大小写不敏感。一般来说，这不是大问题。</p>
<p>但是，如果两个文件名只有大小写不同，其他都相同，跨平台就会出问题。</p>
<blockquote>
<ul>
<li><code>foobar</code></li>
<li><code>Foobar</code></li>
<li><code>FOOBAR</code></li>
<li><code>fOObAr</code></li>
</ul>
</blockquote>
<p>上面四个文件名，Windows 系统会把它们都当作<code>foobar</code>。如果它们同时存在，你可能没办法打开后面三个文件。</p>
<p>另一方面，在 Mac 系统上开发时，有时会疏忽，写错大小写。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确文件名是 MyModule.js</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">module</span> = <span class="built_in">require</span>(<span class="string">'./myModule'</span>);</div></pre></td></tr></table></figure>
<p>上面的代码在 Mac 上面可以运行，因为 Mac 认为<code>MyModule.js</code>和<code>myModule.js</code>是同一个文件。但是，一旦代码到服务器运行就会报错，因为 Linux 系统找不到<code>myModule.js</code>。</p>
<p>如果所有的文件名都采用小写，就不会出现上面的问题，可以保证项目有良好的可移植性。</p>
<h2 id="二、易读性"><a href="#二、易读性" class="headerlink" title="二、易读性"></a>二、易读性</h2><p>小写文件名通常比大写文件名更易读，比如<code>accessibility.txt</code>就比<code>ACCESSIBILITY.TXT</code>易读。</p>
<p>有人习惯使用<a href="http://www.ruanyifeng.com/blog/2007/06/camelcase.html" target="_blank" rel="external">驼峰命名法</a>，单词的第一个字母大写，其他字母小写。这种方法的问题是，如果遇到全部是大写的缩略词，就会不适用。</p>
<p>比如，一个姓李的纽约特警，无论写成<code>NYPoliceSWATLee</code>还是<code>NyPoliceSwatlee</code>，都怪怪的，还是写成<code>ny-police-swat-lee</code>比较容易接受。</p>
<h2 id="三、易用性"><a href="#三、易用性" class="headerlink" title="三、易用性"></a>三、易用性</h2><p>某些系统会生成一些预置的用户目录，采用首字母大写的目录名。比如，Ubuntu 在用户主目录会默认生成<code>Downloads</code>、 <code>Pictures</code>、<code>Documents</code>等目录。</p>
<p>Mac 系统更过分，一部分系统目录也是大写的，比如<code>/Library/Audio/Apple Loops/</code>。</p>
<p>另外，某些常见的配置文件或说明文件，也采用大写的文件名，比如<code>Makefile</code>、<code>INSTALL</code>、<code>CHANGELOG</code>、<code>.Xclients</code>和<code>.Xauthority</code>等等。</p>
<p>所以，用户的文件都采用小写文件名，就很方便与上面这些目录或文件相区分。</p>
<p>如果你打破砂锅问到底，为什么操作系统会采用这样的大写文件名？原因也很简单，因为早期 Unix 系统上，<code>ls</code>命令先列出大写字母，再列出小写字母，大写的路径会排在前面。因此，如果目录名或文件名是大写的，就比较容易被用户首先看到。</p>
<p><strong><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="name-the-file/bg2017021001.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure></strong></p>
<h2 id="四、便捷性"><a href="#四、便捷性" class="headerlink" title="四、便捷性"></a>四、便捷性</h2><p>文件名全部小写，还有利于命令行操作。比如，某些命令可以不使用<code>-i</code>参数了。</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 大小写敏感的搜索</div><div class="line"><span class="meta">$</span> find . -name abc</div><div class="line"><span class="meta">$</span> locate "*.htmL"</div><div class="line"><span class="meta"></span></div><div class="line"># 大小写不敏感的搜索</div><div class="line"><span class="meta">$</span> find . -iname abc</div><div class="line"><span class="meta">$</span> locate -i "*.HtmL"</div></pre></td></tr></table></figure>
<p><strong><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="name-the-file/bg2017021004.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure></strong></p>
<p>另外，大写字母需要按下 Shift 键，多多少少有些麻烦。如果文件名小写，就不用碰这个键了，不仅省事，还可以提高打字速度。</p>
<p>程序员长时间使用键盘，每分钟少按几次 Shift，一天下来就可以省掉很多手指动作。长年累月，也是对自己身体的一种保护。</p>
<p>综上所述，文件名全部使用小写字母和连词线（all-lowercase-with-dashes），是一种值得推广的正确做法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么文件名要小写？&quot;&gt;&lt;a href=&quot;#为什么文件名要小写？&quot; class=&quot;headerlink&quot; title=&quot;为什么文件名要小写？&quot;&gt;&lt;/a&gt;为什么文件名要小写？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;“文件名建议只使用小写字母，不使用大写字母。”&lt;/
    
    </summary>
    
    
      <category term="文件名" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%8D/"/>
    
      <category term="小写" scheme="http://yoursite.com/tags/%E5%B0%8F%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>CSS 变量</title>
    <link href="http://yoursite.com/2017/05/12/css-variable/"/>
    <id>http://yoursite.com/2017/05/12/css-variable/</id>
    <published>2017-05-12T01:25:09.000Z</published>
    <updated>2017-05-12T01:58:01.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-变量"><a href="#CSS-变量" class="headerlink" title="CSS 变量"></a>CSS 变量</h1><p>今年三月，微软<a href="https://www.neowin.net/news/css-custom-properties-are-coming-to-microsoft-edge-in-the-windows-10-creators-update" target="_blank" rel="external">宣布</a> Edge 浏览器将支持 CSS 变量。</p>
<p>这个重要的 CSS 新功能，所有主要浏览器已经都支持了。本文全面介绍如何使用它，你会发现原生 CSS 从此变得异常强大。</p>
<p><strong><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="css-variable/bg2017050901.jpg" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure></strong></p>
<h2 id="一、变量的声明"><a href="#一、变量的声明" class="headerlink" title="一、变量的声明"></a>一、变量的声明</h2><p>声明变量的时候，变量名前面要加两根连词线（<code>--</code>）。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; body &#123;</div><div class="line">&gt;   --foo: #7F583F;</div><div class="line">&gt;   --bar: #F7EFD2;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，<code>body</code>选择器里面声明了两个变量：<code>--foo</code>和<code>--bar</code>。</p>
<p>它们与<code>color</code>、<code>font-size</code>等正式属性没有什么不同，只是没有默认含义。所以 CSS 变量（CSS variable）又叫做<strong>“CSS 自定义属性”</strong>（CSS custom properties）。因为变量与自定义的 CSS 属性其实是一回事。</p>
<p>你可能会问，为什么选择两根连词线（<code>--</code>）表示变量？因为<code>$foo</code>被 Sass 用掉了，<code>@foo</code>被 Less 用掉了。为了不产生冲突，官方的 CSS 变量就改用两根连词线了。</p>
<p>各种值都可以放入 CSS 变量。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; :root&#123;</div><div class="line">&gt;   --main-color: #4d4e53;</div><div class="line">&gt;   --main-bg: rgb(255, 255, 255);</div><div class="line">&gt;   --logo-border-color: rebeccapurple;</div><div class="line">&gt;</div><div class="line">&gt;   --header-height: 68px;</div><div class="line">&gt;   --content-padding: 10px 20px;</div><div class="line">&gt;</div><div class="line">&gt;   --base-line-height: 1.428571429;</div><div class="line">&gt;   --transition-duration: .35s;</div><div class="line">&gt;   --external-link: &quot;external link&quot;;</div><div class="line">&gt;   --margin-top: calc(2vh + 20px);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>变量名大小写敏感，<code>--header-color</code>和<code>--Header-Color</code>是两个不同变量。</p>
<h2 id="二、var-函数"><a href="#二、var-函数" class="headerlink" title="二、var() 函数"></a>二、var() 函数</h2><p><code>var()</code>函数用于读取变量。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; a &#123;</div><div class="line">&gt;   color: var(--foo);</div><div class="line">&gt;   text-decoration-color: var(--bar);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p><code>var()</code>函数还可以使用第二个参数，表示变量的默认值。如果该变量不存在，就会使用这个默认值。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="selector-tag">color</span>: <span class="selector-tag">var</span>(<span class="selector-tag">--foo</span>, <span class="selector-id">#7F583F</span>);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>第二个参数不处理内部的逗号或空格，都视作参数的一部分。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="selector-tag">var</span>(<span class="selector-tag">--font-stack</span>, "<span class="selector-tag">Roboto</span>", "<span class="selector-tag">Helvetica</span>");</div><div class="line">&gt; <span class="selector-tag">var</span>(<span class="selector-tag">--pad</span>, 10<span class="selector-tag">px</span> 15<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p><code>var()</code>函数还可以用在变量的声明。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; :root &#123;</div><div class="line">&gt;   --primary-color: red;</div><div class="line">&gt;   --logo-text: var(--primary-color);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>注意，变量值只能用作属性值，不能用作属性名。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; .foo &#123;</div><div class="line">&gt;   --side: margin-top;</div><div class="line">&gt;   /* 无效 */</div><div class="line">&gt;   var(--side): 20px;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，变量<code>--side</code>用作属性名，这是无效的。</p>
<h2 id="三、变量值的类型"><a href="#三、变量值的类型" class="headerlink" title="三、变量值的类型"></a>三、变量值的类型</h2><p>如果变量值是一个字符串，可以与其他字符串拼接。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; --bar: 'hello';</div><div class="line">&gt; --foo: var(--bar)' world';</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>利用这一点，可以 debug（<a href="https://codepen.io/malyw/pen/oBWMOY" target="_blank" rel="external">例子</a>）。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; body:after &#123;</div><div class="line">&gt;   content: '--screen-category : 'var(--screen-category);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>如果变量值是数值，不能与数值单位直接连用。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; .foo &#123;</div><div class="line">&gt;   --gap: 20;</div><div class="line">&gt;   /* 无效 */</div><div class="line">&gt;   margin-top: var(--gap)px;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，数值与单位直接写在一起，这是无效的。必须使用<code>calc()</code>函数，将它们连接。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; .foo &#123;</div><div class="line">&gt;   --gap: 20;</div><div class="line">&gt;   margin-top: calc(var(--gap) * 1px);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>如果变量值带有单位，就不能写成字符串。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt; /* 无效 */</div><div class="line">&gt; .foo &#123;</div><div class="line">&gt;   --foo: '20px';</div><div class="line">&gt;   font-size: var(--foo);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; /* 有效 */</div><div class="line">&gt; .foo &#123;</div><div class="line">&gt;   --foo: 20px;</div><div class="line">&gt;   font-size: var(--foo);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="四、作用域"><a href="#四、作用域" class="headerlink" title="四、作用域"></a>四、作用域</h2><p>同一个 CSS 变量，可以在多个选择器内声明。读取的时候，优先级最高的声明生效。这与 CSS 的”层叠”（cascade）规则是一致的。</p>
<p>下面是一个<a href="http://jsbin.com/buwahixoqo/edit?html,css,output" target="_blank" rel="external">例子</a>。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt; &lt;style&gt;</div><div class="line">&gt;   :root &#123; --color: blue; &#125;</div><div class="line">&gt;   div &#123; --color: green; &#125;</div><div class="line">&gt;   #alert &#123; --color: red; &#125;</div><div class="line">&gt;   * &#123; color: var(--color); &#125;</div><div class="line">&gt; &lt;/style&gt;</div><div class="line">&gt;</div><div class="line">&gt; &lt;p&gt;蓝色&lt;/p&gt;</div><div class="line">&gt; &lt;div&gt;绿色&lt;/div&gt;</div><div class="line">&gt; &lt;div id="alert"&gt;红色&lt;/div&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，三个选择器都声明了<code>--color</code>变量。不同元素读取这个变量的时候，会采用优先级最高的规则，因此三段文字的颜色是不一样的。</p>
<p>这就是说，变量的作用域就是它所在的选择器的有效范围。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; body &#123;</div><div class="line">&gt;   --foo: #7F583F;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; .content &#123;</div><div class="line">&gt;   --bar: #F7EFD2;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，变量<code>--foo</code>的作用域是<code>body</code>选择器的生效范围，<code>--bar</code>的作用域是<code>.content</code>选择器的生效范围。</p>
<p>由于这个原因，全局的变量通常放在根元素<code>:root</code>里面，确保任何选择器都可以读取它们。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; :root &#123;</div><div class="line">&gt;   --main-color: #06c;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="五、响应式布局"><a href="#五、响应式布局" class="headerlink" title="五、响应式布局"></a>五、响应式布局</h2><p>CSS 是动态的，页面的任何变化，都会导致采用的规则变化。</p>
<p>利用这个特点，可以在响应式布局的<code>media</code>命令里面声明变量，使得不同的屏幕宽度有不同的变量值。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt; body &#123;</div><div class="line">&gt;   --primary: #7F583F;</div><div class="line">&gt;   --secondary: #F7EFD2;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; a &#123;</div><div class="line">&gt;   color: var(--primary);</div><div class="line">&gt;   text-decoration-color: var(--secondary);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; @media screen and (min-width: 768px) &#123;</div><div class="line">&gt;   body &#123;</div><div class="line">&gt;     --primary:  #F7EFD2;</div><div class="line">&gt;     --secondary: #7F583F;</div><div class="line">&gt;   &#125;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="六、兼容性处理"><a href="#六、兼容性处理" class="headerlink" title="六、兼容性处理"></a>六、兼容性处理</h2><p>对于不支持 CSS 变量的浏览器，可以采用下面的写法。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; a &#123;</div><div class="line">&gt;   color: #7F583F;</div><div class="line">&gt;   color: var(--primary);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>也可以使用<code>@support</code>命令进行检测。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; @<span class="keyword">supports</span> ( (--a: <span class="number">0</span>)) &#123;</div><div class="line">&gt;   <span class="comment">/* supported */</span></div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; @<span class="keyword">supports</span> ( not (--a: <span class="number">0</span>)) &#123;</div><div class="line">&gt;   <span class="comment">/* not supported */</span></div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="七、JavaScript-操作"><a href="#七、JavaScript-操作" class="headerlink" title="七、JavaScript 操作"></a>七、JavaScript 操作</h2><p>JavaScript 也可以检测浏览器是否支持 CSS 变量。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt; const isSupported =</div><div class="line">&gt;   window.CSS &amp;&amp;</div><div class="line">&gt;   window.CSS.supports &amp;&amp;</div><div class="line">&gt;   window.CSS.supports('--a', 0);</div><div class="line">&gt;</div><div class="line">&gt; if (isSupported) &#123;</div><div class="line">&gt;   /* supported */</div><div class="line">&gt; &#125; else &#123;</div><div class="line">&gt;   /* not supported */</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>JavaScript 操作 CSS 变量的写法如下。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; // 设置变量</div><div class="line">&gt; document.body.style.setProperty('--primary', '#7F583F');</div><div class="line">&gt;</div><div class="line">&gt; // 读取变量</div><div class="line">&gt; document.body.style.getPropertyValue('--primary').trim();</div><div class="line">&gt; // '#7F583F'</div><div class="line">&gt;</div><div class="line">&gt; // 删除变量</div><div class="line">&gt; document.body.style.removeProperty('--primary');</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>这意味着，JavaScript 可以将任意值存入样式表。下面是一个监听事件的例子，事件信息被存入 CSS 变量。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; const docStyle = document.documentElement.style;</div><div class="line">&gt;</div><div class="line">&gt; document.addEventListener('mousemove', (e) =&gt; &#123;</div><div class="line">&gt;   docStyle.setProperty('--mouse-x', e.clientX);</div><div class="line">&gt;   docStyle.setProperty('--mouse-y', e.clientY);</div><div class="line">&gt; &#125;);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>那些对 CSS 无用的信息，也可以放入 CSS 变量。</p>
<blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; --foo: if(x &gt; 5) this.width = 10;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，<code>--foo</code>的值在 CSS 里面是无效语句，但是可以被 JavaScript 读取。这意味着，可以把样式设置写在 CSS 变量中，让 JavaScript 读取。</p>
<p>所以，CSS 变量提供了 JavaScript 与 CSS 通信的一种途径。</p>
<h2 id="八、参考链接"><a href="#八、参考链接" class="headerlink" title="八、参考链接"></a>八、参考链接</h2><ul>
<li><a href="https://vgpena.github.io/winning-with-css-variables/" target="_blank" rel="external">Winning with CSS Variables</a></li>
<li><a href="https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care" target="_blank" rel="external">CSS Variables: Why Should You Care?</a></li>
<li><a href="https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/" target="_blank" rel="external">It’s Time To Start Using CSS Custom Properties</a></li>
<li><a href="https://philipwalton.com/articles/why-im-excited-about-native-css-variables/" target="_blank" rel="external">Why I’m Excited About Native CSS Variables</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/css-variables.html" target="_blank" rel="external">CSS变量教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS-变量&quot;&gt;&lt;a href=&quot;#CSS-变量&quot; class=&quot;headerlink&quot; title=&quot;CSS 变量&quot;&gt;&lt;/a&gt;CSS 变量&lt;/h1&gt;&lt;p&gt;今年三月，微软&lt;a href=&quot;https://www.neowin.net/news/css-custom
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="变量" scheme="http://yoursite.com/tags/%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>linux vi 命令详解</title>
    <link href="http://yoursite.com/2017/05/11/linux-vi/"/>
    <id>http://yoursite.com/2017/05/11/linux-vi/</id>
    <published>2017-05-11T02:33:03.000Z</published>
    <updated>2017-05-11T09:02:10.978Z</updated>
    
    <content type="html"><![CDATA[<p><code>vi</code>编辑器是所有<code>Unix</code>及<code>Linux</code>系统下标准的编辑器，它的强大不逊色于任何最新的文本编辑器，这里只是简单地介绍一下它的用法和一小部分指 令。由于 对<code>Unix</code>及<code>Linux</code>系统的任何版本，vi编辑器是完全相同的，因此您可以在其他任何介绍<code>vi</code>的地方进一步了解它。<code>vi</code>也是<code>Linux</code>中最基本的文本编 辑器，学会它后，您将在<code>Linux</code>的世界里畅行无阻。</p>
<h2 id="vi的基本概念"><a href="#vi的基本概念" class="headerlink" title="vi的基本概念"></a>vi的基本概念</h2><p>基本上<code>vi</code>可以分为三种状态，分别是:</p>
<ul>
<li>命令模式（command mode）</li>
<li>插入模式（Insert mode）</li>
<li>底行模式（last line mode）</li>
</ul>
<p>各模式的功能区别如下：</p>
<p><strong>命令行模式command mode）</strong></p>
<p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入插入模式下，或者到底行模式。</p>
<p><strong>插入模式（Insert mode）</strong></p>
<p>只有在插入模式下，才可以做文字输入，按<code>ESC</code>键可回到命令行模式。</p>
<p><strong>底行模式（last line mode）</strong></p>
<p>将文件保存或退出<code>vi</code>，也可以设置编辑环境，如寻找字符串、列出行号……等。</p>
<p>不过一般我们在使用时把vi简化成两个模式，就是将底行模式也算入命令行模式。</p>
<h2 id="vi的基本操作"><a href="#vi的基本操作" class="headerlink" title="vi的基本操作"></a>vi的基本操作</h2><p><strong>进入vi</strong></p>
<p>  在系统提示符号输入vi及文件名称后，就进入<code>vi</code>全屏幕编辑画面：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> vi myfile</div></pre></td></tr></table></figure>
<p>不过有一点要特别注意，就是您进入vi之后，是处于「命令行模式」，您要切换到「插入模式」才能够输入文字。初次使用<code>vi</code>的人都会想先用上下左右键移动光标，结果电脑一直哔哔叫，把自己气个半死，所以进入vi后，先不要乱动，转换到 「插入模式」再说吧！</p>
<p><strong>切换至插入模式   编辑文件</strong></p>
<p>在「命令行模式」下按一下字母 <code>i</code>  就可以进入「插入模式」，这时候你就可以开始输入文字了。</p>
<p><strong>切换至命令行模式</strong></p>
<p>您目前处于「插入模式」，您就只能一直输入文字。回到「命令行模式」，按一下 <code>ESC</code>  键就行啦。</p>
<p><strong>切换至底行模式    退出vi及保存文件</strong></p>
<p>在「命令行模式」下，按一下 <code>:</code> 冒号键进入「底行模式」，输入下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 将文章以指定的文件名filename保存</div><div class="line">: w filename </div><div class="line"><span class="meta">#</span> 存盘并退出vi</div><div class="line">: wq </div><div class="line"><span class="meta">#</span> 不存盘强制退出vi</div><div class="line">: q!</div></pre></td></tr></table></figure>
<h2 id="命令行模式（command-mode）功能键"><a href="#命令行模式（command-mode）功能键" class="headerlink" title="命令行模式（command mode）功能键"></a>命令行模式（command mode）功能键</h2><p><strong>插入模式</strong></p>
<p>按<code>i</code> 进入插入模式后，是从光标当前位置开始输入文件；</p>
<p>按<code>a</code>进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字；</p>
<p>按<code>o</code>进入插入模式后，是插入新的一行，从行首开始输入文字。</p>
<p><strong>从插入模式切换为命令行模式</strong></p>
<p> 按<code>ESC</code>键</p>
<p> <strong>移动光标</strong></p>
<p><code>vi</code>可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母<code>h(左)</code>、<code>j(下)</code>、<code>k(上)</code>、<code>l(右)</code>，分别控制光标左、下、上、右移一格。</p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Ctrl+B</code></td>
<td>屏幕往”后”移动一页</td>
</tr>
<tr>
<td><code>Ctrl+F</code></td>
<td>屏幕往”前”移动一页</td>
</tr>
<tr>
<td><code>Ctrl+U</code></td>
<td>屏幕往”后”移动半页</td>
</tr>
<tr>
<td><code>Ctrl+D</code></td>
<td>屏幕往”前”移动半页</td>
</tr>
<tr>
<td><code>0</code></td>
<td>移到文章的开头</td>
</tr>
<tr>
<td><code>g</code></td>
<td>移动到文章的最后</td>
</tr>
<tr>
<td><code>$</code></td>
<td>移动到光标所在行的”行尾”</td>
</tr>
<tr>
<td><code>^</code></td>
<td>移动到光标所在行的”行首”</td>
</tr>
<tr>
<td><code>w</code></td>
<td>光标跳到下个字的开头</td>
</tr>
<tr>
<td><code>e</code></td>
<td>光标跳到下个字的字尾</td>
</tr>
<tr>
<td><code>b</code></td>
<td>光标回到上个字的开头</td>
</tr>
<tr>
<td><code>#l</code></td>
<td>光标移到该行的第#个位置，如：<code>5l</code>，<code>56l</code></td>
</tr>
</tbody>
</table>
<p><strong>删除文字</strong></p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>x</code></td>
<td>每按一次，删除光标所在位置的”后面”一个字符</td>
</tr>
<tr>
<td><code>#x</code></td>
<td>例如，<code>6x</code>表示删除光标所在位置的”后面” <code>6</code> 个字符</td>
</tr>
<tr>
<td><code>X</code></td>
<td>大写的 <code>X</code> ，每按一次，删除光标所在位置的”前面”一个字符</td>
</tr>
<tr>
<td><code>#X</code></td>
<td>例如，<code>20X</code>表示删除光标所在位置的”前面” <code>20</code> 个字符</td>
</tr>
<tr>
<td><code>dd</code></td>
<td>删除光标所在行</td>
</tr>
<tr>
<td><code>#dd</code></td>
<td>从光标所在行开始删除#行</td>
</tr>
</tbody>
</table>
<p><strong>复制</strong></p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>yw</code></td>
<td>将光标所在之处到字尾的字符复制到缓冲区中</td>
</tr>
<tr>
<td><code>#yw</code></td>
<td>复制<code>#</code>个字到缓冲区</td>
</tr>
<tr>
<td><code>yy</code></td>
<td>复制光标所在行到缓冲区</td>
</tr>
<tr>
<td><code>#yy</code></td>
<td>例如，<code>6yy</code>表示拷贝从光标所在的该行”往下数”6行文字</td>
</tr>
<tr>
<td><code>p</code></td>
<td>将缓冲区内的字符贴到光标所在位置。注意：所有与”y”有关的复制命令都必须与”p”配合才能完成复制与粘贴功能</td>
</tr>
</tbody>
</table>
<p> <strong>替换</strong></p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>r</code></td>
<td>替换光标所在处的字符</td>
</tr>
<tr>
<td><code>R</code></td>
<td>替换光标所到之处的字符，直到按下<code>ESC</code>键为止</td>
</tr>
</tbody>
</table>
<p><strong>回复上一次操作</strong> </p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>u</code></td>
<td>如果您误执行一个命令，可以马上按下<code>u</code>，回到上一个操作。按多次”u”可以执行多次回复</td>
</tr>
</tbody>
</table>
<p><strong>更改</strong></p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>cw</code></td>
<td>更改光标所在处的字到字尾处</td>
</tr>
<tr>
<td><code>c#w</code></td>
<td>例如，<code>c3w</code>表示更改3个字</td>
</tr>
</tbody>
</table>
<p><strong>跳至指定的行</strong></p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Ctrl+G</code></td>
<td>列出光标所在行的行号</td>
</tr>
<tr>
<td><code>#G</code></td>
<td>例如，<code>15G</code>，表示移动光标至文章的第<code>15</code>行行首</td>
</tr>
</tbody>
</table>
<h2 id="底行模式（last-line-mode）下命令简介"><a href="#底行模式（last-line-mode）下命令简介" class="headerlink" title="底行模式（last line mode）下命令简介"></a>底行模式（last line mode）下命令简介</h2><p>在使用「底行模式」之前，请记住先按<code>ESC</code>键确定您已经处于「命令行模式」下后，再按<code>:</code>冒号即可进入「底行模式」。</p>
<p><strong>列出行号</strong></p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>set nu</code></td>
<td>输入「set nu」后，会在文件中的每一行前面列出行号。</td>
</tr>
</tbody>
</table>
<p><strong>跳到文件中的某一行</strong></p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>#</code></td>
<td>「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。</td>
</tr>
</tbody>
</table>
<p> <strong>查找字符</strong></p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/关键字</code></td>
<td>先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止。</td>
</tr>
<tr>
<td><code>?关键字</code></td>
<td>先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往前寻找到您要的关键字为止。</td>
</tr>
</tbody>
</table>
<p><strong>保存文件</strong></p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>w</code></td>
<td>在冒号输入字母「w」就可以将文件保存起来。</td>
</tr>
</tbody>
</table>
<p> <strong>离开vi</strong></p>
<table>
<thead>
<tr>
<th>key</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>q</code></td>
<td>按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。</td>
</tr>
<tr>
<td><code>qw</code></td>
<td>一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。</td>
</tr>
</tbody>
</table>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="http://www.cnblogs.com/mahang/archive/2011/09/01/2161672.html" target="_blank" rel="external">http://www.cnblogs.com/mahang/archive/2011/09/01/2161672.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;vi&lt;/code&gt;编辑器是所有&lt;code&gt;Unix&lt;/code&gt;及&lt;code&gt;Linux&lt;/code&gt;系统下标准的编辑器，它的强大不逊色于任何最新的文本编辑器，这里只是简单地介绍一下它的用法和一小部分指 令。由于 对&lt;code&gt;Unix&lt;/code&gt;及&lt;code
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用 Git 命令清单</title>
    <link href="http://yoursite.com/2017/05/10/git-commend/"/>
    <id>http://yoursite.com/2017/05/10/git-commend/</id>
    <published>2017-05-10T09:27:06.000Z</published>
    <updated>2017-05-11T09:42:15.755Z</updated>
    
    <content type="html"><![CDATA[<p><strong><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="git-commend/bg2015120901.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure></strong></p>
<p>几个专用名词的译名如下：</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 在当前目录新建一个Git代码库</div><div class="line"><span class="meta">$</span> git init</div><div class="line"><span class="meta"></span></div><div class="line"># 新建一个目录，将其初始化为Git代码库</div><div class="line"><span class="meta">$</span> git init [project-name]</div><div class="line"><span class="meta"></span></div><div class="line"># 下载一个项目和它的整个代码历史</div><div class="line"><span class="meta">$</span> git clone [url]</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 显示当前的Git配置</div><div class="line"><span class="meta">$</span> git config --list</div><div class="line"><span class="meta"></span></div><div class="line"># 编辑Git配置文件</div><div class="line"><span class="meta">$</span> git config -e [--global]</div><div class="line"><span class="meta"></span></div><div class="line"># 设置提交代码时的用户信息</div><div class="line"><span class="meta">$</span> git config [--global] user.name "[name]"</div><div class="line"><span class="meta">$</span> git config [--global] user.email "[email address]"</div></pre></td></tr></table></figure>
<h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 添加指定文件到暂存区</div><div class="line"><span class="meta">$</span> git add [file1] [file2] ...</div><div class="line"><span class="meta"></span></div><div class="line"># 添加指定目录到暂存区，包括子目录</div><div class="line"><span class="meta">$</span> git add [dir]</div><div class="line"><span class="meta"></span></div><div class="line"># 添加当前目录的所有文件到暂存区</div><div class="line"><span class="meta">$</span> git add .</div><div class="line"><span class="meta"></span></div><div class="line"># 添加每个变化前，都会要求确认</div><div class="line"><span class="meta">#</span> 对于同一个文件的多处变化，可以实现分次提交</div><div class="line"><span class="meta">$</span> git add -p</div><div class="line"><span class="meta"></span></div><div class="line"># 删除工作区文件，并且将这次删除放入暂存区</div><div class="line"><span class="meta">$</span> git rm [file1] [file2] ...</div><div class="line"><span class="meta"></span></div><div class="line"># 改名文件，并且将这个改名放入暂存区</div><div class="line"><span class="meta">$</span> git mv [file-original] [file-renamed]</div><div class="line"><span class="meta"></span></div><div class="line"># 停止追踪指定文件(删除的文件追踪不了)，但该文件会保留在工作区</div><div class="line"><span class="meta">$</span> git rm --cached [file]</div></pre></td></tr></table></figure>
<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 提交暂存区到仓库区</div><div class="line"><span class="meta">$</span> git commit -m [message]</div><div class="line"><span class="meta"></span></div><div class="line"># 提交暂存区的指定文件到仓库区</div><div class="line"><span class="meta">$</span> git commit [file1] [file2] ... -m [message]</div><div class="line"><span class="meta"></span></div><div class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</div><div class="line"><span class="meta">$</span> git commit -a</div><div class="line"><span class="meta"></span></div><div class="line"># 提交时显示所有diff信息</div><div class="line"><span class="meta">$</span> git commit -v</div><div class="line"><span class="meta"></span></div><div class="line"># 使用一次新的commit，替代上一次提交</div><div class="line"><span class="meta">#</span> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</div><div class="line"><span class="meta">$</span> git commit --amend -m [message]</div><div class="line"><span class="meta"></span></div><div class="line"># 重做上一次commit，并包括指定文件的新变化</div><div class="line"><span class="meta">$</span> git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 列出所有本地分支</div><div class="line"><span class="meta">$</span> git branch</div><div class="line"><span class="meta"></span></div><div class="line"># 列出所有远程分支</div><div class="line"><span class="meta">$</span> git branch -r</div><div class="line"><span class="meta"></span></div><div class="line"># 列出所有本地分支和远程分支</div><div class="line"><span class="meta">$</span> git branch -a</div><div class="line"><span class="meta"></span></div><div class="line"># 新建一个分支，但依然停留在当前分支</div><div class="line"><span class="meta">$</span> git branch [branch-name]</div><div class="line"><span class="meta"></span></div><div class="line"># 新建一个分支，并切换到该分支</div><div class="line"><span class="meta">$</span> git checkout -b [branch]</div><div class="line"><span class="meta"></span></div><div class="line"># 新建一个分支，指向指定commit</div><div class="line"><span class="meta">$</span> git branch [branch] [commit]</div><div class="line"><span class="meta"></span></div><div class="line"># 新建一个分支，与指定的远程分支建立追踪关系</div><div class="line"><span class="meta">$</span> git branch --track [branch] [remote-branch]</div><div class="line"><span class="meta"></span></div><div class="line"># 切换到指定分支，并更新工作区</div><div class="line"><span class="meta">$</span> git checkout [branch-name]</div><div class="line"><span class="meta"></span></div><div class="line"># 切换到上一个分支</div><div class="line"><span class="meta">$</span> git checkout -</div><div class="line"><span class="meta"></span></div><div class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</div><div class="line"><span class="meta">$</span> git branch --set-upstream [branch] [remote-branch]</div><div class="line"><span class="meta"></span></div><div class="line"># 合并指定分支到当前分支</div><div class="line"><span class="meta">$</span> git merge [branch]</div><div class="line"><span class="meta"></span></div><div class="line"># 选择一个commit，合并进当前分支</div><div class="line"><span class="meta">$</span> git cherry-pick [commit]</div><div class="line"><span class="meta"></span></div><div class="line"># 删除分支</div><div class="line"><span class="meta">$</span> git branch -d [branch-name]</div><div class="line"><span class="meta"></span></div><div class="line"># 删除远程分支</div><div class="line"><span class="meta">$</span> git push origin --delete [branch-name]</div><div class="line"><span class="meta">$</span> git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 列出所有tag</div><div class="line"><span class="meta">$</span> git tag</div><div class="line"><span class="meta"></span></div><div class="line"># 新建一个tag在当前commit</div><div class="line"><span class="meta">$</span> git tag [tag]</div><div class="line"><span class="meta"></span></div><div class="line"># 新建一个tag在指定commit</div><div class="line"><span class="meta">$</span> git tag [tag] [commit]</div><div class="line"><span class="meta"></span></div><div class="line"># 删除本地tag</div><div class="line"><span class="meta">$</span> git tag -d [tag]</div><div class="line"><span class="meta"></span></div><div class="line"># 删除远程tag</div><div class="line"><span class="meta">$</span> git push origin :refs/tags/[tagName]</div><div class="line"><span class="meta"></span></div><div class="line"># 查看tag信息</div><div class="line"><span class="meta">$</span> git show [tag]</div><div class="line"><span class="meta"></span></div><div class="line"># 提交指定tag</div><div class="line"><span class="meta">$</span> git push [remote] [tag]</div><div class="line"><span class="meta"></span></div><div class="line"># 提交所有tag</div><div class="line"><span class="meta">$</span> git push [remote] --tags</div><div class="line"><span class="meta"></span></div><div class="line"># 新建一个分支，指向某个tag</div><div class="line"><span class="meta">$</span> git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta"></span></div><div class="line"># 显示有变更的文件</div><div class="line"><span class="meta">$</span> git status</div><div class="line"><span class="meta"></span></div><div class="line"># 显示当前分支的版本历史</div><div class="line"><span class="meta">$</span> git log</div><div class="line"><span class="meta"></span></div><div class="line"># 显示commit历史，以及每次commit发生变更的文件</div><div class="line"><span class="meta">$</span> git log --stat</div><div class="line"><span class="meta"></span></div><div class="line"># 搜索提交历史，根据关键词</div><div class="line"><span class="meta">$</span> git log -S [keyword]</div><div class="line"><span class="meta"></span></div><div class="line"># 显示某个commit之后的所有变动，每个commit占据一行</div><div class="line"><span class="meta">$</span> git log [tag] HEAD --pretty=format:%s</div><div class="line"><span class="meta"></span></div><div class="line"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</div><div class="line"><span class="meta">$</span> git log [tag] HEAD --grep feature</div><div class="line"><span class="meta"></span></div><div class="line"># 显示某个文件的版本历史，包括文件改名</div><div class="line"><span class="meta">$</span> git log --follow [file]</div><div class="line"><span class="meta">$</span> git whatchanged [file]</div><div class="line"><span class="meta"></span></div><div class="line"># 显示指定文件相关的每一次diff</div><div class="line"><span class="meta">$</span> git log -p [file]</div><div class="line"><span class="meta"></span></div><div class="line"># 显示过去5次提交</div><div class="line"><span class="meta">$</span> git log -5 --pretty --oneline</div><div class="line"><span class="meta"></span></div><div class="line"># 显示所有提交过的用户，按提交次数排序</div><div class="line"><span class="meta">$</span> git shortlog -sn</div><div class="line"><span class="meta"></span></div><div class="line"># 显示指定文件是什么人在什么时间修改过</div><div class="line"><span class="meta">$</span> git blame [file]</div><div class="line"><span class="meta"></span></div><div class="line"># 显示暂存区和工作区的差异</div><div class="line"><span class="meta">$</span> git diff</div><div class="line"><span class="meta"></span></div><div class="line"># 显示暂存区和上一个commit的差异</div><div class="line"><span class="meta">$</span> git diff --cached [file]</div><div class="line"><span class="meta"></span></div><div class="line"># 显示工作区与当前分支最新commit之间的差异</div><div class="line"><span class="meta">$</span> git diff HEAD</div><div class="line"><span class="meta"></span></div><div class="line"># 显示两次提交之间的差异</div><div class="line"><span class="meta">$</span> git diff [first-branch]...[second-branch]</div><div class="line"><span class="meta"></span></div><div class="line"># 显示今天你写了多少行代码</div><div class="line"><span class="meta">$</span> git diff --shortstat "@&#123;0 day ago&#125;"</div><div class="line"><span class="meta"></span></div><div class="line"># 显示某次提交的元数据和内容变化</div><div class="line"><span class="meta">$</span> git show [commit]</div><div class="line"><span class="meta"></span></div><div class="line"># 显示某次提交发生变化的文件</div><div class="line"><span class="meta">$</span> git show --name-only [commit]</div><div class="line"><span class="meta"></span></div><div class="line"># 显示某次提交时，某个文件的内容</div><div class="line"><span class="meta">$</span> git show [commit]:[filename]</div><div class="line"><span class="meta"></span></div><div class="line"># 显示当前分支的最近几次提交</div><div class="line"><span class="meta">$</span> git reflog</div></pre></td></tr></table></figure>
<h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 下载远程仓库的所有变动</div><div class="line"><span class="meta">$</span> git fetch [remote]</div><div class="line"><span class="meta"></span></div><div class="line"># 显示所有远程仓库</div><div class="line"><span class="meta">$</span> git remote -v</div><div class="line"><span class="meta"></span></div><div class="line"># 显示某个远程仓库的信息</div><div class="line"><span class="meta">$</span> git remote show [remote]</div><div class="line"><span class="meta"></span></div><div class="line"># 增加一个新的远程仓库，并命名</div><div class="line"><span class="meta">$</span> git remote add [shortname] [url]</div><div class="line"><span class="meta"></span></div><div class="line"># 取回远程仓库的变化，并与本地分支合并</div><div class="line"><span class="meta">$</span> git pull [remote] [branch]</div><div class="line"><span class="meta"></span></div><div class="line"># 上传本地指定分支到远程仓库</div><div class="line"><span class="meta">$</span> git push [remote] [branch]</div><div class="line"><span class="meta"></span></div><div class="line"># 强行推送当前分支到远程仓库，即使有冲突</div><div class="line"><span class="meta">$</span> git push [remote] --force</div><div class="line"><span class="meta"></span></div><div class="line"># 推送所有分支到远程仓库</div><div class="line"><span class="meta">$</span> git push [remote] --all</div></pre></td></tr></table></figure>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 恢复暂存区的指定文件到工作区</div><div class="line"><span class="meta">$</span> git checkout [file]</div><div class="line"><span class="meta"></span></div><div class="line"># 恢复某个commit的指定文件到暂存区和工作区</div><div class="line"><span class="meta">$</span> git checkout [commit] [file]</div><div class="line"><span class="meta"></span></div><div class="line"># 恢复暂存区的所有文件到工作区</div><div class="line"><span class="meta">$</span> git checkout .</div><div class="line"><span class="meta"></span></div><div class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</div><div class="line"><span class="meta">$</span> git reset [file]</div><div class="line"><span class="meta"></span></div><div class="line"># 重置暂存区与工作区，与上一次commit保持一致</div><div class="line"><span class="meta">$</span> git reset --hard</div><div class="line"><span class="meta"></span></div><div class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</div><div class="line"><span class="meta">$</span> git reset [commit]</div><div class="line"><span class="meta"></span></div><div class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</div><div class="line"><span class="meta">$</span> git reset --hard [commit]</div><div class="line"><span class="meta"></span></div><div class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</div><div class="line"><span class="meta">$</span> git reset --keep [commit]</div><div class="line"><span class="meta"></span></div><div class="line"># 新建一个commit，用来撤销指定commit</div><div class="line"><span class="meta">#</span> 后者的所有变化都将被前者抵消，并且应用到当前分支</div><div class="line"><span class="meta">$</span> git revert [commit]</div><div class="line"><span class="meta"></span></div><div class="line"># 暂时将未提交的变化移除，稍后再移入</div><div class="line"><span class="meta">$</span> git stash</div><div class="line"><span class="meta">$</span> git stash pop</div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 生成一个可供发布的压缩包</div><div class="line"><span class="meta">$</span> git archive</div></pre></td></tr></table></figure>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
        
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用svn客户端功能</title>
    <link href="http://yoursite.com/2017/05/05/svn-commend/"/>
    <id>http://yoursite.com/2017/05/05/svn-commend/</id>
    <published>2017-05-05T06:23:58.000Z</published>
    <updated>2017-05-05T07:17:27.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用svn客户端功能"><a href="#使用svn客户端功能" class="headerlink" title="使用svn客户端功能"></a>使用svn客户端功能</h2><p><strong>1.从本地导入代码到服务器(第一次初始化导入)</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn import /Users/apple/Documents/eclipse_workspace/weibo svn://localhost/mycode/weibo --username=mj --password=123 -m &quot;初始化导入&quot;</div></pre></td></tr></table></figure>
<p>我解释下指令的意思：将<code>/Users/apple/Documents/eclipse_workspace/weibo</code>中的所有内容，上传到服务器<code>mycode</code>仓库的<code>weibo</code>目录下，后面双引号中的”初始化导入”是注释</p>
<p><strong>2.从服务器端下载代码到客户端本地</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn checkout svn://localhost/mycode --username=mj --password=123 /Users/apple/Documents/code</div></pre></td></tr></table></figure>
<p>我解释下指令的意思：将服务器中<code>mycode</code>仓库的内容下载到<code>/Users/apple/Documents/code</code>目录中</p>
<p><strong>3.提交更改过的代码到服务器</strong></p>
<p>在步骤2中已经将服务器端的代码都下载到<code>/Users/apple/Documents/code</code>目录中，现在修改下里面的一些代码，然后提交这些修改到服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//&lt;1&gt; 打开终端，先定位到/Users/apple/Documents/code目录</div><div class="line">$ cd/Users/apple/Documents/code</div><div class="line"></div><div class="line">//&lt;2&gt; 输入提交指令：</div><div class="line">$ svn commit -m &quot;修改了main.m文件&quot;</div></pre></td></tr></table></figure>
<p>这个指令会将<code>/Users/apple/Documents/code</code>下的所有修改都同步到服务器端，假如这次我只修改了<code>main.m</code>文件</p>
<p><strong>4.更新服务器端的代码到客户端</strong></p>
<p>这个应该是最简单的指令了，在终端中定位到客户端代码目录后，比如上面的<code>/Users/apple/Documents/code</code>目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  svn update</div></pre></td></tr></table></figure>
<p><strong>5.至于svn的其他用法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn help</div></pre></td></tr></table></figure>
<p><strong><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="svn-commend/svn-help.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure></strong></p>
<p>这里列出一大堆<code>svn</code>指令，后面括号中的内容的一般代表着指令的简称，比如我们可以用<code>svn ci</code>代替<code>svn commit</code>，用<code>svn co</code>代替<code>svn checkout</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用svn客户端功能&quot;&gt;&lt;a href=&quot;#使用svn客户端功能&quot; class=&quot;headerlink&quot; title=&quot;使用svn客户端功能&quot;&gt;&lt;/a&gt;使用svn客户端功能&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.从本地导入代码到服务器(第一次初始化导入)&lt;/stron
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SSH key (win)</title>
    <link href="http://yoursite.com/2017/05/05/sshkey/"/>
    <id>http://yoursite.com/2017/05/05/sshkey/</id>
    <published>2017-05-05T06:21:40.000Z</published>
    <updated>2017-05-05T07:17:47.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="window系统"><a href="#window系统" class="headerlink" title="window系统"></a>window系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//运行git Bash客户端</div><div class="line">$ cd ~/.ssh</div><div class="line"></div><div class="line">//查看目录文件</div><div class="line">$ ls</div><div class="line"></div><div class="line">//创建一个SSH key</div><div class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div><div class="line"></div><div class="line">//拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容</div><div class="line">$ clip &lt; ~/.ssh/id_rsa.pub</div><div class="line"></div><div class="line">//测试一下该SSH key</div><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;window系统&quot;&gt;&lt;a href=&quot;#window系统&quot; class=&quot;headerlink&quot; title=&quot;window系统&quot;&gt;&lt;/a&gt;window系统&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 常用快捷键(WIN)</title>
    <link href="http://yoursite.com/2017/05/05/vscode-keymap/"/>
    <id>http://yoursite.com/2017/05/05/vscode-keymap/</id>
    <published>2017-05-05T01:59:54.000Z</published>
    <updated>2017-05-23T09:41:13.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主命令框"><a href="#主命令框" class="headerlink" title="主命令框"></a>主命令框</h2><p><code>F1</code>或 <code>Ctrl+Shift+P</code>: 打开命令面板。在打开的输入框内，可以输入任何命令，例如：</p>
<ul>
<li>按一下 <code>Backspace</code>会进入到<code>Ctrl+P</code> 模式</li>
</ul>
<ul>
<li>在<code>Ctrl+P</code>下输入 <code>&gt;</code>可以进入<code>Ctrl+Shift+P</code>模式</li>
</ul>
<p>在 <code>Ctrl+P</code> 窗口下还可以:</p>
<ul>
<li>直接输入文件名，跳转到文件</li>
<li><code>?</code>列出当前可执行的动作</li>
<li><code>!</code> 显示 Errors或 Warnings，也可以 <code>Ctrl+Shift+M</code></li>
<li><code>:</code>跳转到行数，也可以 <code>Ctrl+G</code>直接进入</li>
<li><code>@</code>跳转到 <code>symbol</code>（搜索变量或者函数），也可以 <code>Ctrl+Shift+O</code>直接进入</li>
<li><code>@</code>根据分类跳转 <code>symbol</code>，查找属性或函数，也可以 <code>Ctrl+Shift+O</code> 后输入<code>:</code>进入</li>
<li><code>#</code>根据名字查找 <code>symbol</code>，也可以 <code>Ctrl+T</code></li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="Basic-Editing"><a href="#Basic-Editing" class="headerlink" title="Basic Editing"></a>Basic Editing</h3><table>
<thead>
<tr>
<th>Key</th>
<th>Command</th>
<th>Command id</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Ctrl+X</strong></td>
<td>Cut line (empty selection)</td>
<td>剪切</td>
</tr>
<tr>
<td><strong>Ctrl+C</strong></td>
<td>Copy line (empty selection)</td>
<td>复制</td>
</tr>
<tr>
<td><strong>Ctrl+Shift+K</strong></td>
<td>Delete Line</td>
<td>删除当前行</td>
</tr>
<tr>
<td><strong>Ctrl+Enter</strong></td>
<td>Insert Line Below</td>
<td>向下插入空行</td>
</tr>
<tr>
<td><strong>Ctrl+Shift+Enter</strong></td>
<td>Insert Line Above</td>
<td>向上插入空行</td>
</tr>
<tr>
<td><strong>Alt+Down</strong></td>
<td>Move Line Down</td>
<td>向下移动当前行</td>
</tr>
<tr>
<td><strong>Alt+Up</strong></td>
<td>Move Line Up</td>
<td>向上移动当前行</td>
</tr>
<tr>
<td><strong>Shift+Alt+Down</strong></td>
<td>Copy Line Down</td>
<td>向下插入当前行内容</td>
</tr>
<tr>
<td><strong>Shift+Alt+Up</strong></td>
<td>Copy Line Up</td>
<td>向上插入当前行内容</td>
</tr>
<tr>
<td><strong>Ctrl+D</strong></td>
<td>Add Selection To Next Find Match</td>
<td><code>editor.action.addSelectionToNextFindMatch</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+D</td>
<td>Move Last Selection To Next Find Match</td>
<td><code>editor.action.moveSelectionToNextFindMatch</code></td>
</tr>
<tr>
<td><strong>Ctrl+U</strong></td>
<td>Undo last cursor operation</td>
<td>回退光标操作位置</td>
</tr>
<tr>
<td>Shift+Alt+I</td>
<td>Insert cursor at end of each line selected</td>
<td><code>editor.action.insertCursorAtEndOfEachLineSelected</code></td>
</tr>
<tr>
<td>Ctrl+Shift+L</td>
<td>Select all occurrences of current selection</td>
<td><code>editor.action.selectHighlights</code></td>
</tr>
<tr>
<td>Ctrl+F2</td>
<td>Select all occurrences of current word</td>
<td><code>editor.action.changeAll</code></td>
</tr>
<tr>
<td><strong>Ctrl+I</strong></td>
<td>Select current line</td>
<td>选中当前行内容</td>
</tr>
<tr>
<td>Ctrl+Alt+Down</td>
<td>Insert Cursor Below</td>
<td><code>editor.action.insertCursorBelow</code></td>
</tr>
<tr>
<td>Ctrl+Alt+Up</td>
<td>Insert Cursor Above</td>
<td><code>editor.action.insertCursorAbove</code></td>
</tr>
<tr>
<td>Ctrl+Shift+\</td>
<td>Jump to matching bracket</td>
<td><code>editor.action.jumpToBracket</code></td>
</tr>
<tr>
<td><strong>Ctrl+]</strong></td>
<td>Indent Line</td>
<td>增加当前行缩进</td>
</tr>
<tr>
<td><strong>Ctrl+[</strong></td>
<td>Outdent Line</td>
<td>减少当前行缩进</td>
</tr>
<tr>
<td><strong>Home</strong></td>
<td>Go to Beginning of Line</td>
<td>光标定位到行首</td>
</tr>
<tr>
<td><strong>End</strong></td>
<td>Go to End of Line</td>
<td>光标定位到行尾</td>
</tr>
<tr>
<td><strong>Ctrl+End</strong></td>
<td>Go to End of File</td>
<td>光标定位到文件的尾部</td>
</tr>
<tr>
<td><strong>Ctrl+Home</strong></td>
<td>Go to Beginning of File</td>
<td>光标定位到文件的开头</td>
</tr>
<tr>
<td><strong>Ctrl+Down</strong></td>
<td>Scroll Line Down</td>
<td>滚动条向下移动</td>
</tr>
<tr>
<td><strong>Ctrl+Up</strong></td>
<td>Scroll Line Up</td>
<td>滚动条向上移动</td>
</tr>
<tr>
<td><strong>Alt+PageDown</strong></td>
<td>Scroll Page Down</td>
<td>滚动条向下移动一屏</td>
</tr>
<tr>
<td><strong>Alt+PageUp</strong></td>
<td>Scroll Page Up</td>
<td>滚动条向上移动一屏</td>
</tr>
<tr>
<td>Ctrl+Shift+[</td>
<td>Fold (collapse) region</td>
<td>折叠代码</td>
</tr>
<tr>
<td>Ctrl+Shift+]</td>
<td>Unfold (uncollapse) region</td>
<td>展开代码</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+[</td>
<td>Fold (collapse) all subregions</td>
<td><code>editor.foldRecursively</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+]</td>
<td>Unfold (uncollapse) all subregions</td>
<td><code>editor.unfoldRecursively</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+0</td>
<td>Fold (collapse) all regions</td>
<td><code>editor.foldAll</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+J</td>
<td>Unfold (uncollapse) all regions</td>
<td><code>editor.unfoldAll</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+C</td>
<td>Add Line Comment</td>
<td><code>editor.action.addCommentLine</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+U</td>
<td>Remove Line Comment</td>
<td><code>editor.action.removeCommentLine</code></td>
</tr>
<tr>
<td><strong>Ctrl+/</strong></td>
<td>Toggle Line Comment</td>
<td>注释(或取消注释)当前行代码,<code>//注释内容</code></td>
</tr>
<tr>
<td><strong>Shift+Alt+A</strong></td>
<td>Toggle Block Comment</td>
<td>注释(或取消注释)选择代码,<code>/*注释内容*/</code></td>
</tr>
<tr>
<td><strong>Ctrl+F</strong></td>
<td>Find</td>
<td>查找</td>
</tr>
<tr>
<td><strong>Ctrl+H</strong></td>
<td>Replace</td>
<td>替换</td>
</tr>
<tr>
<td><strong>F3</strong></td>
<td>Command</td>
<td>Command id</td>
</tr>
<tr>
<td><strong>Shift+F3</strong></td>
<td>Cut line (empty selection)</td>
<td>剪切</td>
</tr>
<tr>
<td><strong>Ctrl+C</strong></td>
<td>Copy line (empty selection)</td>
<td>复制</td>
</tr>
<tr>
<td><strong>Ctrl+Shift+K</strong></td>
<td>Delete Line</td>
<td>删除当前行</td>
</tr>
<tr>
<td><strong>Ctrl+Enter</strong></td>
<td>Insert Line Below</td>
<td>向下插入空行</td>
</tr>
<tr>
<td><strong>Ctrl+Shift+Enter</strong></td>
<td>Insert Line Above</td>
<td>向上插入空行</td>
</tr>
<tr>
<td><strong>Alt+Down</strong></td>
<td>Move Line Down</td>
<td>向下移动当前行</td>
</tr>
<tr>
<td><strong>Alt+Up</strong></td>
<td>Move Line Up</td>
<td>向上移动当前行</td>
</tr>
<tr>
<td><strong>Shift+Alt+Down</strong></td>
<td>Copy Line Down</td>
<td>向下插入当前行内容</td>
</tr>
</tbody>
</table>
<h3 id="Rich-Languages-Editing"><a href="#Rich-Languages-Editing" class="headerlink" title="Rich Languages Editing"></a>Rich Languages Editing</h3><table>
<thead>
<tr>
<th>Key</th>
<th>Command</th>
<th>Command id</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+Space</td>
<td>Trigger Suggest</td>
<td><code>editor.action.triggerSuggest</code></td>
</tr>
<tr>
<td>Ctrl+Shift+Space</td>
<td>Trigger Parameter Hints</td>
<td><code>editor.action.triggerParameterHints</code></td>
</tr>
<tr>
<td><strong>Shift+Alt+F</strong></td>
<td>Format Document</td>
<td><code>editor.action.formatDocument</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+F</td>
<td>Format Selection</td>
<td><code>editor.action.formatSelection</code></td>
</tr>
<tr>
<td>F12</td>
<td>Go to Definition</td>
<td><code>editor.action.goToDeclaration</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+I</td>
<td>Show Hover</td>
<td><code>editor.action.showHover</code></td>
</tr>
<tr>
<td>Alt+F12</td>
<td>Peek Definition</td>
<td><code>editor.action.previewDeclaration</code></td>
</tr>
<tr>
<td>Ctrl+K F12</td>
<td>Open Definition to the Side</td>
<td><code>editor.action.openDeclarationToTheSide</code></td>
</tr>
<tr>
<td>Ctrl+.</td>
<td>Quick Fix</td>
<td><code>editor.action.quickFix</code></td>
</tr>
<tr>
<td>Shift+F12</td>
<td>Show References</td>
<td><code>editor.action.referenceSearch.trigger</code></td>
</tr>
<tr>
<td>F2</td>
<td>Rename Symbol</td>
<td><code>editor.action.rename</code></td>
</tr>
<tr>
<td>Ctrl+Shift+.</td>
<td>Replace with Next Value</td>
<td><code>editor.action.inPlaceReplace.down</code></td>
</tr>
<tr>
<td>Ctrl+Shift+,</td>
<td>Replace with Previous Value</td>
<td><code>editor.action.inPlaceReplace.up</code></td>
</tr>
<tr>
<td>Shift+Alt+Right</td>
<td>Expand AST Select</td>
<td><code>editor.action.smartSelect.grow</code></td>
</tr>
<tr>
<td>Shift+Alt+Left</td>
<td>Shrink AST Select</td>
<td><code>editor.action.smartSelect.shrink</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+X</td>
<td>Trim Trailing Whitespace</td>
<td><code>editor.action.trimTrailingWhitespace</code></td>
</tr>
<tr>
<td>Ctrl+K M</td>
<td>Change Language Mode</td>
<td><code>workbench.action.editor.changeLanguageMode</code></td>
</tr>
</tbody>
</table>
<h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><table>
<thead>
<tr>
<th>Key</th>
<th>Command</th>
<th>Command id</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+T</td>
<td>Show All Symbols</td>
<td><code>workbench.action.showAllSymbols</code></td>
</tr>
<tr>
<td>Ctrl+G</td>
<td>Go to Line…</td>
<td><code>workbench.action.gotoLine</code></td>
</tr>
<tr>
<td>Ctrl+P</td>
<td>Go to File…, Quick Open</td>
<td><code>workbench.action.quickOpen</code></td>
</tr>
<tr>
<td>Ctrl+Shift+O</td>
<td>Go to Symbol…</td>
<td><code>workbench.action.gotoSymbol</code></td>
</tr>
<tr>
<td>Ctrl+Shift+M</td>
<td>Show Problems</td>
<td><code>workbench.actions.view.problems</code></td>
</tr>
<tr>
<td>F8</td>
<td>Go to Next Error or Warning</td>
<td><code>editor.action.marker.next</code></td>
</tr>
<tr>
<td>Shift+F8</td>
<td>Go to Previous Error or Warning</td>
<td><code>editor.action.marker.prev</code></td>
</tr>
<tr>
<td>Ctrl+Shift+P</td>
<td>Show All Commands</td>
<td><code>workbench.action.showCommands</code></td>
</tr>
<tr>
<td>Ctrl+Shift+Tab</td>
<td>Navigate Editor Group History</td>
<td><code>workbench.action.openPreviousRecentlyUsedEditorInGroup</code></td>
</tr>
<tr>
<td>Alt+Left</td>
<td>Go Back</td>
<td><code>workbench.action.navigateBack</code></td>
</tr>
<tr>
<td>Alt+Right</td>
<td>Go Forward</td>
<td><code>workbench.action.navigateForward</code></td>
</tr>
</tbody>
</table>
<h3 id="Editor-Window-Management"><a href="#Editor-Window-Management" class="headerlink" title="Editor/Window Management"></a>Editor/Window Management</h3><table>
<thead>
<tr>
<th>Key</th>
<th>Command</th>
<th>Command id</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+Shift+N</td>
<td>New Window</td>
<td><code>workbench.action.newWindow</code></td>
</tr>
<tr>
<td>Ctrl+W</td>
<td>Close Window</td>
<td><code>workbench.action.closeWindow</code></td>
</tr>
<tr>
<td>Ctrl+F4</td>
<td>Close Editor</td>
<td><code>workbench.action.closeActiveEditor</code></td>
</tr>
<tr>
<td>Ctrl+K F</td>
<td>Close Folder</td>
<td><code>workbench.action.closeFolder</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Cycle Between Editor Groups</td>
<td><code>workbench.action.navigateEditorGroups</code></td>
</tr>
<tr>
<td>Ctrl+\</td>
<td>Split Editor</td>
<td><code>workbench.action.splitEditor</code></td>
</tr>
<tr>
<td>Ctrl+1</td>
<td>Focus into First Editor Group</td>
<td><code>workbench.action.focusFirstEditorGroup</code></td>
</tr>
<tr>
<td>Ctrl+2</td>
<td>Focus into Second Editor Group</td>
<td><code>workbench.action.focusSecondEditorGroup</code></td>
</tr>
<tr>
<td>Ctrl+3</td>
<td>Focus into Third Editor Group</td>
<td><code>workbench.action.focusThirdEditorGroup</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+Left</td>
<td>Focus into Editor Group on the Left</td>
<td><code>workbench.action.focusPreviousGroup</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+Right</td>
<td>Focus into Editor Group on the Right</td>
<td><code>workbench.action.focusNextGroup</code></td>
</tr>
<tr>
<td>Ctrl+Shift+PageUp</td>
<td>Move Editor Left</td>
<td><code>workbench.action.moveEditorLeftInGroup</code></td>
</tr>
<tr>
<td>Ctrl+Shift+PageDown</td>
<td>Move Editor Right</td>
<td><code>workbench.action.moveEditorRightInGroup</code></td>
</tr>
<tr>
<td>Ctrl+K Left</td>
<td>Move Active Editor Group Left</td>
<td><code>workbench.action.moveActiveEditorGroupLeft</code></td>
</tr>
<tr>
<td>Ctrl+K Right</td>
<td>Move Active Editor Group Right</td>
<td><code>workbench.action.moveActiveEditorGroupRight</code></td>
</tr>
</tbody>
</table>
<h3 id="File-Management"><a href="#File-Management" class="headerlink" title="File Management"></a>File Management</h3><table>
<thead>
<tr>
<th>Key</th>
<th>Command</th>
<th>Command id</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+N</td>
<td>New File</td>
<td><code>workbench.action.files.newUntitledFile</code></td>
</tr>
<tr>
<td>Ctrl+O</td>
<td>Open File…</td>
<td><code>workbench.action.files.openFile</code></td>
</tr>
<tr>
<td>Ctrl+S</td>
<td>Save</td>
<td><code>workbench.action.files.save</code></td>
</tr>
<tr>
<td>Ctrl+K S</td>
<td>Save All</td>
<td><code>workbench.action.files.saveAll</code></td>
</tr>
<tr>
<td>Ctrl+Shift+S</td>
<td>Save As…</td>
<td><code>workbench.action.files.saveAs</code></td>
</tr>
<tr>
<td>Ctrl+F4</td>
<td>Close</td>
<td><code>workbench.action.closeActiveEditor</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Close Others</td>
<td><code>workbench.action.closeOtherEditors</code></td>
</tr>
<tr>
<td>Ctrl+K W</td>
<td>Close Group</td>
<td><code>workbench.action.closeEditorsInGroup</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Close Other Groups</td>
<td><code>workbench.action.closeEditorsInOtherGroups</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Close Group to Left</td>
<td><code>workbench.action.closeEditorsToTheLeft</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Close Group to Right</td>
<td><code>workbench.action.closeEditorsToTheRight</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+W</td>
<td>Close All</td>
<td><code>workbench.action.closeAllEditors</code></td>
</tr>
<tr>
<td>Ctrl+Shift+T</td>
<td>Reopen Closed Editor</td>
<td><code>workbench.action.reopenClosedEditor</code></td>
</tr>
<tr>
<td>Ctrl+K Enter</td>
<td>Keep Open</td>
<td><code>workbench.action.keepEditor</code></td>
</tr>
<tr>
<td>Ctrl+Tab</td>
<td>Open Next</td>
<td><code>workbench.action.openNextRecentlyUsedEditorInGroup</code></td>
</tr>
<tr>
<td>Ctrl+Shift+Tab</td>
<td>Open Previous</td>
<td><code>workbench.action.openPreviousRecentlyUsedEditorInGroup</code></td>
</tr>
<tr>
<td>Ctrl+K P</td>
<td>Copy Path of Active File</td>
<td><code>workbench.action.files.copyPathOfActiveFile</code></td>
</tr>
<tr>
<td>Ctrl+K R</td>
<td>Reveal Active File in Windows</td>
<td><code>workbench.action.files.revealActiveFileInWindows</code></td>
</tr>
<tr>
<td>Ctrl+K O</td>
<td>Show Opened File in New Window</td>
<td><code>workbench.action.files.showOpenedFileInNewWindow</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Compare Opened File With</td>
<td><code>workbench.files.action.compareFileWith</code></td>
</tr>
</tbody>
</table>
<h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><table>
<thead>
<tr>
<th>Key</th>
<th>Command</th>
<th>Command id</th>
</tr>
</thead>
<tbody>
<tr>
<td>F11</td>
<td>Toggle Full Screen</td>
<td><code>workbench.action.toggleFullScreen</code></td>
</tr>
<tr>
<td>Ctrl+K Z</td>
<td>Toggle Zen Mode</td>
<td><code>workbench.action.toggleZenMode</code></td>
</tr>
<tr>
<td>Escape Escape</td>
<td>Leave Zen Mode</td>
<td><code>workbench.action.exitZenMode</code></td>
</tr>
<tr>
<td>Ctrl+=</td>
<td>Zoom in</td>
<td><code>workbench.action.zoomIn</code></td>
</tr>
<tr>
<td>Ctrl+-</td>
<td>Zoom out</td>
<td><code>workbench.action.zoomOut</code></td>
</tr>
<tr>
<td>Ctrl+Numpad0</td>
<td>Reset Zoom</td>
<td><code>workbench.action.zoomReset</code></td>
</tr>
<tr>
<td>Ctrl+B</td>
<td>Toggle Sidebar Visibility</td>
<td><code>workbench.action.toggleSidebarVisibility</code></td>
</tr>
<tr>
<td>Ctrl+Shift+E</td>
<td>Show Explorer / Toggle Focus</td>
<td><code>workbench.view.explorer</code></td>
</tr>
<tr>
<td>Ctrl+Shift+D</td>
<td>Show Debug</td>
<td><code>workbench.view.debug</code></td>
</tr>
<tr>
<td>Ctrl+Shift+G</td>
<td>Show Source Control</td>
<td><code>workbench.view.scm</code></td>
</tr>
<tr>
<td>Ctrl+Shift+X</td>
<td>Show Extensions</td>
<td><code>workbench.view.extensions</code></td>
</tr>
<tr>
<td>Ctrl+Shift+U</td>
<td>Show Output</td>
<td><code>workbench.action.output.toggleOutput</code></td>
</tr>
<tr>
<td>Ctrl+Q</td>
<td>Quick Open View</td>
<td><code>workbench.action.quickOpenView</code></td>
</tr>
<tr>
<td>Ctrl+Shift+F</td>
<td>Show Search</td>
<td><code>workbench.view.search</code></td>
</tr>
<tr>
<td>Ctrl+Shift+H</td>
<td>Replace in Files</td>
<td><code>workbench.action.replaceInFiles</code></td>
</tr>
<tr>
<td>Ctrl+Shift+J</td>
<td>Toggle Search Details</td>
<td><code>workbench.action.search.toggleQueryDetails</code></td>
</tr>
<tr>
<td>Ctrl+Shift+C</td>
<td>Open New Command Prompt</td>
<td><code>workbench.action.terminal.openNativeConsole</code></td>
</tr>
<tr>
<td>Ctrl+Shift+V</td>
<td>Toggle Markdown Preview</td>
<td><code>markdown.showPreview</code></td>
</tr>
<tr>
<td>Ctrl+K V</td>
<td>Open Preview to the Side</td>
<td><code>markdown.showPreviewToSide</code></td>
</tr>
<tr>
<td><strong>Ctrl+`</strong></td>
<td>Toggle Integrated Terminal</td>
<td>workbench.action.terminal.toggleTerminal</td>
</tr>
</tbody>
</table>
<h3 id="Preferences"><a href="#Preferences" class="headerlink" title="Preferences"></a>Preferences</h3><table>
<thead>
<tr>
<th>Key</th>
<th>Command</th>
<th>Command id</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+,</td>
<td>Open User Settings</td>
<td><code>workbench.action.openGlobalSettings</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Open Workspace Settings</td>
<td><code>workbench.action.openWorkspaceSettings</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+S</td>
<td>Open Keyboard Shortcuts</td>
<td><code>workbench.action.openGlobalKeybindings</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Open User Snippets</td>
<td><code>workbench.action.openSnippets</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+T</td>
<td>Select Color Theme</td>
<td><code>workbench.action.selectTheme</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Configure Display Language</td>
<td><code>workbench.action.configureLocale</code></td>
</tr>
</tbody>
</table>
<h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><table>
<thead>
<tr>
<th>Key</th>
<th>Command</th>
<th>Command id</th>
</tr>
</thead>
<tbody>
<tr>
<td>F9</td>
<td>Toggle Breakpoint</td>
<td><code>editor.debug.action.toggleBreakpoint</code></td>
</tr>
<tr>
<td>F5</td>
<td>Start</td>
<td><code>workbench.action.debug.start</code></td>
</tr>
<tr>
<td>F5</td>
<td>Continue</td>
<td><code>workbench.action.debug.continue</code></td>
</tr>
<tr>
<td>Ctrl+F5</td>
<td>Start (without debugging)</td>
<td><code>workbench.action.debug.run</code></td>
</tr>
<tr>
<td>F6</td>
<td>Pause</td>
<td><code>workbench.action.debug.pause</code></td>
</tr>
<tr>
<td>F11</td>
<td>Step Into</td>
<td><code>workbench.action.debug.stepInto</code></td>
</tr>
<tr>
<td>Shift+F11</td>
<td>Step Out</td>
<td><code>workbench.action.debug.stepOut</code></td>
</tr>
<tr>
<td>F10</td>
<td>Step Over</td>
<td><code>workbench.action.debug.stepOver</code></td>
</tr>
<tr>
<td>Shift+F5</td>
<td>Stop</td>
<td><code>workbench.action.debug.stop</code></td>
</tr>
<tr>
<td>Ctrl+K Ctrl+I</td>
<td>Show Hover</td>
<td><code>editor.debug.action.showDebugHover</code></td>
</tr>
</tbody>
</table>
<h3 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h3><table>
<thead>
<tr>
<th>Key</th>
<th>Command</th>
<th>Command id</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+Shift+B</td>
<td>Run Build Task</td>
<td><code>workbench.action.tasks.build</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Run Test Task</td>
<td><code>workbench.action.tasks.test</code></td>
</tr>
</tbody>
</table>
<h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><table>
<thead>
<tr>
<th>Key</th>
<th>Command</th>
<th>Command id</th>
</tr>
</thead>
<tbody>
<tr>
<td>unassigned</td>
<td>Install Extension</td>
<td><code>workbench.extensions.action.installExtension</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Show Installed Extensions</td>
<td><code>workbench.extensions.action.showInstalledExtensions</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Show Outdated Extensions</td>
<td><code>workbench.extensions.action.listOutdatedExtensions</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Show Recommended Extensions</td>
<td><code>workbench.extensions.action.showRecommendedExtensions</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Show Popular Extensions</td>
<td><code>workbench.extensions.action.showPopularExtensions</code></td>
</tr>
<tr>
<td>unassigned</td>
<td>Update All Extensions</td>
<td><code>workbench.extensions.action.updateAllExtensions</code></td>
</tr>
</tbody>
</table>
<h2 id="修改默认快捷键"><a href="#修改默认快捷键" class="headerlink" title="修改默认快捷键"></a>修改默认快捷键</h2><p>打开默认键盘快捷方式设置：<br><code>File -&gt; Preferences -&gt; Keyboard Shortcuts</code></p>
<p>修改<code>keybindings.json</code>：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  // ctrl+space 被切换输入法快捷键占用</div><div class="line">  &#123;</div><div class="line">  <span class="attr">"key"</span>: <span class="string">"ctrl+alt+space"</span>,</div><div class="line">  <span class="attr">"command"</span>: <span class="string">"editor.action.triggerSuggest"</span>,</div><div class="line">  <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">  &#125;,</div><div class="line">  // ctrl+d 删除一行</div><div class="line">  &#123;</div><div class="line">  <span class="attr">"key"</span>: <span class="string">"ctrl+d"</span>,</div><div class="line">  <span class="attr">"command"</span>: <span class="string">"editor.action.deleteLines"</span>,</div><div class="line">  <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">  &#125;,</div><div class="line">  // 与删除一行的快捷键互换</div><div class="line">  &#123;</div><div class="line">  <span class="attr">"key"</span>: <span class="string">"ctrl+shift+k"</span>,</div><div class="line">  <span class="attr">"command"</span>: <span class="string">"editor.action.addSelectionToNextFindMatch"</span>,</div><div class="line">  <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  // ctrl+shift+/多行注释</div><div class="line">  &#123;</div><div class="line">  <span class="attr">"key"</span>:<span class="string">"ctrl+shift+/"</span>,</div><div class="line">  <span class="attr">"command"</span>: <span class="string">"editor.action.blockComment"</span>,</div><div class="line">  <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">  &#125;,</div><div class="line">  // 定制与 sublime 相同的大小写转换快捷键，需安装 TextTransform 插件</div><div class="line">  &#123;</div><div class="line">  <span class="attr">"key"</span>: <span class="string">"ctrl+k ctrl+u"</span>,</div><div class="line">  <span class="attr">"command"</span>: <span class="string">"uppercase"</span>,</div><div class="line">  <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">  <span class="attr">"key"</span>: <span class="string">"ctrl+k ctrl+l"</span>,</div><div class="line">  <span class="attr">"command"</span>: <span class="string">"lowercase"</span>,</div><div class="line">  <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="前端开发必备插件"><a href="#前端开发必备插件" class="headerlink" title="前端开发必备插件"></a>前端开发必备插件</h2><ul>
<li>PostCSS Sorting</li>
<li>stylelint</li>
<li>stylefmt</li>
<li>ESLint</li>
<li>javascript standard format</li>
<li>beautify</li>
<li>Babel ES6/ES7</li>
<li>Debugger for Chrome</li>
<li>Add jsdoc comments</li>
<li>javascript(ES6) code snippets</li>
<li>vue</li>
<li>weex</li>
<li>Reactjs code snippets</li>
<li>React Native Tools</li>
<li>Npm Intellisense</li>
<li>Instant Markdown</li>
<li>Markdown Shortcuts</li>
<li>TextTransform</li>
</ul>
<h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><p><a href="https://code.visualstudio.com/docs/customization/keybindings" target="_blank" rel="external">官方快捷键</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主命令框&quot;&gt;&lt;a href=&quot;#主命令框&quot; class=&quot;headerlink&quot; title=&quot;主命令框&quot;&gt;&lt;/a&gt;主命令框&lt;/h2&gt;&lt;p&gt;&lt;code&gt;F1&lt;/code&gt;或 &lt;code&gt;Ctrl+Shift+P&lt;/code&gt;: 打开命令面板。在打开的输入框内，可以
    
    </summary>
    
    
      <category term="keymap" scheme="http://yoursite.com/tags/keymap/"/>
    
  </entry>
  
</feed>
